#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
% verschieden Symbole, Zeichen wie (c), €
\usepackage{textcomp,units}

% Mehr Platz zwischen Tabelle und Untertitel
\usepackage{caption}
\captionsetup[table]{skip=10pt}

%Kapitelzahl sehr groß
\makeatletter% siehe De-TeX-FAQ 
 \renewcommand*{\chapterformat}{% 
   \begingroup% damit \unitlength-Änderung lokal bleibt 
     \setlength{\unitlength}{1mm}% 
     \begin{picture}(10,10)(0,5) 
       \setlength{\fboxsep}{0pt} 
       %\put(0,0){\framebox(20,40){}}% 
       %\put(0,20){\makebox(20,20){\rule{20\unitlength}{20\unitlength}}}% 
       \put(10,15){\line(1,0){\dimexpr 
           \textwidth-20\unitlength\relax\@gobble}}% 
       \put(0,0){\makebox(10,20)[r]{% 
           \fontsize{28\unitlength}{28\unitlength}\selectfont\thechapter 
           \kern-.05em% Ziffer in der Zeichenzelle nach rechts schieben 
         }}% 
       \put(10,15){\makebox(\dimexpr 
           \textwidth-20\unitlength\relax\@gobble,\ht\strutbox\@gobble)[l]{% 
             \ \normalsize\color{black}\chapapp~\thechapter\autodot 
           }}% 
     \end{picture} % <-- Leerzeichen ist hier beabsichtigt! 
   \endgroup 
}

\usepackage{ %a4wide,
            ellipsis, fixltx2e, mparhack,   %Fehlerkorrektur für Marginalien
            booktabs, longtable             %schönere Tabellen
}  

\usepackage[automark]{scrpage2}
%\automark[chapter]{chapter}
\clearscrheadfoot
\ohead{\\\headmark}
\ihead{\includegraphics[scale=0.15]{logo.jpg}}%\pagemark}
\ofoot[\pagemark]{\pagemark}


%Kurzfassung und Abstract (englisch) auf eine Seite
\renewenvironment{abstract}{
    \@beginparpenalty\@lowpenalty
      \begin{center}
        \normalfont\sectfont\nobreak\abstractname
        \@endparpenalty\@M
      \end{center}
}{
    \par
}



% schönerer Blocksatz!!
\usepackage{microtype}

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used

%set fonts for nicer pdf view
 \IfFileExists{lmodern.sty}{\usepackage{lmodern}}
  {\usepackage[scaled=0.92]{helvet}
    \usepackage{mathptmx}
    \usepackage{courier} }
\fi

 % the pages of the TOC are numbered roman
 % and a pdf-bookmark for the TOC is added
 \pagenumbering{roman}
 \let\myTOC\tableofcontents
 \renewcommand\tableofcontents{
   %\pdfbookmark[1]{Contents}{}
   \myTOC
   \clearpage
   \pagenumbering{arabic}}

%Bezeichungen anpassen
%Babelpaket muß zuvor geladen werden
%\usepackage[english]{babel}
%\addto\captionsngerman{} 
%\renewcommand{\figurename}{Abb.}% 
%\renewcommand{\tablename}{Tab.}% 
%\renewcommand{\abstractname}{Summary}
%\renewcommand{\nomname}{Abkürzungen}


% Alle Querverweise und URLs als Link darstellen
% In der PDF-Ausgabe
 \usepackage[colorlinks=true, bookmarks, bookmarksnumbered, bookmarksopen, bookmarksopenlevel=1,
  linkcolor=black, citecolor=black, urlcolor=blue, filecolor=blue,
  pdfpagelayout=OneColumn, pdfnewwindow=true,
  pdfstartview=XYZ, plainpages=false, pdfpagelabels,
  pdfauthor={LyX Team}, pdftex,
  pdftitle={LyX's Figure, Table, Floats, Notes, and Boxes manual},
  pdfsubject={LyX-documentation about figures, tables, floats, notes, and boxes},
  pdfkeywords={LyX, Tables, Figures, Floats, Boxes, Notes}]{hyperref}

%mehr Platz zwischen Überschrift und Tabelle
\newcommand{\@ldtable}{}
\let\@ldtable\table
\renewcommand{\table}{ %
                 \setlength{\@tempdima}{\abovecaptionskip} %
                 \setlength{\abovecaptionskip}{\belowcaptionskip} %
                 \setlength{\belowcaptionskip}{\@tempdima} %
                 \@ldtable}

%In dieser Arbeit wird auf die Nomenklatur als Abkürzungsverzeichnis verzichtet. Bei Wunsch wieder aktivieren.
%Nomenklatur als Abkürzungsverzeichnis verwenden
%\renewcommand{\nomname}{Abkürzungsverzeichnis}
%\renewcommand{\nomlabelwidth}{20mm}

%Nomenklatur als Glossar verwenden
%Nur Noetig wenn auch Glossar verwendet wird.
%\renewcommand{\nomname}{Glossary}

%Farbe für Programmcode festlegen
%\definecolor{lightgray}{rgb}{0.8,0.8,0.8}
\end_preamble
\options pointlessnumbers, abstracton, headsepline,
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 120
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing other 1.2
\use_hyperref false
\pdf_title "Analyse und Interpretation des Risswachstums an thermisch hochbelasteten Bauteilen für die Fusionsforschung mittels IR Diagnostik und FE Modellierung"
\pdf_author "Timo Schindler"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\topmargin 2.5cm
\bottommargin 3.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle plain
\bullet 2 0 9 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
titlepage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/Logo_Uni_Kassel.eps
	lyxscale 50

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Faculty Elektrotechnik / Informatik
\size default

\begin_inset space \hspace{}
\length 2.5cm
\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset VSpace 7cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
\size larger
Master Thesis
\end_layout

\begin_layout Standard
\noindent
\align left

\size large
Homework Manage System with Git-Support and hierarchical File database for
 Data management
\end_layout

\begin_layout Standard
\noindent
\align left

\size larger
\begin_inset VSpace 1.5cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Submitted by:
\begin_inset space \hspace{}
\length 1cm
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hao Gao
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matriculation number: 33101387
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supervised by:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prof.
 Dr.
 Albert Zündorf
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universität Kassel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prof.
 Dr.
 Gerd Stumme
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universität Kassel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kassel, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 17.1mm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
\size huge
Declaration of Authorship
\end_layout

\begin_layout Standard
Deutsch oder English?
\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle" tabularwidth="15cm">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kassel, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hao Gao
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
ACHTUNG: Hier am Ende noch die richtige Seite einstellen! Sonst passt die
 Nummerierung nicht!
\end_layout

\begin_layout Plain Layout
!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{page}{4}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
motivation, why we need this kind of hms?
\end_layout

\begin_layout Chapter
Basics
\end_layout

\begin_layout Standard
In order to make this thesis more understandable, the used technologies
 and their major characteristics will decribed in detail in this chapter.
 The first part introduces the version control system Git.
 It is used to manage the submitted file by The Homework Management System
 (HMS).
 Then Playframework will be described which the HMS is based on.
 The last part of this chapter will introduce WebSocket protocol, it is
 used to build the instant message system in the HMS.
\end_layout

\begin_layout Section
Git
\end_layout

\begin_layout Standard
Git is a widely used version control system.
 It was initially designed and developed in 2005 by Linus Trovalds with
 following features:
\end_layout

\begin_layout Subsubsection
Distributed
\end_layout

\begin_layout Standard
Every client will fully mirror the repository when they checkout.
 If the server dies, any of the repositories on the client can be used to
 restore the repository on the server.
 so that a distributed version control system can avoid the risk of losing
 all the data.
\end_layout

\begin_layout Subsubsection
Don't save differences
\end_layout

\begin_layout Standard
Git don't store the differences between the state of a file.
 Instead it will make of snapshot, every time when user checks in, it will
 memorize the state of the files at that moment and saves a reference with
 it.
\end_layout

\begin_layout Subsubsection
Don't need a server
\end_layout

\begin_layout Standard
Most opertions in Git can be operated locally.
 It does't need any information from other sources.
 The changes made during offline can be easily merged to the server later.
\end_layout

\begin_layout Subsubsection
Data Integrity
\end_layout

\begin_layout Standard
Git uses SHA-1 hash to check sum the contents of files and directorys before
 they are stored, this hash value will be referred to them and saved later
 into the database of Git.
 so that it is impossible to make changes inside a repository without Git
 detecting it.
 Besides, all the actions made by the user with Git, will only be added
 to the database of Git.
 It will not erase or modify anything which is not undoable.
 So losing data is very diffcult when using Git.
\end_layout

\begin_layout Subsubsection
Workflow
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Gitworkflow.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Workflow of Git 
\begin_inset CommandInset citation
LatexCommand cite
key "chacon2014pro"

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "fig:Workflow-of-Git"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Workflow-of-Git"

\end_inset

 demonstrates the basic workflow of git.
 First the user will modify the files inside the the working directory,
 then these files will be added to the staging area.
 When user commit the changes, the data inside the staging area will be
 permanently saved inside 
\shape italic
.git
\shape default
 directory which stores the metadata and database of the working directory.
\begin_inset CommandInset citation
LatexCommand cite
key "chacon2014pro"

\end_inset


\end_layout

\begin_layout Section
Playframework
\end_layout

\begin_layout Standard
Playframework is an open source web application framework based on the Java.
 A play application follows the MVC architectural pattern.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/diagrams_mvc.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
MVC Architecture 
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:MVC-Archtectual"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MVC-Archtectual"

\end_inset

 shows, this architecture splite the web application into two layers.
 The presentation layer and model layer.
 The model layer representation of raw data, most application use a persistent
 mechanism such as database at this layer.
 The presentation layer devide into two parts: view and controller.
 The view renders the raw data from the model into a form which can be interacte
d with the user.
 The controller receives and responds the events, which normally comes from
 HTTP Request.
 
\end_layout

\begin_layout Standard
Play is also completely RESTful and stateless, support full asynchronous
 HTTP programming model so that the concurrent real-time data can be easily
 intergrated within play applications, and long-lived request will also
 be served without interferring other thread.
 Unlike other java playframeworks, playframework comes with an embedded
 HTTP server.
 so that a play application can be easily excuted without any container
 such as tomcat.
 So a play application can runs on any computer that with a JVM and without
 doing complicated configurations 
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset

.
\end_layout

\begin_layout Section
WebSocket
\end_layout

\begin_layout Standard
WebSocket is a protocol designed for real-time communications.
 It provides a persistant, bidirectional, fast connection between the client
 and server.
 Beside the WebSocket protocol, there is also a WebSocket API, which is
 developed by the World Wide Web Consortium (W3C).
 This api enables the developer to perform actions like openning and closing
 the WebSocket channels or sending and receving messages within their applicatio
ns.
 The WebSocket API is supported by major modern browsers 
\begin_inset CommandInset citation
LatexCommand cite
key "wang2013definitive"

\end_inset

.
\end_layout

\begin_layout Chapter
Related Work
\end_layout

\begin_layout Standard
Before the HMS system which is introduced by this work, there are already
 two projects exist at faculty software engineering.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:PHP-Based-Homework"

\end_inset

 demostrats the first homwork management system used inside the faculty.
 It is a simple static php page attached to the lecture homepage combines
 with a sql database.
 It only provides the basic functions: user registration, homework submission,
 solution submission and evaluation registration.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/fohry.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PHP Based Homework Management System 
\begin_inset CommandInset label
LatexCommand label
name "fig:PHP-Based-Homework"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Second system is more advanced.
 It is a standalone web application based on the Playframework, provides
 more function than the first system, such as lecture management, assignment
 management, and a simple feedback system.
 However it still has some weak points which were discussed in the chapter
 1, for instance, both system didn't provide a easy and quick solution to
 backup the semester related data, use simple file submission approch to
 manage the homework files and didn't consider the special nature of the
 homework in the area of computer science, which contains a lot of source
 code and multiple files.
\end_layout

\begin_layout Standard
In the rest of this thesis, a new HMS system will be introduced, which provides
 a new way to manage the activities around homework specially the homework
 of computer science and including a new aproch to manage the data persistent
 so that the cost of running and maintaincing the system can be minimized.
\end_layout

\begin_layout Chapter
Design
\end_layout

\begin_layout Standard
The HMS (Homework Management System) is a web platform to manage the activities
 related to the homework including handing out the related materials to
 the students,collecting the handed in homework and managing the evaluation
 of the assignment.
 In this chapter the detailed design of functions to support those activities
 will be discussed.
 Furthermore the problems of the current alternative system will be analyzed
 and the solutions to those problem will be introduced.
\end_layout

\begin_layout Standard
The functions of the 
\begin_inset Quotes sld
\end_inset

HMS
\begin_inset Quotes srd
\end_inset

 system are divided into two parts.
 The first part is to develop the common features which are similar to other
 web platform,for instance 
\begin_inset Quotes sld
\end_inset

register a user account
\begin_inset Quotes srd
\end_inset

 .
 The second part of the design is to develop the special core features to
 make the HMS system a better platform compare to others, the dynamic data
 management and the git based homework management.
 
\end_layout

\begin_layout Section
Common functions
\end_layout

\begin_layout Standard
The main task of 
\begin_inset Quotes sld
\end_inset

HMS
\begin_inset Quotes srd
\end_inset

 is handling the process of handing in and handing out the homework between
 the students and teachers.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/generall.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The use case from the perspective of different roll of user.
\begin_inset CommandInset label
LatexCommand label
name "fig:The-use-case"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
As the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-use-case"

\end_inset

 shows,there are several steps within this process from the prospective
 of the user role.
 First considering the user role of students,the student should be able
 to register a account of 
\begin_inset Quotes sld
\end_inset

HMS
\begin_inset Quotes srd
\end_inset

, after logging into the system the students can browsing all the available
 courses in the system and subscribing the target course.
 Then it is possible for the students to view the homepage of the course
 and download the available homework.
 and finally uploading the solutions to the homework accordingly.
 the process of uploading a homework to the system is finished at the student
 side.
 now take a look at the side of Teacher and Assistant, besides the registration
 and logging process, the user group of teacher can create new course and
 new assignment also collecting the handed in homework and give them back
 to the students once the evaluation is finished.
 The assistants however can not creating new course, but should be able
 to add new assignment and evaluate the handed in homework as well.
 In summary, in order to realize the main task of the 
\begin_inset Quotes sld
\end_inset

HMS
\begin_inset Quotes srd
\end_inset

, the 
\begin_inset Quotes sld
\end_inset

HMS
\begin_inset Quotes srd
\end_inset

 system should have following capabilities:
\end_layout

\begin_layout Enumerate
User management including 
\begin_inset Quotes sld
\end_inset

Registration
\begin_inset Quotes srd
\end_inset

 , 
\begin_inset Quotes sld
\end_inset

Role based access control
\begin_inset Quotes srd
\end_inset

,
\begin_inset Quotes srd
\end_inset

Self management
\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Enumerate
Course management including 
\begin_inset Quotes sld
\end_inset

Creation of Course
\begin_inset Quotes srd
\end_inset

,
\begin_inset Quotes srd
\end_inset

Modification of Course
\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Enumerate
Assignment management including 
\begin_inset Quotes sld
\end_inset

Creation of Assignment
\begin_inset Quotes srd
\end_inset

,
\begin_inset Quotes srd
\end_inset

Distribution of Assignment
\begin_inset Quotes srd
\end_inset

,
\begin_inset Quotes srd
\end_inset

Collecting of Assignment
\begin_inset Quotes srd
\end_inset

,
\begin_inset Quotes srd
\end_inset

Evaluation of Assignment
\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Standard
Besides the above listed capabilities, the HMS should also provide a way
 that the students and teachers can communicate with each other.
 firstly a private message system will be needed for the students and teachers
 to exchange the information about the problem of assignment or evaluations
 individually,also the new message system should work as a instant message
 system,in this way the questions or the problems between the students and
 teachers can resolve more efficiently.
 secondly, a course forum is also not a bad idea, a common scenario is that
 more students may have a same question for a new assignment, if a students
 write a new post about this question, and the teacher gives a answer to
 the question, the other students with the same question can also get the
 answers and avoiding asking the same questions again.
 This saves the time from both side.
 So the communications system for the HMS has two parts:
\end_layout

\begin_layout Enumerate
Instant private message system.
\end_layout

\begin_layout Enumerate
a public course forum for each course.
\end_layout

\begin_layout Subsection
User management
\begin_inset CommandInset label
LatexCommand label
name "sub:User-management"

\end_inset


\end_layout

\begin_layout Standard
The user management of the 
\begin_inset Quotes sld
\end_inset

HMS
\begin_inset Quotes srd
\end_inset

 system consists of several modules(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Modules-of-usermanagement"

\end_inset

), first is the registration module, with this module the user can use their
 email address to register a account in HMS system.
 second is the self management module.
 after the user has logged into the system, they should be able to change
 their emails and password or other personal details.third is the user role
 control module, this is necessary for system to arrange the proper functions
 to the current user based on their user role, the user obtains a startup
 role at the registration, later on the user role can be changed by the
 system admin.
 In the rest of this section, all the modules will be detailed discussed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/User management.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The Modules of user management
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Modules-of-usermanagement"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
a.
 Registration
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Registration activity_cut.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Registration activity
\begin_inset CommandInset label
LatexCommand label
name "fig:Registration-activity"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Registration-activity"

\end_inset

 shows the workflow when a user register a new account.
 the user first use the registration form to fill in all the relevant informatio
n , for instance the password, email, and students number, after clicking
 the sign up button, the whole process begins, first the validation of the
 registration form will be performed to check whether the user has fill
 in all the required field and without error, if user passed the form validation
, the HMS system will then send a confirmation email with a confirmation
 URL to the email address from the registration form, if the user click
 the confirmation link, the user will be redirect to the website and can
 directly starting using the account.
 Otherwise the user has to start over the registration process.
 The step of email address confirmation is important because this procedure
 allows the system to check that the user actually signed up for the account
 and guarantee the email of this user is valid and ready to receive the
 system information.
\end_layout

\begin_layout Subsubsection
b.
 Self Management
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/self management.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The functions of self management
\begin_inset CommandInset label
LatexCommand label
name "fig:The-functions-of-selfmanagement"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is very common that user may forget their passwords or even worse their
 registered email becomes invalid, so it is necessary to develop the functions,
 user can use to reset their email and passwords.
 The resetting of email address or the passwords works similar as registration.
 If user choose to reset their email address, first they will be asked to
 type in the new email address,after that user click the reset button, the
 system should send a new confirmation email to the new address, when user
 click the hyper link in the email, a new web page will be generated and
 user can confirm the address change.
 if user choose to reset their passwords, they just need to click the reset
 password button, the system will send another confirmation email with a
 hyper link, the user can use this link to type in their new passwords.
 Besides the modification of passwords and email address,there is another
 function should be added to self management, thus the HMS system use git
 server to control all the homework files, and this git server use ssh to
 authenticate the connections, the system should also provide a function
 that user can add their ssh public key to the git server, so that they
 can connect their computer direct to the git server.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-functions-of-selfmanagement"

\end_inset

gives a overview for all the components of the self management.
\end_layout

\begin_layout Subsubsection
c.
 Role based access control
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="6">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Admin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Students
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assistants
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teachers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Functions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create Lecture
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create Assignment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Join Lecture
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hand in Homework
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Forum & Message
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Self Manage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Different user role in HMS system
\begin_inset CommandInset label
LatexCommand label
name "fig:Different-user-role"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The user of the HMS system has different roles to perform different actions,
 for instance a teacher can create new course but students can not, so it
 is important to have a subsystem to distinguish the user roles, so that
 the HMS can serve proper functions to the user.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Different-user-role"

\end_inset

 shows all the user role in HMS system,first is the 
\begin_inset Quotes sld
\end_inset


\shape slanted
system admin
\shape default

\begin_inset Quotes srd
\end_inset

, the job of system admin is to manage other user's role and the system
 data(backup the database and related files in certain times),any other
 functions of the HMS is irrelevant to the system admin.
 second is the default user,the user with this role can not do much things
 other than updating their personal data(passwords and email).
 third user role is students, with student account the user can browse all
 the available course and join the course, download and upload homework,
 using the communication system like chat and forum.
 fourth user role is assistants, besides all the functions of students,
 assistants can review all the student's homework and make a evaluation,last
 one is the teacher, the teacher account has all the functions of assistant
 account and additionally the teacher can create new course.
\end_layout

\begin_layout Subsection
Course management
\end_layout

\begin_layout Standard
The typical course provided by the faculty software engineering and their
 evaluation methods are listed as follows:
\end_layout

\begin_layout Itemize
Bachelor Programming Methodology: Evaluation through final exam
\end_layout

\begin_layout Itemize
Bachelor Design-Pattern: Evaluation from multiple sub project
\end_layout

\begin_layout Itemize
Master Software Engineering 2: Evaluation from semester project
\end_layout

\begin_layout Itemize
Master Compiler Construction: Evaluation from multiple sub project
\end_layout

\begin_layout Itemize
Master Graph-Model : Evaluation through final exam
\end_layout

\begin_layout Standard
Above courses can be divided into two categories.
 in the first type of course the students have to hand in various homework,
 and the points gained from those homework are usually used as a prerequisite
 for the final exam.
 in the second type of course the students will get a semester assignment,
 normally a whole software project, the points gained from this project
 usually is the final points for this course.
 additionally every students will get a git repository after user had signed
 up the course,this repository will also worked in two modes according to
 the type of course,the details of git working modes will be discussed later
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Submission-management"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="middle" width="4cm">
<column alignment="left" valignment="middle" width="4cm">
<column alignment="left" valignment="middle" width="3cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Features
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\noindent
\align left
Precondition to final exam
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Git repository Mods
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Performance Evaluation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type I
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Students have to hand in at least amount of valid homework.
\end_layout

\begin_layout Enumerate
\noindent
\align left
A valid homework requires normally for students to gain more than 50% points
 of a assignment.
\end_layout

\begin_layout Enumerate
A student should gain at least 50% of total points for final exam
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Git repository works under local mods
\begin_inset Newline newline
\end_inset

(Student can only hand in the homeworks through course homepage)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
need detail evaluation of assignments
\begin_inset Newline newline
\end_inset

(number of valid handin, percentage of gained points)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type II
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None,Students just need to hand in the final project(may consists sub.
 project)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Git repository works under remote modus
\begin_inset Newline newline
\end_inset

(Student can use the course repository as any remote git repository)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Only final evaluation
\end_layout

\begin_layout Plain Layout
(or multiple sub.evaluation)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Features of different types of course
\begin_inset CommandInset label
LatexCommand label
name "tab:Features-of-course"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

 shows the different features of different types of course.The function of
 
\begin_inset Quotes sld
\end_inset

creating course
\begin_inset Quotes srd
\end_inset

 should take all the features from above into consideration.
 
\end_layout

\begin_layout Subsection
Assignment management
\begin_inset CommandInset label
LatexCommand label
name "sub:Assignment-management"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/assignment management.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence diagram for assignment management
\begin_inset CommandInset label
LatexCommand label
name "fig:Sequenz-diagram-for-assignment"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sequenz-diagram-for-assignment"

\end_inset

 shows the sequence of handing in and handing out a assignment, after creating
 a new course, teacher can start adding assignments to the course, when
 a new assignment has been successfully added to the course, the course
 homepage for students will show this new assignment and with a download
 link, student can download the assignment and start working on the new
 assignment.
 later when students finished the assignment,the solution will be uploaded
 to the according assignment and teacher can review them at the evaluation
 part of the course's homepage and add a evaluation to the solution.
 When the evaluation is successfully saved to the assignment, the student
 will get the results directly at course homepage.
 
\end_layout

\begin_layout Subsection
Communication system
\end_layout

\begin_layout Subsubsection
a.
 Forum
\end_layout

\begin_layout Standard
The HMS system has a standard client-server structure, the client and server
 communicate with each other over internet using HTTP protocol.
\begin_inset CommandInset citation
LatexCommand cite
key "daa"

\end_inset

 HTTP has a typical 
\begin_inset Quotes sld
\end_inset

Request-Response
\begin_inset Quotes srd
\end_inset

 pattern, the web client sends a request to the web server, web server serves
 a response according to the web client request.
 It is a simple but powerful solution to provide a two-way conversation
 for two party over one channel.
\begin_inset CommandInset citation
LatexCommand cite
key "Hohpe2012"

\end_inset

 The forum function within the HMS system works also after this pattern.
 
\end_layout

\begin_layout Subsubsection
b.
 Instant message
\begin_inset CommandInset label
LatexCommand label
name "sub:b.-Instant-message"

\end_inset


\end_layout

\begin_layout Standard
The standard HTTP protocol however is not suited for the instant message
 system, because of the 
\begin_inset Quotes sld
\end_inset

Request-Response
\begin_inset Quotes srd
\end_inset

 message pattern, user has to manually ask for a content upgrade.
 But a instant message system needs automatically update the chat contents
 on both side of a conversations while a new message has been added
\begin_inset CommandInset citation
LatexCommand cite
key "day2000model"

\end_inset

.
 therefore a full-duplex communication system 
\begin_inset Quotes sld
\end_inset

Web Socket
\begin_inset Quotes srd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "mozilla"

\end_inset

will be used to back up the message module.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Websocket-message-pattern"

\end_inset

 illustrate a simple scenario of a dialog based on web socket.
 after logging into their HMS account user A and user B are both connecting
 to the HMS web socket server, later on user A send a new message to user
 B,first the request from user A are passing to the web socket server,the
 server processed the request accordingly and served the response not only
 to the user A but also automatically served the response to the user B,this
 ensure the both side of the conversation can have their message received
 in real time.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/message.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Web socket message pattern
\begin_inset CommandInset label
LatexCommand label
name "fig:Websocket-message-pattern"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Specific functions
\end_layout

\begin_layout Standard
There are three major problems in other homework management platforms:
\end_layout

\begin_layout Enumerate
Management of file submission
\end_layout

\begin_layout Enumerate
Centralized data persistent(single database)
\end_layout

\begin_layout Enumerate
Complicated back up process
\end_layout

\begin_layout Standard
the first problem is the management of the student's submission, besides
 of simply uploading the file to the server ,there will be usually more
 additional function needs to be added to support different needs related
 to hand in homework.
 for instance the documentation of moodle has suggested several submission
 type related to file submission
\begin_inset CommandInset citation
LatexCommand cite
key "documoodle"

\end_inset

:
\end_layout

\begin_layout Enumerate
Student submit a work and teacher download it later.
\end_layout

\begin_layout Enumerate
Student submit a work multiple times.
\end_layout

\begin_layout Enumerate
Student submit a work with a response.
\end_layout

\begin_layout Standard
and teacher needs to do several settings to make those type work properly,
 this introduced unnecessary extra cost not only for development but also
 for the user of the system.
 on the other hand this approach didn't take the 
\begin_inset Quotes sld
\end_inset

Type II
\begin_inset Quotes srd
\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

course into consideration at all, though it is still possible to hand in
 the semester project to the server just using this method, but uploading
 a whole semester project to the system at the end of semester is sometimes
 risky for the students(Data loss of the computer before dead line), and
 the teachers may need to trace the project history to comprehend the work
 of students(avoiding plagiarism).
 
\end_layout

\begin_layout Standard
the second and third problem are related to each other, because all the
 data are persistent in a single data base, the backup procedure is complicated
 and time consuming.
 all these platform including HMS are designed for a faculty in university,
 it's very common once in a while the faculty need to archive or backup
 the old data from the past semester.
 A possible way is query out all the related data based on the semester,
 then dump these data into file and save the course related files some where
 else.
 Moodle also use this approach to make a course backup
\begin_inset CommandInset citation
LatexCommand cite
key "moodlebackup"

\end_inset

.
 since the amount of data will increasing rapidly after years of use, this
 approach can only consume more times.
\end_layout

\begin_layout Standard
The HMS has introduced two new approach two avoid the problem from above:
\end_layout

\begin_layout Enumerate
Git based file submission
\end_layout

\begin_layout Enumerate
Dynamic data management
\end_layout

\begin_layout Standard
this two methods will be detailed introduced in the rest of this section.
\end_layout

\begin_layout Subsection
Submission management using GIT
\begin_inset CommandInset label
LatexCommand label
name "sub:Submission-management"

\end_inset


\end_layout

\begin_layout Standard
Instead uploading a file to a simple folder on the server, the students
 will obtain a git repository when they first entering the course.
 using a git repository other than a normal file folder has several advantages.
 firstly the implementation of different submission type is not needed anymore
 and don't need user to do extra settings.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/git.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Workflow of File Submission using Git
\begin_inset CommandInset label
LatexCommand label
name "fig:Workflow-of-git"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Workflow-of-git"

\end_inset

 shows the use case for all submission type
\begin_inset CommandInset citation
LatexCommand cite
key "documoodle"

\end_inset

 when using the git repository.
 no matter what submission type was chosen by the user, the only difference
 is how many commits were made.
 especially by the submission type 
\begin_inset Quotes sld
\end_inset


\shape italic
upload solution multiple times
\shape default

\begin_inset Quotes srd
\end_inset

.
 since the nature of the git repository is to track the history of file
 change, teacher can easily review all the changes were made between the
 uploads without extra efforts.
 on the teacher side they just need to checkout the students git repository
 and review the change history and give the evaluation.
 secondly using a git repository in 
\begin_inset Quotes sld
\end_inset


\shape italic
Type II
\shape default

\begin_inset Quotes srd
\end_inset

 course is more convenient for students and teachers to manage the project,
 since the assignment of 
\begin_inset Quotes sld
\end_inset


\shape italic
Type II
\shape default

\begin_inset Quotes srd
\end_inset

 course is usually a semester project, the students can use this repository
 to host their project to avoid the risk of data loss, or not able to submit
 whole project before deadline.
 the teacher can also more easily track the working history of the student's
 project.
 
\end_layout

\begin_layout Standard
since there are two types of course(Figure: 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

), the git repository will also work under two modes to fit the property
 of course
\begin_inset CommandInset label
LatexCommand label
name "git-working-modes"

\end_inset

:
\end_layout

\begin_layout Enumerate
Local modes(for 
\begin_inset Quotes sld
\end_inset

Type I
\begin_inset Quotes srd
\end_inset

 course)
\end_layout

\begin_layout Enumerate
Remote modes(for 
\begin_inset Quotes sld
\end_inset

Type II
\begin_inset Quotes srd
\end_inset

 course)
\end_layout

\begin_layout Subsubsection
Local modes
\end_layout

\begin_layout Standard
for the 
\begin_inset Quotes sld
\end_inset


\shape italic
Type I
\shape default

\begin_inset Quotes srd
\end_inset

 course students needs to upload different solutions to different assignments,
 and every assignment needs to be evaluated individually, so the repository
 should have a proper file structure to distinguish the student submission
 based on the assignment.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Repository-file-structure-local"

\end_inset

 shows the file structure inside the local git repository.
 With this file structure the teacher can manage the student submission
 more efficiently
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Repository local.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Repository file structure in local modes
\begin_inset CommandInset label
LatexCommand label
name "fig:Repository-file-structure-local"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to maintain this file structure and avoid introducing unnecessary
 errors, the address of the git repository is hidden from the student, furthurem
ore students don't have the access rights to the repository at all.
 they can only using the course homepage to upload their solutions.
\end_layout

\begin_layout Subsubsection
Remote modes
\end_layout

\begin_layout Standard
for the 
\begin_inset Quotes sld
\end_inset

Type II
\begin_inset Quotes srd
\end_inset

 course students will obtain the repository address and its full access
 rights at once when they join the course, and use this repository to host
 their semester project.
 This part works similar as using a remote repository.
 students can push the changes from their local machine to the HMS server,
 without loggin into the HMS system.
\end_layout

\begin_layout Subsection
Automatic Evaluation
\begin_inset CommandInset label
LatexCommand label
name "sub:Automatic-Evaluation"

\end_inset


\end_layout

\begin_layout Standard
Until now , evaluating a submission from student require teacher or assistent
 firstly to check out the repository of student then log into the HMS system
 using the function described in the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Assignment-management"

\end_inset

 to register the score of each students.
 constantly switching two working system not only inconvenient but can also
 easily introducing errors by registering points.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

List<Class> entity1 = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

        entity1.add(Semesteruser.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(Assignment.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(Lecture.class);//+1 Test OK
\end_layout

\begin_layout Plain Layout

        entity1.add(Message.class);//1 Test OK
\end_layout

\begin_layout Plain Layout

        entity1.add(Repo.class);//-1 Test Not OK
\end_layout

\begin_layout Plain Layout

        entity1.add(Evaluation.class);//Test OK +1
\end_layout

\begin_layout Plain Layout

        entity1.add(Handin.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(ForumThread.class);//Test OK 1
\end_layout

\begin_layout Plain Layout

        entity1.add(ForumPost.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(Conversation.class);//Not Test -1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Evaluation of a Submission 
\begin_inset CommandInset label
LatexCommand label
name "fig:Evaluation-of-Submission"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The second advantage of using Git to manage the submission is making the
 process of registering the points and comments fully automatic and avoiding
 the situation of changing working system.
 Base on the results of interviewing the colleagues of the 
\begin_inset Quotes sld
\end_inset

Faculty: Software Engineering
\begin_inset Quotes srd
\end_inset

, the common behavior of reviewing and evaluating a student submission is
 to add comments at the end of line as showed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evaluation-of-Submission"

\end_inset


\end_layout

\begin_layout Standard
if the reviewer commit the changes, these changes can be easily retrieved
 by comparing the student's submission and its reviewed version made by
 the reviewer using git command 
\begin_inset listings
lstparams "language=bash,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

git diff
\end_layout

\end_inset

 and result will be saved in Unified Diff Format 
\begin_inset CommandInset citation
LatexCommand cite
key "GNUDiff"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/unidiff.jpg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unified Diff Format 
\begin_inset CommandInset label
LatexCommand label
name "fig:Unified-Diff-Format"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unified-Diff-Format"

\end_inset

 shows the changes made by the reviewer in Unified Diff Format.
 the two-line header which starts with symbole 
\series bold
\shape italic
\emph on

\begin_inset Quotes sld
\end_inset

- - -
\begin_inset Quotes srd
\end_inset


\shape default
 
\series default
\emph default
and 
\series bold
\emph on

\begin_inset Quotes sld
\end_inset

+ + +
\begin_inset Quotes srd
\end_inset


\series default
\emph default
 indicate the changes has been made from file 
\shape italic
java1.java
\shape default
 to file 
\shape italic
java1.java
\shape default
.
 next line shows where the files has been changed, in this case the changes
 begins from the line 61 to next 14 more lines.
 the line begins with symbole 
\series bold
\emph on

\begin_inset Quotes sld
\end_inset

-
\begin_inset Quotes srd
\end_inset


\series default
\emph default
 and 
\series bold
\emph on

\begin_inset Quotes sld
\end_inset

+
\begin_inset Quotes srd
\end_inset


\series default
\emph default
 contains the actual differ between two versions of 
\shape italic
java1.java
\shape default

\begin_inset CommandInset citation
LatexCommand cite
key "GNUDiff"

\end_inset

.
\end_layout

\begin_layout Standard
The Unified Diff Format can be easily parsed based on these specific symboles,
 so that the actual changes made by the reviewer can be extracted.
 After analysing the comments made by the reviewer, most of the comments
 have following formats:
\end_layout

\begin_layout Enumerate
//points text
\end_layout

\begin_layout Enumerate
//text points
\end_layout

\begin_layout Standard
the comments either starts with a number or ends with a number, using the
 regular expression the points can be collected programmatically.
 This makes the automatic evaluation possible.
 The only precondition is that the reviewer has to commit the changes base
 on the submission from students, and using the comments format from above,
 so that the points can be automatically collected by the system and registerted
 into the database without loggin into the system and manuelly register
 the points.
 
\end_layout

\begin_layout Subsection
Dynamic data management
\end_layout

\begin_layout Standard
In order to make the backup or achieve process as easy as possible.
 The HMS system introduced a new approach to manage the data.
 first of all the HMS system use multiple databases instead of one central
 database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/database.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
multiple database based on semester
\begin_inset CommandInset label
LatexCommand label
name "fig:multiple-database"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:multiple-database"

\end_inset

 shows the database structure in the HMS system.
 The Global database contains all the authentication data including ssh
 public keys,user name, user email, user role and passwords.
 this database is only used for the user management(section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:User-management"

\end_inset

).
 another database is semester database.
 since the data structure of every semester is same, so the data model for
 semester can be reused in every new semester.
 every time when a new semester begins, a new clean database for this semester
 will be generated using the same data structure in real time.
 therefore in this case there is no need to query the semester data for
 backing up database.
 
\end_layout

\begin_layout Standard
also the database in this project should work under the embedded modes using
 file storage, first of all the embedded database runs directly in the applicati
on that uses them,it requires no extra server and no maintenance for the
 database itself.
 Another advantage of embedded database is the speed, because all the database
 operations happen inside the application process.
\begin_inset CommandInset citation
LatexCommand cite
key "Chaudhri2003"

\end_inset

since all the relevant data of the database are saved in a single file,
 backup the semester database only need to copy the database file to some
 where else.
 
\end_layout

\begin_layout Standard
In this project the H2 database engine will be used as the default database
 engine.
 first h2 support the embedded mode(file storage) and it is purely written
 in java.
 another reason is that the H2 database support a mixed mode(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Mixed-Mode-of-h2"

\end_inset

),mixed mode is a combination of the embedded mode and server mode, the
 first application (in this case the HMS) will use the database as embedded
 mode, but it also starts a server so that the other application(a SQL query
 tool) can still side load the database.
 normally embedded database runs within the application, so it is hidden
 from the end user
\begin_inset CommandInset citation
LatexCommand cite
key "Chaudhri2003"

\end_inset

, so there is no way the user can side load the database, but in the real
 life of maintaining the HMS system, direct accessing and manipulating the
 database using a SQL query tool sometimes is more efficiency than the usual
 routine.
 It is also important to notice that if the application is shut down, the
 server mode will also close all the connections
\begin_inset CommandInset citation
LatexCommand cite
key "h2database"

\end_inset

,therefore side loading a database using remote mode can only take place
 when HMS is still running.
 However the database file generated by the h2 engine can still be loaded
 from the h2 web based manage tools without needing HMS system to be on
 line.
 this feature is important specially for a archived h2 database, it means
 that all the contents of the database can still be freely accessed without
 extra works.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/connection-mode-mixed-2.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Mixed Mode of h2 server
\begin_inset CommandInset citation
LatexCommand cite
key "h2database"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Mixed-Mode-of-h2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
besides backing up the database, the files from student submission, course
 materials should also be backed up at the same time.
 using a unified file saving structure can make this process more easier..
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Semester 1.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Semester file structure
\begin_inset CommandInset label
LatexCommand label
name "fig:Semester-file-structure"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

 shows the file structure of one semester.
 the uploaded course materials, student's repository are saved with the
 database file under the same folder.
 using a clear file structure to host the uploaded files along with the
 commit history of the student's repository can let the maintainer of the
 system more easily to distinguish the files without looking into the database.
 combine these two methods, the backup procedure of the HMS system only
 need the maintainer to relocate the semester folder and without doing any
 database operation.
\end_layout

\begin_layout Standard
This approach requires the system to create a database in the run time,
 therefore the standard database configuration of play framework can not
 be used.
 The details of implementing the dynamic data management will be demonstrated
 in the next chapter.
\end_layout

\begin_layout Chapter
Implementations
\end_layout

\begin_layout Standard
In this chapter the concrete implementation including used tools and extra
 library also the methodology to fullfill the requirements of the functions
 from the chapter 3 will be presented.
 Because the data persistent and management are the preconditions for other
 function to work, and they are the key features of the HMS system.
 the implementation of dynamic data management and git based file submission
 will be first discussed.
\end_layout

\begin_layout Section
Dynamic Data management
\end_layout

\begin_layout Standard
Dynamic data management consists two parts.
 firstly HMS system can dynamically generate a new database every time when
 a new semester starts, so that created database will only contain the data
 related to that semester.
 secondly the physical files including the students submission, course materials
 are saved under a unified structure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

, so that the usage of each file can be easily determined without involving
 the database.
\end_layout

\begin_layout Subsection
Real-time database generation
\end_layout

\begin_layout Standard
The HMS system is based on the Play Framework and Play framework uses Ebean
 ORM to access the database,ORM is a technique to convert objected oriented
 programming language(in this case Java) into its persistence as a relational
 data base, so the data can freely exchange between a java object and database
 table.
\begin_inset CommandInset citation
LatexCommand cite
key "K2009"

\end_inset

By default the configuration of Ebean and the database is done by editing
 the configuration file of play framework(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Database-configuration"

\end_inset

).
 Developer need to define the details of a database and define the java
 data model for the Ebean server, and Ebean server will handle all the database
 operation.
 After the application started, there is noway to modified this configuration
 again in the run time.
 therefore this method can not be used
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

# Database configuration
\end_layout

\begin_layout Plain Layout

# You can declare as many datasources as you want.
\end_layout

\begin_layout Plain Layout

# By convention, the default datasource is named `default`
\end_layout

\begin_layout Plain Layout

# db.default.driver=org.h2.Driver
\end_layout

\begin_layout Plain Layout

# db.default.url="jdbc:h2:file:~/data/playdb"
\end_layout

\begin_layout Plain Layout

# db.default.user=sa
\end_layout

\begin_layout Plain Layout

# db.default.password=""
\end_layout

\begin_layout Plain Layout

# Ebean configuration
\end_layout

\begin_layout Plain Layout

# You can declare as many Ebean servers as you want.
\end_layout

\begin_layout Plain Layout

# By convention, the default server is named `default`
\end_layout

\begin_layout Plain Layout

# ebean.default="models.*"
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Database configuration in Play Framework
\begin_inset CommandInset label
LatexCommand label
name "fig:Database-configuration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to dynamically manage the database, all the configuration has to
 be done pro-grammatically.
 Ebean supports database configuration pro-grammatically.
 but it still need a little modification to make it compatible with play
 framework.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static void createServer(String name, List<Class> entity) {
\end_layout

\begin_layout Plain Layout

    ServerConfig config = new ServerConfig();
\end_layout

\begin_layout Plain Layout

    config.setName(name);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    DataSourceConfig h2Db = new DataSourceConfig();
\end_layout

\begin_layout Plain Layout

    h2Db.setDriver("org.h2.Driver");
\end_layout

\begin_layout Plain Layout

    h2Db.setUsername("hms");
\end_layout

\begin_layout Plain Layout

    h2Db.setPassword("test");
\end_layout

\begin_layout Plain Layout

    h2Db.setUrl("jdbc:h2:tcp://localhost/~/data_dynamic/" + name + "/" +
 name)
\end_layout

\begin_layout Plain Layout

    config.setDataSourceConfig(h2Db);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Path p= Paths.get(System.getProperty("user.home"),"data_dynamic",name,name+".h2.d
b");
\end_layout

\begin_layout Plain Layout

    File f = p.toFile();
\end_layout

\begin_layout Plain Layout

    if(f.exists()){
\end_layout

\begin_layout Plain Layout

    config.setDdlGenerate(false);
\end_layout

\begin_layout Plain Layout

    config.setDdlRun(false);}
\end_layout

\begin_layout Plain Layout

    else
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

    config.setDdlGenerate(true);
\end_layout

\begin_layout Plain Layout

    config.setDdlRun(true);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    for(int i=0;i<entity.size();i++){
\end_layout

\begin_layout Plain Layout

    config.addClass(entity.get(i));
\end_layout

\begin_layout Plain Layout

    EbeanServer server = EbeanServerFactory.create(config);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Create Ebean Server in run-time 
\begin_inset CommandInset label
LatexCommand label
name "fig:Create-Ebean-Server-runtime"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Create-Ebean-Server-runtime"

\end_inset

 is a static method which create a ebean server in run-time, this method
 need two parameters as input, first is the name of database, usually the
 name of a semester for instance 
\begin_inset Quotes sld
\end_inset


\shape italic
WS2016
\shape default

\begin_inset Quotes srd
\end_inset

, second is a list of java class, this list contains all the java data model
 related to this database, ebean needs to use this to create the table for
 the database.
 the configuration of the ebean server and database is strait forward, after
 setting all the parameters to the ebean server and data source, the ebean
 server will be created by the class 
\shape italic
EbeanServerFactory
\shape default
.
 this static method can be used when there is a need to create a new database.
 In the HMS, the decision of creating new database is made when teacher
 creates new course.
 creating a new course needs teacher to give the name of semester which
 this course belongs to, after the creating new course request is sent to
 the server, the server will first check whether this semester was registered
 already in the semester table of global database, if it is already registered,
 the course will be simply written to that semester database, if the inputted
 semester can not be found in the global database, a new database with the
 inputted semester name will be first created then the new course will be
 written in this database.
 after finishing the part of creating database in run time.
 there is only one thing needed to be added to make it work with play framework.
 since the databases are configured during the run time, when the application
 restarted, it will not restore those database automatically, because the
 play framework was originally designed to use the configuration file to
 track the database configuration, and in this case the configuration file
 is empty.
 The workaround for this issue is to track the database file, and reload
 all these database before the application restarted.
 Play framework has already provided a method to do some actions before
 actually starting the application, this can be used to reload the database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public class Global extends GlobalSettings{
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void onStart(Application application) {
\end_layout

\begin_layout Plain Layout

        super.onStart(application);
\end_layout

\begin_layout Plain Layout

        List<Class> entity = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

        entity.add(User.class);
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

        entity.add(SSH.class);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        List<Class> entity1 = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

        entity1.add(Semesteruser.class);
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

        entity1.add(Conversation.class);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            Server h2server = Server.createTcpServer("-tcpAllowOthers");
\end_layout

\begin_layout Plain Layout

            h2server.start();
\end_layout

\begin_layout Plain Layout

        } catch (SQLException e) {
\end_layout

\begin_layout Plain Layout

            e.printStackTrace();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

        createServer("global", entity);
\end_layout

\begin_layout Plain Layout

        List<Semester> database == Semester.getallsemester();
\end_layout

\begin_layout Plain Layout

        for (int i = 0; i < database.size(); i++) {
\end_layout

\begin_layout Plain Layout

          createServer(database.get(i).semester, entity1);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Reload the database at application start 
\begin_inset CommandInset label
LatexCommand label
name "fig:Reload-the-database"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reload-the-database"

\end_inset

 demonstrate the process of reloading the database.
 list entity contains the data model for the 
\begin_inset Quotes sld
\end_inset

Global
\begin_inset Quotes srd
\end_inset

 database and list entity1 contains the data model for the 
\begin_inset Quotes sld
\end_inset

Semester
\begin_inset Quotes srd
\end_inset

 database(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:multiple-database"

\end_inset

), the global database will be first reconstructed, because the name of
 other semester database are saved within the global database, then using
 a loop to reconstruct other semester database.
 it is also should be noticed that between the line of 12 and 21 in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Create-Ebean-Server-runtime"

\end_inset

 has an additionally implementations of database file detection, if the
 database file is present, the ebean server should not regenerate table
 relations because this action will erase all the data previously saved
 within this database.
 
\end_layout

\begin_layout Standard
It also should notice that because there are multiple databases, the name
 of the database should always be given every time when there is a CRUD(Create,
 Read, Update, Delete) operation taken place.
 for instance, saving a new course to the semester 
\begin_inset Quotes sld
\end_inset

WS2016
\begin_inset Quotes srd
\end_inset

, it should look like 
\begin_inset listings
lstparams "language=Java,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

newcourse.save("WS2016");
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection
Data models
\end_layout

\begin_layout Standard
There are two types database in HMS.
 one is a global database, it is used for authenticating and tracking the
 information of newly created semester database and lecture repository of
 students.
 another is semester database, this database saves all the data that related
 to the Course, Assignment, Evaluation, and Communication.
 so the design of data models for these two type database are also different.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/globaldatabase-diagram.svg
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Global database 
\begin_inset CommandInset label
LatexCommand label
name "fig:Data-models-for-global"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Data-models-for-global"

\end_inset

shows the data model for the global database, there are 4 class defined,
 first is the 
\shape italic
Users
\shape default
, this class saves all the data from the user registration, for instance
 the user id, email address, password, etc.
 second is the 
\shape italic
SSH
\shape default
, this class saves all the ssh keys for the user, and because one user may
 have multiple ssh keys, there is a 
\begin_inset Quotes sld
\end_inset


\shape italic
One-To-Many
\shape default

\begin_inset Quotes srd
\end_inset

 relations between the 
\shape italic
Users
\shape default
 and SSH.
 the third is Semesters, this class contains all the name of the created
 semester database, the last one is Tokens, this class is used to temporarily
 save the confirmation token for registration, change email and change password
 actions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/semesterdatabase-model.svg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Semester database 
\begin_inset CommandInset label
LatexCommand label
name "fig:Data-models-for-semester"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Data-models-for-semester"

\end_inset

 represent the data models of the semester database.
 First is the 
\shape italic
Lecture
\shape default
 class, all the activities around the homework management is about the lecture,
 a lecture includes assignment (Assignment), git repositories(Repos), a
 forum(Thread) and the lecture evaluation(Evaluation) for students.
 and each assignment contains a lot of hand ins(Handins) from the students.
 besides the lecture related data, the data of chat system is semester related
 and independently from the lecture.
 at last all these data are related to the Semesteruser.
 Semesteruser and User are both subclass extends from super class 
\shape italic
Abstractuser
\shape default
 as showed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Class-Diagram-Semesteruser"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/userclassmodel.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Class Diagram Semesteruser 
\begin_inset CommandInset label
LatexCommand label
name "fig:Class-Diagram-Semesteruser"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ebean supports the JPA (Java Persistence API) annotation 
\begin_inset Quotes sld
\end_inset


\shape italic
@MappedSuperclass
\shape default

\begin_inset Quotes srd
\end_inset

, this annotation designates a class whose mapping information is applied
 to the classes that inherit from it, but will be not able generated for
 the mapped superclass itself.
 
\begin_inset CommandInset citation
LatexCommand cite
key "objectdbjpa"

\end_inset

.
 The common data which will be used both for User and Semesteruser are defined
 in the class 
\begin_inset Quotes sld
\end_inset


\shape italic
Abstractuser
\shape default

\begin_inset Quotes srd
\end_inset

, the database specific data will be defined in the subclass.
 The field variable of the User Class are all related to the authentication
 data, for instance the passwords and ssh keys, on the other hand Semesteruser
 class contains only the data related to the lecture activities.
 using this method can first avoid the redundant code, second the semester
 data can be completely separate from the other data.
 when a register user want to sing up a new course in a semester, the common
 user information(e.g.
 user id, email address) should be first transformed from the 
\begin_inset Quotes sld
\end_inset

User
\begin_inset Quotes srd
\end_inset

 to 
\begin_inset Quotes sld
\end_inset

Semesteruser
\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Semesteruser getSemesteruserfromUser(String database,User
 user){
\end_layout

\begin_layout Plain Layout

        Semesteruser semesteruser = null;
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            semesteruser = Semesteruser.findByEmail(user.email, database);
\end_layout

\begin_layout Plain Layout

        } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

            semesteruser = null;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (semesteruser == null) {
\end_layout

\begin_layout Plain Layout

            semesteruser = new Semesteruser();
\end_layout

\begin_layout Plain Layout

            semesteruser.email = user.email;
\end_layout

\begin_layout Plain Layout

            semesteruser.firstname = user.firstname;
\end_layout

\begin_layout Plain Layout

            semesteruser.id = user.id;
\end_layout

\begin_layout Plain Layout

            semesteruser.lastname = user.lastname;
\end_layout

\begin_layout Plain Layout

            semesteruser.roles = user.roles;
\end_layout

\begin_layout Plain Layout

            semesteruser.userHash=user.userHash;
\end_layout

\begin_layout Plain Layout

            semesteruser.semester = database;
\end_layout

\begin_layout Plain Layout

            semesteruser.save(database);
\end_layout

\begin_layout Plain Layout

            return semesteruser;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        else{
\end_layout

\begin_layout Plain Layout

            return semesteruser;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
User To Semesteruser
\begin_inset CommandInset label
LatexCommand label
name "fig:User-To-Semesteruser"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
as Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:User-To-Semesteruser"

\end_inset

 shows, when a user want to sign up a course, the system will first find
 his 
\shape italic
Semesteruser
\shape default
 information, if the 
\shape italic
Semesteruser 
\shape default
object for the current user was not found, a new 
\shape italic
Semesteruser
\shape default
 object will be generated in the semester database based on the user information
 from the global database.
 
\end_layout

\begin_layout Standard
Using this methode can keep the amount of data of the Semesteruser in each
 semester database as small as possible.
\end_layout

\begin_layout Subsection
File structure
\begin_inset CommandInset label
LatexCommand label
name "sub:File-structure"

\end_inset


\end_layout

\begin_layout Standard
Besides the database design, the semester related files should also be saved
 under a unified structure(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

).
 define the upload path within the play framework is strait forward, after
 the file was uploaded to the server, then the file can be moved to the
 desired location by the method 
\begin_inset listings
lstparams "language=Java,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

FileUtils.moveFile();
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
saving the course repository of students is a little complicated, HMS system
 using the gitolite to manage the git repository, and repository created
 by the gitolite is bare repository which doesn't contain a working directory
\begin_inset CommandInset citation
LatexCommand cite
key "gitscm"

\end_inset

, so it is pointless to just copy a bare repository to other place.
 also the gitolite has its own file structure and can not be changed.
 so a possible way is using git Java API Jgit
\begin_inset CommandInset citation
LatexCommand cite
key "jgitguide"

\end_inset

 to make a clone of this bare repository to the desired destination.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

Repo repo=Repo.findRepoByLectureAndOwner(assignment.semester,semesteruser,assignme
nt.lecture);
\end_layout

\begin_layout Plain Layout

Git git = Git.cloneRepository();
\end_layout

\begin_layout Plain Layout

    git.setURI(repo.repofilepath)
\end_layout

\begin_layout Plain Layout

    git.setDirectory(localPath)
\end_layout

\begin_layout Plain Layout

    git.call();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Clone repository using JGit 
\begin_inset CommandInset label
LatexCommand label
name "fig:Clone-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clone-repository"

\end_inset

shows using JGit(reference here) to clone a bare repository from gitolite
 to a 
\begin_inset Quotes sld
\end_inset

local path
\begin_inset Quotes srd
\end_inset

, which fits the file structure of HMS.
 This procedure also makes submission a file to gitolite repository possible.
 this will be closely discussed in the next section.
\end_layout

\begin_layout Section
Integration of Git
\begin_inset CommandInset label
LatexCommand label
name "sec:Integration-of-Git"

\end_inset


\end_layout

\begin_layout Standard
The HMS system using git repository to manage the student's submission.
 The implementation of this function should consider following requirements:
\end_layout

\begin_layout Enumerate
Access control: students can only have access to their own repository, but
 the teacher or assistant of the course can have the access but limited
 to read to all student's repository.
 
\end_layout

\begin_layout Enumerate
Local and Remote modes: to support two types of course
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset


\end_layout

\begin_layout Standard
The most important requirement is the access control over the git repository.
 because Git by itself does not do any access control, it relies on the
 transport medium(authentication of HMS system) to do authentication, and
 file permissions of the operation system to do authorization(read or write
 permission)
\begin_inset CommandInset citation
LatexCommand cite
key "gitolitedocu"

\end_inset

.
 without a proper access control over the git repository, it is then impossible
 to integrate the git into the HMS.
 since the basic needs of managing homework is to keep the student's submission
 only between the marker and students themselves.
 
\end_layout

\begin_layout Standard
The first part of this section will present a method using 
\begin_inset Quotes sld
\end_inset

Gitolite
\begin_inset Quotes srd
\end_inset

 and 
\begin_inset Quotes sld
\end_inset

Java-Gitolite-manager
\begin_inset Quotes srd
\end_inset

 to solve the access control problem of git repository.
 and the usage of git repository for both course type will be introduced
 in the rest part of this section.
\end_layout

\begin_layout Subsection
Access control using Gitolite
\end_layout

\begin_layout Standard
The access control over the student's repository is pretty simple.
 As Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Access-rights-for-differentuser"

\end_inset

 shows, only the students themself have fully access rights for their course
 repository and can not get inside other repository.
 teacher and assistants have to grant a read right only for evaluation.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="middle" width="4cm">
<column alignment="center" valignment="middle">
<column alignment="center" valignment="middle">
<row>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Repository 
\begin_inset Newline newline
\end_inset

Access level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Student
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other Student
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teacher
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assistant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Access level for different user 
\begin_inset CommandInset label
LatexCommand label
name "fig:Access-rights-for-differentuser"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This access rules can be easily managed by Gitolite.
 After properly installing the gitolite in the server, it will generate
 a 
\begin_inset Quotes sld
\end_inset

gitlite-admin
\begin_inset Quotes srd
\end_inset

 repository under current user's home folder.
 within this folder there is a plain text file which will be used by Gitolite
 to specify the access rules.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

repo foo
\end_layout

\begin_layout Plain Layout

 RW = alice bob
\end_layout

\begin_layout Plain Layout

 R  = carol david
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Configuration of access rules with gitolite 
\begin_inset CommandInset label
LatexCommand label
name "fig:configuration-gitolite"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:configuration-gitolite"

\end_inset

 is a simple configuration of the access rules for the repository 
\begin_inset Quotes sld
\end_inset

foo
\begin_inset Quotes srd
\end_inset

.for this repository, Alice and Bob both have read and write access, but
 Carol and David can only read the content of the repository.
 The server maintainer only need to modify this configuration file and push
 the changes using a git command back to the Gitolite all the changes will
 be adopted automatically by gitolite.
 additionally the ssh public keys of the user of this repository are also
 needed to be copied into 
\begin_inset Quotes sld
\end_inset

gitolite-admin
\begin_inset Quotes srd
\end_inset

 repository.
 since gitolite use ssh mechanism to authenticate the user.
\end_layout

\begin_layout Subsubsection
Java-Gitolite-Manager
\end_layout

\begin_layout Standard
Gitolite gives the possibility to add access control to git repository,
 but it is still need system maintainer to edit the configuration file manually,
 therefore is still can not be directly used in the HMS system.
 Delft University of Technology has developed a java library which enables
 developer to manage the gitolite configuration direct from Java.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

ConfigManager manager = ConfigManager.create("/home/gitolite-admin");
\end_layout

\begin_layout Plain Layout

Config config = manager.get();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

User user = config.createUser("alice");
\end_layout

\begin_layout Plain Layout

user.setKey("desktop", "ssh-rsa AAAB3Nz...");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

config.createRepository("foo")
\end_layout

\begin_layout Plain Layout

    .setPermission(user, Permission.ALL);
\end_layout

\begin_layout Plain Layout

manager.apply();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gitolite configuration from java 
\begin_inset CommandInset label
LatexCommand label
name "fig:onfiguration-from-java"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:onfiguration-from-java"

\end_inset

 is a example to use 
\begin_inset Quotes sld
\end_inset

Java-Gitolite-Manage
\begin_inset Quotes srd
\end_inset

 to configure the gitolite from java.
 first an instance of 
\begin_inset Quotes sld
\end_inset

ConfigManage
\begin_inset Quotes srd
\end_inset

 is created with the path of repository 
\begin_inset Quotes sld
\end_inset

gitolite-admin
\begin_inset Quotes srd
\end_inset

, then a user with user name 
\begin_inset Quotes sld
\end_inset

Alice
\begin_inset Quotes srd
\end_inset

 is created alone with the ssh public key of user Alice.
 after user has been created, a new repository 
\begin_inset Quotes sld
\end_inset

foo
\begin_inset Quotes srd
\end_inset

 will also be created and user Alice will be added to this repository with
 all permission.
 
\end_layout

\begin_layout Standard
HMS system use the same procedure as the example in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:onfiguration-from-java"

\end_inset

, every time when a student joins a course, no matter what this course type
 is,a repository will be generated for this student if the ssh public of
 this students is present.
 and when a teacher want to review a repository of a student, HMS system
 will first get out the repository and automatically set a correct permission
 for teacher using 
\begin_inset listings
lstparams "language=Java,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

setPermission(teacher, Permission.READ_ONLY);
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Local mode
\end_layout

\begin_layout Standard
Under local mode, students need use course homepage to upload their solutions
 and actual repository address is hidden from the student.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Homework-submission-for-local"

\end_inset

 shows the homework submission part for the course under local mode.
 The gray dot above shows the current status of the repository, under the
 indicator of repository status, is the homework area, student can download
 the assignment's material and use the predefined actions: commit and revert.
\end_layout

\begin_layout Standard
The left icon under action column is used for committing changes, student
 need to use this action to upload the solutions.
 the icon on the right is the predefined action for deleting last submission,
 students can use this action to delete their last submission
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/local mode git.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Homework submission for course under local mode 
\begin_inset CommandInset label
LatexCommand label
name "fig:Homework-submission-for-local"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The repository created by the gitolite is a bare repository, a bare repository
 is an named file directory with a .git suffix which contains only the administra
tive and control files of the repository, and it doesn't have any copy of
 the files that present in a normal git repository
\begin_inset CommandInset citation
LatexCommand cite
key "loeliger2006collaborating"

\end_inset

.
 The student's submission then can not be directly uploaded to this repository.
 also HMS system requires a unified file structure to save the physical
 files.
 The solutions to this problem has already been presented in the section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:File-structure"

\end_inset

, that is using JGit to clone the bare repository to a normal repository
 at a desired location.
\end_layout

\begin_layout Subsubsection
JGit
\end_layout

\begin_layout Standard
JGit is a Java library for working with git repository, with JGit all the
 operations for a git repository can be realized from Java.
\begin_inset CommandInset citation
LatexCommand cite
key "jgitguide"

\end_inset

Besides only clone the bare repository presented in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clone-repository"

\end_inset

, HMS system needs also upload the students submission to the cloned repository
 and using JGit to commit the changes and push the changes back to the gitolite
 repository, so that the teacher can clone the student's repository remotely.
\end_layout

\begin_layout Subsubsection
Commit
\begin_inset CommandInset label
LatexCommand label
name "sub:Commit"

\end_inset


\end_layout

\begin_layout Standard
After student choosing the commit action, a dialog(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Commit-dialog"

\end_inset

) will pop up.
 Using this form student can upload their files with a commit message, if
 the commit message is empty, a default commit will be made by the HMS system.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/upload-assignment.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Commit dialog 
\begin_inset CommandInset label
LatexCommand label
name "fig:Commit-dialog"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Commit-submission"

\end_inset

 shows what happened after submission file and commit message were passed
 to the HMS system.
 first the gitolite repository will be cloned to the 
\shape italic
localPath
\shape default
, after the clone operation finished, the uploaded file from the student
 will be copied into the newly created local repository, then using jgit
 to commit the changes, after that all the changes will be pushed to the
 master branch of the gitolite repository.
 in the end a new 
\begin_inset Quotes sld
\end_inset

hand-in
\begin_inset Quotes srd
\end_inset

 object will be generated and saved into the database under the name of
 student.
 this will be used by teacher to evaluate the submission.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result handinhomework(...){
\end_layout

\begin_layout Plain Layout

	try{
\end_layout

\begin_layout Plain Layout

	MultipartFormData body = request().body().asMultipartFormData();
\end_layout

\begin_layout Plain Layout

	FilePart homeworkfile = body.getFile("homeworkfile");
\end_layout

\begin_layout Plain Layout

	if (homeworkfile != null) {
\end_layout

\begin_layout Plain Layout

	    String fileName = homeworkfile.getFilename();
\end_layout

\begin_layout Plain Layout

	    Git git = Git.cloneRepository()
\end_layout

\begin_layout Plain Layout

	    git.setDirectory(localPath);
\end_layout

\begin_layout Plain Layout

	    
\end_layout

\begin_layout Plain Layout

	    FileUtils.moveFile(file, new File(localPath, des+fileName));
\end_layout

\begin_layout Plain Layout

	    git.add().addFilepattern(des+fileName).call();
\end_layout

\begin_layout Plain Layout

	    git.commit().setMessage(commit).setAuthor(...).call();
\end_layout

\begin_layout Plain Layout

	    RefSpec refSpec = new RefSpec("master");
\end_layout

\begin_layout Plain Layout

	    git.push().setRemote("origin").setRefSpecs(refSpec).call();
\end_layout

\begin_layout Plain Layout

	    git.getRepository().close();
\end_layout

\begin_layout Plain Layout

	    
\end_layout

\begin_layout Plain Layout

	    Handin handin= new Handin();
\end_layout

\begin_layout Plain Layout

	    handin.save(semester);}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Commit submission 
\begin_inset CommandInset label
LatexCommand label
name "fig:Commit-submission"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Delete submission
\end_layout

\begin_layout Standard
If a student didn't satisfy the first submission for an assignment, the
 last submission can also be deleted before the deadline.
 the procedure is almost the same as submission, first the local repository
 created by the submission action will be updated to the latest state, second
 since the submission under the local modes are saved under a unified structure(
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Repository-file-structure-local"

\end_inset

), the folder of relevant assignments will be deleted.
 in the end the delete action will also be committed by the HMS system and
 the changes will be pushed back to the gitolite repository.
 at last the related hand-in object from the submission will also be deleted
 and regenerate by the next submission action.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

 Git git = Git.cloneRepository();
\end_layout

\begin_layout Plain Layout

	String subfolder=assignment.title;
\end_layout

\begin_layout Plain Layout

	git.rm().addFilepattern(subfolder).call();
\end_layout

\begin_layout Plain Layout

	git.commit()
\end_layout

\begin_layout Plain Layout

    .setMessage(commit)
\end_layout

\begin_layout Plain Layout

    .setAuthor(semesteruser.lastname,semesteruser.email)
\end_layout

\begin_layout Plain Layout

    .call();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 Handin handin=Handin
\end_layout

\begin_layout Plain Layout

	.getHandinofassignmentofstudentinlecture();
\end_layout

\begin_layout Plain Layout

    if(handin!=null){
\end_layout

\begin_layout Plain Layout

    handin.delete(semester);}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Delete last submission 
\begin_inset CommandInset label
LatexCommand label
name "fig:Delete-last-submission"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Check out by teacher
\begin_inset CommandInset label
LatexCommand label
name "sub:Check-out-byteacher"

\end_inset


\end_layout

\begin_layout Standard
After student have submit their solutions to the repository, teachers can
 check out the students repository for evaluation after granting the access
 to the student's repository.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/evaluation.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Checkout student repository 
\begin_inset CommandInset label
LatexCommand label
name "fig:Checkout-student-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Checkout-student-repository"

\end_inset

is the user interface of evaluating students submission.
 it shows the address of the student repository and its status, and whether
 the teacher has already the access to this repository.
 if user has already submit a solution the row of this user will be in color
 green otherwise it is red.
 teacher can use the action button to choose an action towards the students
 repository.
 the student repository can be directly checked out into the git client
 
\begin_inset Quotes sld
\end_inset


\shape italic
Source tree
\shape default

\begin_inset Quotes srd
\end_inset

, or teacher can just copy the address of the repository and check out in
 a favorite git client.
\end_layout

\begin_layout Standard
The precondition of checkout the students repository is to grand an access.
 when teacher first time opens an evaluation tab(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Checkout-student-repository"

\end_inset

), the method 
\shape italic
grandaccess()
\shape default
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Grand-access-to-studentsrepo"

\end_inset

 will be automatically executed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static boolean grandaccess(...) {
\end_layout

\begin_layout Plain Layout

if(!admincredential.sshs.isEmpty()
\end_layout

\begin_layout Plain Layout

    &&!studentrepo.owner.contains(currentadmin)) {
\end_layout

\begin_layout Plain Layout

    User teacher = config.ensureUserExists(teacher.userHash);
\end_layout

\begin_layout Plain Layout

    String reponame = lecture.courseName + "_" + student.userHash;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Repository repository = config.ensureRepositoryExists(reponame);
\end_layout

\begin_layout Plain Layout

    repository.setPermission(teacher, Permission.READ_ONLY);
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    manager.applyAsync(config);
\end_layout

\begin_layout Plain Layout

    studentrepo.owner.add(currentadmin);
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Grand access to students repository 
\begin_inset CommandInset label
LatexCommand label
name "fig:Grand-access-to-studentsrepo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
first the ssh key of teacher must be present, since Gitolite needs ssh key
 to authenticate the user.
 second if the teacher already has the access to this repository, system
 should avoid to run this method again.
 if the preconditions are fulfilled the teacher will be added to the repository
 with a read only permission.
 also the information about teacher already has the access to this repository
 will be saved into the database.
\end_layout

\begin_layout Subsection
Remote mode
\end_layout

\begin_layout Standard
Remote mode is much simpler than local mode.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remote-mode"

\end_inset

 is the user interface of homework area in a 
\begin_inset Quotes sld
\end_inset

Type II
\begin_inset Quotes srd
\end_inset

 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

course under remote mode.
 the address of git repository will be directly given to the students.
 students will use this repository to host their semester project, like
 using a normal remote git repository.
 so there will be no more submission over HMS system.
 only before the dead line the students have to login into their account
 to use the predefined hand in action to hand in their project.
 so that the teacher can use the HMS system to give a final evaluation to
 the project and saved this into the database.
 and at the same time a copy of the student's repository will be saved under
 the unified file structure, this is same as the submission action(Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Commit-submission"

\end_inset

) from the local modes.
 the only difference is that remote mode will not upload any files.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/remote modes.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Remote mode 
\begin_inset CommandInset label
LatexCommand label
name "fig:Remote-mode"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Automatic Evaluation 
\end_layout

\begin_layout Standard
The common behavior of a reviewer rating a student's submission is to add
 comments directly inside the file of a submission (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Automatic-Evaluation"

\end_inset

).
 And these comments can be extracted base on the information from the Unified
 Diff Format , and specific points inside these comments can be automatically
 collected and assigned to the related to the hand in of a student by HMS.
 
\end_layout

\begin_layout Standard
To achieve this goal, there are three problems needed to be dealt with:
\end_layout

\begin_layout Enumerate
HMS need to aware when a reviewer pushs a evaluation back to repository
 using a git client.
\end_layout

\begin_layout Enumerate
Make sure the comments extracted from Unified Diff are actually made by
 the reviewer, not by students or anyone else.
\end_layout

\begin_layout Enumerate
Collect points from the comments and register the points the corrected person
 and lecture.
\end_layout

\begin_layout Standard
The solution to these problems will be introduced in the rest of this section.
\end_layout

\begin_layout Subsubsection
4.2.4.1 Detect changes from repository
\end_layout

\begin_layout Standard
Although HMS already has the ability to make changes to git repositories
 by using Gitolite, however it can not directly detect changes of the repository
 made outside of the system.
 Like when reviewer pushes a changes back to the repository directly using
 other git client, HMS will not aware these changes.
 Because the HMS using Gitolite to manage the access control over git repositori
es and these repositories can be accessed remotely using SSH, which isn't
 supported by the Playframework.
\end_layout

\begin_layout Standard
So the HMS system has to detect the changes of the repositories actively,
 one possible methode is to poll the file system looking for changes, however
 this approch can not detect the changes in time and is inefficient.
 Another way is to use a native Java API 
\begin_inset Quotes sld
\end_inset


\shape italic
WatchService
\shape default

\begin_inset Quotes srd
\end_inset

 from JDK 7.
 This API enables the system to register any directory with different change
 events, such as file deletion, file create or file modification.
 When the watch service detect any of those events, they will be handled
 as needed.
 The Watch Service API can also take advantags of native file change notificatio
n implemented by the file system itself, so that polling the file system
 can be avoid.
\begin_inset CommandInset citation
LatexCommand cite
key "JavaNio"

\end_inset


\end_layout

\begin_layout Subsubsection
Watch Service
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public class RepoWatcher implements Runnable {
\end_layout

\begin_layout Plain Layout

    public WatchService watchService;
\end_layout

\begin_layout Plain Layout

    public RepoWatcher(WatchService repowatcher){
\end_layout

\begin_layout Plain Layout

        this.watchService=repowatcher;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void run() {
\end_layout

\begin_layout Plain Layout

       try{
\end_layout

\begin_layout Plain Layout

           WatchKey key = watchService.take();
\end_layout

\begin_layout Plain Layout

           while(key!=null){
\end_layout

\begin_layout Plain Layout

           key.pollEvents();
\end_layout

\begin_layout Plain Layout

           Path dir=(Path)key.watchable();
\end_layout

\begin_layout Plain Layout

           GitEvaluation(dir.toString());       
\end_layout

\begin_layout Plain Layout

           key.reset();
\end_layout

\begin_layout Plain Layout

           key=watchService.take();
\end_layout

\begin_layout Plain Layout

           }
\end_layout

\begin_layout Plain Layout

       }catch (Exception e){
\end_layout

\begin_layout Plain Layout

           Logger.debug(e.getMessage());
\end_layout

\begin_layout Plain Layout

       }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Global extends GlobalSettings{
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void onStart(Application application) {
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            setWatchService();
\end_layout

\begin_layout Plain Layout

            RepoWatcher repoWatcher = new RepoWatcher(getWatchService());
\end_layout

\begin_layout Plain Layout

            Thread watchThread = new Thread(repoWatcher, "repoWatcherThread");
\end_layout

\begin_layout Plain Layout

            watchThread.start();
\end_layout

\begin_layout Plain Layout

        } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

            Logger.debug(e.getMessage());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
File Watch Service 
\begin_inset CommandInset label
LatexCommand label
name "fig:File-Watch-Service"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:File-Watch-Service"

\end_inset

 shows the implementation of Watch Service inside HMS system.
 Inside the Global class, the methode setWatchService() initiate a Watch
 Service of the default file system, then the object of Watch Service will
 pass to a runnable class RepoWatcher.
 Then a WatchKey ,which contains the detailed change information, will be
 obtained from the watchService.take().
 The take() methode returns a queued key.
 If there is no changes detected by the Watch Service, this methode waits.
 on the other hand, if a change has been detected by the Watch Service,
 key will be not a null object, and this key will enter a infinite loop,
 inside the while loop, the address of changed repository will be getted
 and passed to the methode GitEvaluation(), this methode will start the
 evaluation process.
 after this key is used, it will be cleared and wait for next changes.
 The RepoWatcher runs in a seperate thread watchThread, and will be started
 before HMS actually run.
 Everytime when a new repository was created, it can be easily added to
 the WatchService as follows: 
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

Path addToWatch= Paths.get(System.getProperty("user.home"), "repositories",
 reponame + ".git", "refs", "heads");
\end_layout

\begin_layout Plain Layout

addToWatch.register(getWatchService(), ENTRY_MODIFY);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
4.2.4.2 Authentication
\end_layout

\begin_layout Standard
After detecting the changes, the next step is to determin who made the changes,
 because the precondition of automatic evaluation to work is to get the
 changes between the commits made by reviewer and students.
 Base on the different submission methode in diffrent lecture modes, the
 Authentication of automatic evaluation works also differently in Local
 and Remote mode.
\end_layout

\begin_layout Subsubsection
Local Mode
\end_layout

\begin_layout Standard
The situation under local mode is straightforward, each repository will
 only have two commiters: hms and reviewer.
 Because under this mode the students don't have any access right to the
 repository and can only use the lecture home page to upload the submission.
 Every time when student use the home page to upload a submission, the HMS
 system will commit the changes.
\end_layout

\begin_layout Standard
So under this mode, when the HMS system detect the changes, it will try
 to find out the name of the commiter.
 If the name of the commiter was 
\begin_inset Quotes sld
\end_inset

hms
\begin_inset Quotes srd
\end_inset

, then this is submission from the students.
 otherwise, it is the evaluation submission from the reviewer.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

	RevWalk walk= new RevWalk(repository);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	ObjectId head=repository.resolve(Constants.HEAD);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	RevCommit headCommit=walk.parseCommit(head);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	String committerofhead=headCommit.getAuthorIdent().getName();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the name of Commiter 
\begin_inset CommandInset label
LatexCommand label
name "fig:Get-the-nameofcommiter"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Get-the-nameofcommiter"

\end_inset

 shows a code snippt used in the HMS system to get the name of the commiter
 using JGit API
\begin_inset CommandInset citation
LatexCommand cite
key "jgitguide"

\end_inset

 .
 Since the latest change of a repository will be saved inside the HEAD which
 is a reference to the last commit of a repository
\begin_inset CommandInset citation
LatexCommand cite
key "chacon2014pro"

\end_inset

.
 The HMS will try to obtain the identity information always from the commit
 referenced by the HEAD.
\end_layout

\begin_layout Subsubsection
Remote Mode
\end_layout

\begin_layout Standard
Under remote mode, using the name or email address of a commiter to determin
 the identity becomes unreliable.
 Because under this mode, student also have the full access to the repository
 and the identity of a commiter can be easily changed using any git client.
 The results of a an evaluation can be easily manipulated because of this.
 For instance, a student using git push command submit a solution to the
 repository normally, later on he changes his name and email address to
 a teacher of the lecture, and make comments to his submission by himself,
 then he pushes the commented version the repository.
 The results is manipulated.
\end_layout

\begin_layout Standard
The solution to this issue is that when student submit a solution to the
 repository of the lecture, the HMS will revoke all the access rights of
 this student to this repository immidiatly when it detects the changes
 of the repository.
 So that the next commiter can only be the reviewer, because only the reviewer
 has the access to the repository.
 This however raises another problem, how to determin a change was a submission
 from student.
 This requires student to use a key word 
\begin_inset Quotes sld
\end_inset

Assignment
\begin_inset Quotes srd
\end_inset

 inside their commit messages, if the HMS detect a change and the commit
 message of this change contains the keyword, HMS will think this submission
 is from students, and should revoke their access rights to this repository
 temporarly.
 Untile next commit, which is definitely from the reviewer, finishes the
 evaluation, the HMS will reassign the access rights back to the students
 until next submission.
\end_layout

\begin_layout Standard
However this methode will require the reviewer dont't use the keyword 
\begin_inset Quotes sld
\end_inset

Assignment
\begin_inset Quotes srd
\end_inset

 inside their commit messages.
\end_layout

\begin_layout Subsubsection
4.2.4.3 Collecting and Registering the result of Evaluation
\end_layout

\begin_layout Standard
If the HEAD commit was made by the reviewer and the commit before the HEAD
 was made by the students or HMS.
 The HMS will start the evaluation phase.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

	ObjectId newhead = repository.resolve("HEAD^{tree}");
\end_layout

\begin_layout Plain Layout

	ObjectId oldHead = repository.resolve("HEAD^^{tree}");
\end_layout

\begin_layout Plain Layout

	ByteArrayOutputStream changes = new ByteArrayOutputStream();
\end_layout

\begin_layout Plain Layout

	DiffFormatter formatter = new DiffFormatter(changes);
\end_layout

\begin_layout Plain Layout

	formatter.setRepository(repository);
\end_layout

\begin_layout Plain Layout

	formatter.format(oldHead, newhead);
\end_layout

\begin_layout Plain Layout

	String diffresult = changes.toString();
\end_layout

\begin_layout Plain Layout

	evaluationResult = CommitParser(diffresult);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get Evaluation 
\begin_inset CommandInset label
LatexCommand label
name "fig:Get-Evaluation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Get-Evaluation"

\end_inset

 demostrates the methode to obtain the git diff result between the current
 HEAD commit and the commit before the HEAD into a String object.
 The result which is similar as the result in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unified-Diff-Format"

\end_inset

 will be passed to the methode CommitParse(), in this methode the String
 diffresult will be parsed using the java regex, and the total points from
 the comments made by the reviewer will be calculated.
\end_layout

\begin_layout Subsubsection
Registering the result
\end_layout

\begin_layout Standard
In order to register the points conveniently, the name of repository is
 intentionally diesigned as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

WS2016_LocalLectureTest_7788414
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the first part is the semester information, second part is the name of a
 lecture, the last part is the id of the student.
 with these information, the detail information about the lecture and student
 can be easily obtained from the related database.
 So that the evaluation result can be registered accordingly.
\end_layout

\begin_layout Section
User management
\end_layout

\begin_layout Standard
The implementation of user management system consists following parts:
\end_layout

\begin_layout Enumerate
Registration system
\end_layout

\begin_layout Enumerate
Authentication and Authorization system
\end_layout

\begin_layout Enumerate
Self manage system
\end_layout

\begin_layout Subsection
Registration system
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/registration form.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Registration form on home page
\begin_inset CommandInset label
LatexCommand label
name "fig:Registration-form"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Registration-form"

\end_inset

 is the registration form on the HMS home page.
 a new user need to at least type in the email address,first name,last name,
 and the password.
 The student number is optional because the multi user roll management of
 the system.
 only students needs to give the students number and get a student user
 role as default.
 other user will get a random user id and 
\begin_inset Quotes sld
\end_inset

default user
\begin_inset Quotes srd
\end_inset

 user role, and need the system admin to change the user role afterwards.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Save-user-registration"

\end_inset

 shows what happens when user click the sing up button in the registration
 form.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result save() {
\end_layout

\begin_layout Plain Layout

        Form<Application.Register> registerForm = form(Application.Register.class).b
indFromRequest();
\end_layout

\begin_layout Plain Layout

        if (registerForm.hasErrors()) {
\end_layout

\begin_layout Plain Layout

            return badRequest(index.render());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        Application.Register register = registerForm.get();
\end_layout

\begin_layout Plain Layout

        Result resultError = checkBeforeSave(registerForm, register.email);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (resultError != null) {
\end_layout

\begin_layout Plain Layout

            return resultError;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            User user = new User();
\end_layout

\begin_layout Plain Layout

            if(register.id==null||register.id.isEmpty()){
\end_layout

\begin_layout Plain Layout

                user.id= CreateExternalId.generateId();
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            else{
\end_layout

\begin_layout Plain Layout

            user.id=register.id;}
\end_layout

\begin_layout Plain Layout

            user.roles=UserRoll.Students.toString();
\end_layout

\begin_layout Plain Layout

            user.confirmationToken = UUID.randomUUID().toString();
\end_layout

\begin_layout Plain Layout

            user.save("global");
\end_layout

\begin_layout Plain Layout

            sendMailAskForConfirmation(user);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Save user registration
\begin_inset CommandInset label
LatexCommand label
name "fig:Save-user-registration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The sign up button is bonded with the function 
\begin_inset Quotes sld
\end_inset


\shape italic
Signup.save()
\shape default

\begin_inset Quotes srd
\end_inset

, at first the data from the 
\shape italic
registerForm
\shape default
 will be checked whether all the required field has been filled, if there
 is a error the user will be redirected to the home page and do the registration
 process again.
 second if the data are correct, the emails from the 
\shape italic
registerForm
\shape default
 will be checked by the function 
\shape italic
checkBeforeSave()
\shape default
 to insure that the email address has not be taken by other users.
 if both tests are proofed, the next step is to check the user id, if the
 user id has been given then this user should be saved with the user role
 of students, if the user id is empty, the user will obtain a user role
 of default user.
 after saving the user registration data alone with the confirmation token
 to the database, a confirmation email with user confirmation token will
 be sent to the user email address by the function 
\shape italic
sendMailAskForConfirmation()
\shape default
.
 At this step the user data are successfully saved into the database and
 waited to be confirmed by the user.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

private static void sendMailAskForConfirmation(User user){
\end_layout

\begin_layout Plain Layout

        String subject = Messages.get("mail.confirm.subject");
\end_layout

\begin_layout Plain Layout

        urlString += "/confirm/" + user.confirmationToken;
\end_layout

\begin_layout Plain Layout

        URL url = new URL(urlString);
\end_layout

\begin_layout Plain Layout

        String message = Messages.get("mail.confirm.message", url.toString());
\end_layout

\begin_layout Plain Layout

        Mail.Envelop envelop = new Mail.Envelop(subject, message, user.email);
\end_layout

\begin_layout Plain Layout

        Mail.sendMail(envelop);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public static Result confirm(String token) {
\end_layout

\begin_layout Plain Layout

        User user = User.findByConfirmationToken(token,"global");
\end_layout

\begin_layout Plain Layout

        if (User.confirm(user,"global")) {
\end_layout

\begin_layout Plain Layout

            sendMailConfirmation(user);
\end_layout

\begin_layout Plain Layout

            user.dateCreation=new Date();
\end_layout

\begin_layout Plain Layout

            user.save("global");
\end_layout

\begin_layout Plain Layout

            return ok(views.html.account.signup.confirm.render(user));
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Confirm registration
\begin_inset CommandInset label
LatexCommand label
name "tab:Confirm-registration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The user need to use the hyper link(contains confirmation token) to confirm
 their registration, after user clicked the confirmation link, the confirmation
 token will be passed to the method 
\shape italic
confirm()
\shape default
, the system then using this token to find the correct user record within
 the database, if the user was found then a welcome email will be sent and
 mark this user as confirmed in the database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/confirmationtoken.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/finish.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Registration successful 
\begin_inset CommandInset label
LatexCommand label
name "fig:Registration-successful"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
if the details of the user successfully updated in the database, the system
 will render a modal and user can direct log into their account and start
 using the system.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Registration-successful"

\end_inset

 shows the result of a successful registration, the URL from above is the
 confirmation link with the user token.
\end_layout

\begin_layout Subsection
Authentication and Authorization system
\begin_inset CommandInset label
LatexCommand label
name "sub:Authentication-system"

\end_inset


\end_layout

\begin_layout Subsubsection
Authentication
\end_layout

\begin_layout Standard
The authentication system consists two parts:
\end_layout

\begin_layout Enumerate
Authentication of HMS system
\end_layout

\begin_layout Enumerate
Authentication of Git server
\end_layout

\begin_layout Standard
The first part is the authentication of the HMS system, this part controls
 the user login activities and protect the system from unauthorized user
 actions, for instance a user with students role can not create a new course
 or make evaluation to a assignment.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/login.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/forget password.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Login and Password recovery 
\begin_inset CommandInset label
LatexCommand label
name "fig:Login-and-Password"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Login-and-Password"

\end_inset

 shows the component of authentication of a user login.
 user used the login form to input their email and password into the system,
 system will first find the user based on their email address, and then
 check the password from the database record and the password from user
 input, since the password is saved as SHA-256 in database for security
 reasons, the clear password of user input should first convert into SHA-256,
 then both passwords will be compared, if they are identical, then user
 will be redirect to their account homepage.
 
\end_layout

\begin_layout Standard
another function of authentication system is to recover the user password.
 if the user click the link 
\begin_inset Quotes sld
\end_inset

 Forgot password? 
\begin_inset Quotes srd
\end_inset

 a new page will be generated and ask user to input their email address.
 after user input their email address, the method from Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reset-Password"

\end_inset

 will executed.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,showstringspaces=false,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result runAsk() {
\end_layout

\begin_layout Plain Layout

        Form<AskForm> askForm = form(AskForm.class).bindFromRequest();
\end_layout

\begin_layout Plain Layout

        User user = User.findByEmail(email,"global");
\end_layout

\begin_layout Plain Layout

        if (user == null) {
\end_layout

\begin_layout Plain Layout

            sendFailedPasswordResetAttempt(email);
\end_layout

\begin_layout Plain Layout

            return ok(views.html.account.reset.runAsk.render());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            Token.sendMailResetPassword(user,"global");
\end_layout

\begin_layout Plain Layout

            return ok(views.html.account.reset.runAsk.render());
\end_layout

\begin_layout Plain Layout

        } catch (MalformedURLException e) {
\end_layout

\begin_layout Plain Layout

            Logger.error("Cannot validate URL", e);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout
\noindent

        return badRequest(ask.render(askForm));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Reset Password 
\begin_inset CommandInset label
LatexCommand label
name "fig:Reset-Password"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\shape italic
runAsk()
\shape default
 first check whether a user with the input email exist in the database.
 for security reason, if the user did not exist, the system shouldn't expose
 any result to the user, instead sending a email to notify the person that
 the reset has failed.
 if the user do find with the input email, the rest actions will be same
 as the registration, the user will receive a email with a hyperlink with
 reset token, click this hyperlink will generate a password reset page,
 at this page the user can modify their passwords.
\end_layout

\begin_layout Standard
The second part of authentication related to the git server, because the
 git function is using gitolite to manage the access rights of the student's
 repository, it has a separate authentication system using SSH public key
 mechanism.
 The detail implementation has already been discussed in the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Integration-of-Git"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Authorization
\end_layout

\begin_layout Standard
Beside the authentication of a user, HMS system still need to authorized
 the user a proper access rights based on the user role(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Different-user-role"

\end_inset

).
 The play framework use actions to serve HTTP request, an action is basically
 a Java method that processes the data from the HTTP request.
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset

if an unauthorized person can mock a correct HTTP request, this person can
 basically execute any actions implemented in server logic.
 in order to prevent an unauthorized actions, play framework come with a
 built in authenticator action called 
\shape italic
Secured
\shape default
.
 
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset

 in the case of HMS system, some actions can only be executed by user role
 of teacher, the additionally secured class implementation should distinguish
 the current user role and decide whether the actions should be executed
 for the current user.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,showstringspaces=false,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public class Securedteacher extends Security.Authenticator{
\end_layout

\begin_layout Plain Layout

@Override
\end_layout

\begin_layout Plain Layout

public String getUsername(Http.Context ctx) {
\end_layout

\begin_layout Plain Layout

    User current=User.findByEmail(ctx.session().get("email"), "global");
\end_layout

\begin_layout Plain Layout

    if(current!=null) {
\end_layout

\begin_layout Plain Layout

        if (current.roles.equals(UserRoll.Teachers.toString())) {
\end_layout

\begin_layout Plain Layout

            return ctx.session().get("email");
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            return null;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }else{
\end_layout

\begin_layout Plain Layout

        return null;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Override
\end_layout

\begin_layout Plain Layout

public Result onUnauthorized(Http.Context ctx) {
\end_layout

\begin_layout Plain Layout

    User current=User.findByEmail(ctx.session().get("email"), "global");
\end_layout

\begin_layout Plain Layout

    return ok(forbidden.render(current));
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Security.Authenticated(Securedteacher.class)
\end_layout

\begin_layout Plain Layout

public static Result createlecture() {
\end_layout

\begin_layout Plain Layout

          ...
\end_layout

\begin_layout Plain Layout

         }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Secured actions 
\begin_inset CommandInset label
LatexCommand label
name "fig:Secured-actions"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Secured-actions"

\end_inset

 shows the secured class implementation and usage for user role teacher.
 at first using the 
\shape italic
HTTP.Context
\shape default
 session to get current user, then compare the current user role to the
 required user role, if they are identical, the email address of the current
 user will be returned, otherwise 
\shape italic
null
\shape default
 will be returned.
 after the definition of the play framework documentation.
 if method 
\shape italic
getUsername()
\shape default
 returns a string, tagged action 
\shape italic
createlecture()
\shape default
 will be executed for the current user.
 if 
\shape italic
getUsername()
\shape default
 returns value 
\shape italic
null
\shape default
, the method 
\shape italic
onUnauthorized()
\shape default
 will be executed, in this example, a web page 
\begin_inset Quotes sld
\end_inset


\shape italic
forbidden
\shape default

\begin_inset Quotes srd
\end_inset

 will be generated for the current user, and notice the user that this action
 can not be accomplished with his current user role.
\end_layout

\begin_layout Subsection
Self management
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/updateemail.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/addssh.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Self management 
\begin_inset CommandInset label
LatexCommand label
name "fig:Self-management"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Self-management"

\end_inset

 shows the component of the self management system, at the settings page
 of user, user can update their ssh, password and email.
 updating password and email using the same mechanisms from the section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Authentication-system"

\end_inset

, if a user want to change their email or password, the HMS system will
 always sending a confirmation email with a confirmation token, only after
 user confirming the changes from the URL within the email, the changes
 then can be saved into the database, it is a necessary step to offer more
 security to sensitive data.
 and in order to use the git repository, user also need to add at least
 one ssh public key from their working terminals.
 because the HMS system using the gitolite to manage the git repository,
 and gitolite using ssh keys to manage the access rights of the git repository.
 the implementation of integration gitolite has already be showed in the
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Integration-of-Git"

\end_inset

.
\end_layout

\begin_layout Section
Course management
\end_layout

\begin_layout Standard
The management of a course including two parts: creating new course and
 the enrollment of the course participants.
\end_layout

\begin_layout Subsection
Creating new course
\end_layout

\begin_layout Standard
Because the different types and features of a course
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

, the function of creating new course must be able to cover this two type
 of course.
 also creating a new course is related to the database generation, it should
 also have the ability to decide whether a new semester database should
 be generated.
\end_layout

\begin_layout Subsubsection
User interface
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/remotelecture.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/locallecture.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GUI of creating new course 
\begin_inset CommandInset label
LatexCommand label
name "fig:GUI-of-creatingcourse"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GUI-of-creatingcourse"

\end_inset

 shows the user interface of creating a new course.
 the form above is used to create the 
\begin_inset Quotes sld
\end_inset

Type II
\begin_inset Quotes srd
\end_inset

 course with a remote git repository, this type of course only contains
 a semester project and didn't have a normal final exam so there isn't much
 information needed for creating the 
\begin_inset Quotes sld
\end_inset

Type II
\begin_inset Quotes srd
\end_inset

 course, only the deadline and a description of the course are needed.
 another form from under is for the 
\begin_inset Quotes sld
\end_inset

Type I
\begin_inset Quotes srd
\end_inset

 course.
 in the 
\begin_inset Quotes sld
\end_inset

Type I
\begin_inset Quotes srd
\end_inset

 course student need to do various homework and earn enough points to enter
 the final exam.
 so when creating this kind of course, teacher should provide the precondition
 to the final exam, like the number of assignments and how much points are
 needed to enter the final exam.
 All these settings can still be modified after course has been created
\end_layout

\begin_layout Subsubsection
Server-side logic
\end_layout

\begin_layout Standard
After sending the course creation form to the server, the data from the
 from will be process by the method 
\shape italic
createlecture()
\shape default
 .Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logic-of-creatingcourse"

\end_inset

 shows the process that the newly created are saved into a semester database.
\end_layout

\begin_layout Standard
the first thing to check is the semester name of this course, if the semester
 name of the course didn't present in the semester tracking database, it
 simply means a new semester has already begun, so the first thing system
 will do is to generate a new database for this course and then saving the
 new semester into the semester tracking table.
 after that the course will be saved under the correct semester database.
 
\end_layout

\begin_layout Standard
if the semester name of a new course do present, the course will be simply
 saved under this course name.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

 if(!createlectureForm.hasErrors()) {
\end_layout

\begin_layout Plain Layout

	String semester = createlectureForm.get().yearprefix
\end_layout

\begin_layout Plain Layout

                    + createlectureForm.get().year;
\end_layout

\begin_layout Plain Layout

	User globaluser=User.findByEmail(ctx().session().get("email"),"global");
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	if (Semester.findsemester(semester) == null) {
\end_layout

\begin_layout Plain Layout

	    List<Class> entity = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

	    entity.add(Semesteruser.class);
\end_layout

\begin_layout Plain Layout

	    ...
\end_layout

\begin_layout Plain Layout

	    entity.add(Conversation.class);
\end_layout

\begin_layout Plain Layout

	    createServer(semester, entity);
\end_layout

\begin_layout Plain Layout

	    Semester addsemester = new Semester();
\end_layout

\begin_layout Plain Layout

	    addsemester.semester = semester;
\end_layout

\begin_layout Plain Layout

	    addsemester.save("global");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	Lecture lecture = new Lecture();
\end_layout

\begin_layout Plain Layout

	lecture.semester = semester;
\end_layout

\begin_layout Plain Layout

	lecture.courseName = createlectureForm.get().coursename;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	lecture.closingdate = createlectureForm.get().closingdate;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	Semesteruser semesteruser=Semesteruser.getSemesteruserfomrUser(semester,globalus
er);
\end_layout

\begin_layout Plain Layout

	lecture.lasteditor = semesteruser;
\end_layout

\begin_layout Plain Layout

	if (!lecture.attendent.contains(lecture.lasteditor)) {
\end_layout

\begin_layout Plain Layout

	    lecture.attendent.add(lecture.lasteditor);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	try {
\end_layout

\begin_layout Plain Layout

	lecture.save(lecture.semester);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Logic of creating new course 
\begin_inset CommandInset label
LatexCommand label
name "fig:Logic-of-creatingcourse"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Course enrollment
\end_layout

\begin_layout Standard
After creating the course, it is time to let the students or other teacher
 and assistant to join the course.
 the first part of course enrollment is to list all the available course
 to the user of HMS.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/brwosing.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Browsing the course 
\begin_inset CommandInset label
LatexCommand label
name "fig:Browsing-the-course"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Browsing-the-course"

\end_inset

 shows all the available course under the semester 
\begin_inset Quotes sld
\end_inset

WS2016
\begin_inset Quotes srd
\end_inset

, when user click one of the courses, the homepage of the course will show
 up and ask user to join the course(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Course-homepage-beforesignup"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/course homepage.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Course homepage before sign up
\begin_inset CommandInset label
LatexCommand label
name "fig:Course-homepage-beforesignup"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
before actually signing up the course, the students or other user can only
 viewing the lecture description, the lecture terms.
 the lecture part of homework and forum are blocked.
\end_layout

\begin_layout Subsubsection
Join the new course
\end_layout

\begin_layout Standard
if a user has a user role above 
\begin_inset Quotes sld
\end_inset

Defaultuser
\begin_inset Quotes srd
\end_inset

, this user can join a course.
 if the user has student user role,after clicking the 
\begin_inset Quotes sld
\end_inset

Join
\begin_inset Quotes srd
\end_inset

 button, three things will happen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result addSemesterusertoLecture(String user, String semester,Strin
g lecturename){
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

if(Lecture.addSemesterusertoLecture(semester, semesteruser, lecture)){
\end_layout

\begin_layout Plain Layout

    if(semesteruser.roles.equals(UserRoll.Students.toString())){
\end_layout

\begin_layout Plain Layout

        Evaluation eval= new Evaluation();
\end_layout

\begin_layout Plain Layout

        eval.lecture=lecture;
\end_layout

\begin_layout Plain Layout

        eval.student=semesteruser;
\end_layout

\begin_layout Plain Layout

        eval.save(semester);
\end_layout

\begin_layout Plain Layout

        semesteruser.update(semester);
\end_layout

\begin_layout Plain Layout

    try{
\end_layout

\begin_layout Plain Layout

        String repopath= RepoManager
\end_layout

\begin_layout Plain Layout

                        .createRemoteRepo(currentuser, lecture, request().getHeade
r("Host"));
\end_layout

\begin_layout Plain Layout

        if(repopath!=null){
\end_layout

\begin_layout Plain Layout

            Repo newrepo = new Repo();
\end_layout

\begin_layout Plain Layout

            newrepo.course=lecture;
\end_layout

\begin_layout Plain Layout

            ...
\end_layout

\begin_layout Plain Layout

            newrepo.save(lecture.semester);
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        else{
\end_layout

\begin_layout Plain Layout

            ...
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }catch(Exception e){
\end_layout

\begin_layout Plain Layout

     ...}
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Add student to course 
\begin_inset CommandInset label
LatexCommand label
name "fig:Add-student-to"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Add-student-to"

\end_inset

 shows the tree processes when a student joins the course.
 first the current student user will be added to the participants list of
 the target lecture.
 if the last step passed, then a new 
\shape italic
Evaluation
\shape default
 object will be generated for this students, the 
\shape italic
Evaluation
\shape default
 object will be used to save the student's performance for this lecture.
 at last, the student will get a gitolite repository generated by the static
 method 
\shape italic
createRemoteRepo()
\shape default
, so that the student can submit the solutions.
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Commit"

\end_inset


\end_layout

\begin_layout Standard
on the other hand if a user has teacher or assistant role.
 the system only need to add the user to the course participants list, since
 the evaluation and repository are only needed by the student.
\end_layout

\begin_layout Section
Assignment management
\end_layout

\begin_layout Standard
The management of assignment consists of three parts.
 first part is creating a assignment, second part is collecting and evaluating
 the student submission, third part is returning the assignments result
 back to the student.
 the second part of assignment management has already been discussed in
 the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Check-out-byteacher"

\end_inset

.
 this section will focused on the creating assignment and distributing the
 result.
\end_layout

\begin_layout Subsubsection
Creating assignment
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/modify assignment.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/create assignment.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creation of assignment 
\begin_inset CommandInset label
LatexCommand label
name "fig:Creation-of-assignment"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Creation-of-assignment"

\end_inset

 shows the homework area at teacher's course homepage.
 The form from above is used to modify the details of an assignment, there
 are several things need teacher to input: first is the details of the exercise,
 second is the deadline of this assignment, at last teacher can upload the
 related materials to the assignment.
 teacher can also gives an additional information to clarify the problem
 inside the assignment.
 created assignments will be shown below at the homework section on the
 homepage, the details of the assignment can still be modified and be deleted
 after the creation, but after a student uploading a solution, the assignment
 can not be deleted anymore.
\end_layout

\begin_layout Standard
on the student side, the created assignment will be immediately appeared·on
 the course homepage and ready to be worked on(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Homework-submission-for-local"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Feedback of result
\end_layout

\begin_layout Standard
after evaluation the student's solution, the result of the submission should
 be given back the students.
 the students can direct click the points under in the column under evaluation(F
igure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Homework-submission-for-local"

\end_inset

) for details which was showed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Assignment-results"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/result evaluation.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Assignment results 
\begin_inset CommandInset label
LatexCommand label
name "fig:Assignment-results"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
the evaluation of each exercise comes with the points and an comments from
 the marker.
 also the name of the marker are showed on left corner, so the student can
 directly contact the marker, if there is a problem with the evaluation.
\end_layout

\begin_layout Section
Communication system
\end_layout

\begin_layout Standard
There are two way for the user of HMS to communicate with each other: a
 public course forum and a private instant message system.
\end_layout

\begin_layout Subsection
Public Forum
\end_layout

\begin_layout Standard
Forum is used for students to share their questions about the assignments
 or the course, using forum to discuss the question can avoid same questions
 been repeatedly asked by different students.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Course-Forum"

\end_inset

 is the main page of a course forum.
 the area above are the forum functions, and the forum thread will be listed
 under.
 the latest modified thread will be always listed at the top.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/forumgui.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Course Forum 
\begin_inset CommandInset label
LatexCommand label
name "fig:Course-Forum"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Private Instant Message
\end_layout

\begin_layout Standard
The HMS system use the Web Socket protocol(Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:b.-Instant-message"

\end_inset

) to realize the instant message system.
 Play framework support HMS natively.
 but Web Sockets can't be directly handled by standard Play framework actions.
 a possible way using Web socket in Play is using function callbacks.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

@Security.Authenticated(Securedstudents.class)
\end_layout

\begin_layout Plain Layout

@BodyParser.Of(BodyParser.Json.class)
\end_layout

\begin_layout Plain Layout

public static WebSocket<String> socket(){
\end_layout

\begin_layout Plain Layout

  User currentuser=User.findByEmail(ctx().session().get("email"),"global");
\end_layout

\begin_layout Plain Layout

  if(currentuser!=null) {
\end_layout

\begin_layout Plain Layout

      return WebSocket.whenReady((in, out) -> {
\end_layout

\begin_layout Plain Layout

          Chatsocket.start(currentuser.email, in, out);
\end_layout

\begin_layout Plain Layout

      });
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Web socket callbacks 
\begin_inset CommandInset label
LatexCommand label
name "fig:Websocket-callbacks"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Websocket-callbacks"

\end_inset

 is the Web Socket callback function.
 When the Web Socket is ready, both in and out channels of this connection
 will be obtained by the system.
 the channels and the email of the current user will be passed on to the
 method 
\shape italic
Chatsocket.start()
\shape default
(Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-WebSocket-data"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static HashMap<String,WebSocket.Out<String>> connections;        
                                            
\end_layout

\begin_layout Plain Layout

public static void start(String useremail,WebSocket.In<String> in, WebSocket.Out<S
tring> out){
\end_layout

\begin_layout Plain Layout

    connections.put(useremail,out);
\end_layout

\begin_layout Plain Layout

    in.onMessage(new F.Callback<String>() {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void invoke(String event) throws Throwable {
\end_layout

\begin_layout Plain Layout

    JsonNode inmsg = Json.parse(event);
\end_layout

\begin_layout Plain Layout

    if(inmsg.findPath("event").asText().equals("allconversations")){
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		out.write(result.toString());
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if(inmsg.findPath("event").asText().equals("chatcontent")){
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		out.write(result.toString());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if(inmsg.findPath("event").asText().equals("newmessage")){
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		conversation.update(semester);
\end_layout

\begin_layout Plain Layout

		out.write(result.toString());	
\end_layout

\begin_layout Plain Layout

		connections.get(other).write(notification.toString());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Process Web Socket data 
\begin_inset CommandInset label
LatexCommand label
name "fig:Process-WebSocket-data"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The data from the in channel will be processed in the method from Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-WebSocket-data"

\end_inset

.
 first the outgoing channel will be saved with its username inside a hashmap,
 so that an outgoing channel can be easily picked up later.
 then the inbound message will be processed by the 
\shape italic
invoke()
\shape default
 method.
 The inbound messages are saved in a Json string, the first thing to do
 is to parse the inbound message.
 the inbound message has two keys: event and data.
 
\shape italic
Event
\shape default
 defined the message type, and 
\shape italic
Data
\shape default
 store the actual data from the client.
 The client will generate three different types of messages base on the
 user actions.
 Three example messages are listed below:
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

{"event":"allconversations","data":{"semester":"WS2016","email":"b@b.com"}}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

{"event":"chatcontent","data":{"convid":"1","semester":"WS2016"}}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

{"event":"newmessage","data":{"semester":"WS2016","convid":"1","content":"How
 r u?","other":"a@a.com"}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the first message sending a request to the server for all the conversations
 of user 
\begin_inset Quotes sld
\end_inset

b@b.com
\begin_inset Quotes srd
\end_inset

 in semester 
\begin_inset Quotes sld
\end_inset

WS2016
\begin_inset Quotes srd
\end_inset

.
 the second message requesting the chat content from the conversation with
 id 
\begin_inset Quotes sld
\end_inset

1
\begin_inset Quotes srd
\end_inset

 in 
\begin_inset Quotes sld
\end_inset

WS2016
\begin_inset Quotes srd
\end_inset

.
 the third message will be generated when a user send a new message to another
 user, it contains the information about the conversation id, the content
 of the new message and the email address of the other participants of this
 conversation.
\end_layout

\begin_layout Standard
according to the information from the inbound messages, the server can serve
 outgoing message to different receiver.
 for the first two type of message, the system will simply return the result
 through the out going channel of same user.
 for the third type of message, the system will first save the content of
 the new message into related conversations and finally into the database,
 then the updated conversation object will be formatted into Json string
 and sent back to both participants of the conversation, as long as the
 other participant is also connected to the Web Socket.
 The out going channel of the other participant will be picked up from the
 hashmap defined in the first line from Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-WebSocket-data"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/instant message.jpg
	scale 200

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GUI of instant message
\begin_inset CommandInset label
LatexCommand label
name "fig:GUI-of-im"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GUI-of-im"

\end_inset

 show the user interface of instant message at client side.
 When user choose the semester number under filter the first type message
 will be sent to the server.
 If user click the name of another user in the conversation, a second type
 message will be sent and the conversation content will be showed.
 sending the new reply will generate a third type message and the chat content
 will be immediately updated.
\end_layout

\begin_layout Chapter
Tests
\end_layout

\begin_layout Standard
Testing a web application is challenging due to the nature of web applications.
 First, web application have a client/server structure, with asynchronous
 HTTP calls and response to synchronize the state of each side.
 Second, web application is a mix of different technology and programming
 languages, for instance, in the HMS system, JAVA was used on the server
 side and HTML5, CSS,JavaScript, Scala Template on the client side.
 Third, the dynamic content on the client side of a web application.
 web applications have to manipulate the Document Object Model on the client
 side to serve different content
\begin_inset CommandInset citation
LatexCommand cite
key "garousi2013systematic"

\end_inset

.
 Therefore, only using the unit test can not test a web application meaningful.
 The test of HMS system divided into two parts, the first part is using
 Fluentlenium to test the GUI, the second part is using Junit to test the
 Server-Logic.
\end_layout

\begin_layout Section
Fluentlenium
\end_layout

\begin_layout Standard
Fluentlenium is a framework that helps developer to write Selenium tests
\begin_inset CommandInset citation
LatexCommand cite
key "fluentlenium"

\end_inset

.
 Selenium is an in-browser programming system, which allows developer to
 directly drive the real web browser programmatically.
 It also has the direct access to the DOM elements of web page on the client
 side, and can assert expected client behavior defined by the developer.
 since selenium works within the browser, it can be used to test the dynamic
 behavior of JavaScript and server respond through the interaction between
 browser and user
\begin_inset CommandInset citation
LatexCommand cite
key "van2010research,brown2007introduction"

\end_inset

.
 Fluentlenium provides a fluent interface to the selenium web driver, so
 that the programming of selenium tests will be much easier and the code
 will be more readable.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-Test-Senario-Fluentlenium"

\end_inset

 demonstrates one of many test scenarios writing with the Fluentlenium:
 registering a user account in HMS system and getting a confirmation email.
 First ,the web browser open a page at 
\begin_inset Quotes sld
\end_inset


\shape italic
http://localhost:9000
\shape default

\begin_inset Quotes srd
\end_inset

.
 Second, a HTML form will be filled out and submitted to the server.
 At last, after receiving the respond from the server, the excepted behavior
 , in this case , a success label with text "
\shape italic
You will receive a confirmation email soon.
 Check your email to activate your account.
\shape default
" should be displayed correctly.
 otherwise the test will fail.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void a_testRegistration(){
\end_layout

\begin_layout Plain Layout

goTo("http://localhost:9000");
\end_layout

\begin_layout Plain Layout

fill("#SignUpEmail").with("123@123.com");
\end_layout

\begin_layout Plain Layout

fill("#SignUpLastname").with("123");
\end_layout

\begin_layout Plain Layout

fill("#SignUpFirstname").with("123");
\end_layout

\begin_layout Plain Layout

fill("#SignUpPassword").with("123");
\end_layout

\begin_layout Plain Layout

click("#SignUpSubmit");
\end_layout

\begin_layout Plain Layout

await().atMost(5, TimeUnit.SECONDS).until(".label-success").areDisplayed();
\end_layout

\begin_layout Plain Layout

assertThat(find(".label-success").getText()).isEqualTo("You will receive a
 confirmation email soon.
 Check your email to activate your account.");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Test Scenario of Fluentlenium
\begin_inset CommandInset label
LatexCommand label
name "fig:A-Test-Senario-Fluentlenium"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
other scenarios, for instance, 
\begin_inset Quotes sld
\end_inset

creating a new course by teacher
\begin_inset Quotes srd
\end_inset

, 
\begin_inset Quotes sld
\end_inset

uploading a new solution to the assignment by student
\begin_inset Quotes srd
\end_inset

 are similarly programmed as Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-Test-Senario-Fluentlenium"

\end_inset

.
 
\end_layout

\begin_layout Section
JUnit
\end_layout

\begin_layout Standard
Since the server side of HMS system are written in Java, the server logic
 will be tested by the JUnit.
 In order to save the testing time, it is important to test the server logic
 without starting the whole HMS system.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,showstringspaces=false,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void testDeleteSSH() {
\end_layout

\begin_layout Plain Layout

	User owner= new User();
\end_layout

\begin_layout Plain Layout

	owner.save("global");
\end_layout

\begin_layout Plain Layout

	SSH ssh= new SSH();
\end_layout

\begin_layout Plain Layout

	ssh.save("global");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	FakeRequest request=new FakeRequest("POST","/settings/ssh_delete?sshid=1");
\end_layout

\begin_layout Plain Layout

	Result result = route(request);
\end_layout

\begin_layout Plain Layout

	assertThat(status(result)).isEqualTo(OK);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Controller Test 
\begin_inset CommandInset label
LatexCommand label
name "fig:Controller-Test"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Controller-Test"

\end_inset

 is a unit test for controller 
\begin_inset Quotes sld
\end_inset


\shape italic
deleteSSH
\shape default

\begin_inset Quotes srd
\end_inset

, using the class 
\begin_inset Quotes sld
\end_inset


\shape italic
FakeRequest
\shape default

\begin_inset Quotes srd
\end_inset

 from the Play framework, developer can easily test the behavior of the
 server logic without actually starting the application.
 In the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Controller-Test"

\end_inset

 a fake HTTP post request will be sent to the controller with a URL query
 
\begin_inset Quotes sld
\end_inset

sshid=1
\begin_inset Quotes srd
\end_inset

, since before this request a new ssh is already saved into the database,
 the request for 
\shape italic

\begin_inset Quotes sld
\end_inset

deleting a ssh with id=1
\shape default

\begin_inset Quotes srd
\end_inset

 should be successful, in this case request status should equal to 
\begin_inset Quotes sld
\end_inset

200
\begin_inset Quotes srd
\end_inset

 or 
\begin_inset Quotes sld
\end_inset

OK
\begin_inset Quotes srd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Result
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Test-Coverage"

\end_inset

 shows the test coverage from the test procedure from both aspects (GUI
 and Logic), which calculated by the Jacoco for SBT 
\begin_inset CommandInset citation
LatexCommand cite
key "jacoco"

\end_inset

.
 However due to the incompability of SBT and Jacoco, many scala methodes
 which were generated by the Playframework during the runtime were marked
 by the Jacoco sbt version as not covered, especially in the database tests.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/coverage with view.jpg
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test Coverage 
\begin_inset CommandInset label
LatexCommand label
name "fig:Test-Coverage"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Deployment and maintance
\end_layout

\begin_layout Standard
After describing every step of developing phase of the HMS sytem, it is
 time to put the system into a real practice.
\end_layout

\begin_layout Standard
The first part of this chapter will describe the steps to deploy the HMS
 system to a private server running with Ubuntu 15.04
\begin_inset Foot
status open

\begin_layout Plain Layout
The installation procedure has also been tested on the Ubuntu 14.04LTS, however
 the automatic installation of the Gitolite is not working with Ubuntu 15.10,
 so Gitolite need to be installed manuelly
\end_layout

\end_inset

, and second part will demonstrate the maintaince procedure (i.e.,backup semester
 data and managing the user role) of the HMS system.
\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Standard
Since the HMS system was writting in Java and need Gitolite to manage the
 git repository 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Submission-management"

\end_inset

, user has to make sure the Gitolite server and Java SDK 8.0 has already
 installed on the server before running the HMS system.
 Beside installing the required software, a mail server has also needed
 to be configured, so that the HMS system can send out Email.
 Then user can excute the start script within the distribution package of
 HMS to bring the system online.
 
\end_layout

\begin_layout Standard
The content of the distribution package are listed on the left side of Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Distribution-Package-of-hms"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/dispackage1.jpg
	scale 50

\end_inset


\begin_inset Graphics
	filename images/dispackage2.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Distribution Package of HMS 
\begin_inset CommandInset label
LatexCommand label
name "fig:Distribution-Package-of-hms"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The script 
\begin_inset Quotes sld
\end_inset


\shape italic
first_installation
\shape default

\begin_inset Quotes srd
\end_inset

 will be used to automatically install and configure the gitolite server.
 On the right side of Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Distribution-Package-of-hms"

\end_inset

 shows the files inside 
\begin_inset Quotes sld
\end_inset


\shape italic
bin
\shape default

\begin_inset Quotes srd
\end_inset

 folder, the script 
\begin_inset Quotes sld
\end_inset


\shape italic
hms
\shape default

\begin_inset Quotes srd
\end_inset

 is for starting the whole HMS system, and the file mail.conf need to be
 configured to fit the mail server.
\end_layout

\begin_layout Subsubsection
Installation of Gitolite
\end_layout

\begin_layout Standard
First of all the server maintainer should create a new user with the name
 
\begin_inset Quotes sld
\end_inset

git
\begin_inset Quotes srd
\end_inset

 on the Ubuntu server.
 Then copy the distirbution package of HMS into a folder and excuting the
 script 
\begin_inset Quotes sld
\end_inset


\shape italic
first_installation
\shape default

\begin_inset Quotes srd
\end_inset

 as follows:
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=bash,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

chmod +x first_installation
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=bash,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

./first_installation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the script will first install Git and Gitolite under user 
\begin_inset Quotes sld
\end_inset


\shape italic
git
\shape default

\begin_inset Quotes srd
\end_inset

, then generate the SSH key pair for the user 
\begin_inset Quotes sld
\end_inset


\shape italic
git
\shape default

\begin_inset Quotes srd
\end_inset

 and configure the Gitolite server based on this SSH key.
 At last the admin repository of Gitolite will be cloned into the home folder
 and is ready for using.
 if the installation process was successfull, user can find two new directory
 under home folder: 
\begin_inset Quotes sld
\end_inset


\shape italic
repositories
\shape default

\begin_inset Quotes srd
\end_inset

 and 
\begin_inset Quotes sld
\end_inset


\shape italic
gitolite-admin
\shape default

\begin_inset Quotes srd
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Configure Mail Server
\end_layout

\begin_layout Standard
The Mail Server are configured by the file 
\begin_inset Quotes sld
\end_inset

mail.conf
\begin_inset Quotes srd
\end_inset

, the configuration such as:
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline true
status open

\begin_layout Plain Layout

smtp.host=smtp.gmail.com
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline true
status open

\begin_layout Plain Layout

smtp.port=587
\end_layout

\end_inset

 has to be correctly setted according to the mail server which is used for
 the HMS system.
\end_layout

\begin_layout Subsubsection
Starting the HMS system
\end_layout

\begin_layout Standard
After setting up the Gitolite Server and Mail Server, The HMS system can
 finally be started by excuting the script 
\begin_inset Quotes sld
\end_inset


\shape italic
hms
\shape default

\begin_inset Quotes srd
\end_inset

 with the configuration file of mail server:
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline true
status open

\begin_layout Plain Layout

./hms -Dconfig.file=mail.conf
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Maintance
\end_layout

\begin_layout Standard
The start up phase of the HMS system will generate a account for the system
 administrator, the user name and password of the account will be saved
 into a folder with name 
\begin_inset Quotes sld
\end_inset


\shape italic
HMS_Config
\shape default

\begin_inset Quotes srd
\end_inset

 under the 
\begin_inset Quotes sld
\end_inset


\shape italic
git
\shape default

\begin_inset Quotes srd
\end_inset

 home directory.
 The administator account provides two functions: backup semester data and
 manage user role.
\end_layout

\begin_layout Subsubsection
Backup
\end_layout

\begin_layout Standard
Since the database file and files which are generated by the activities
 of the lecture during the semester, are saved under a unified structure
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

).
 It only needs the maintainer to move these files to other place.
 and additionaly remove the information of this semester from the system,so
 that after rebooting the HMS, the system will not try to reload the database
 of this semester (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reload-the-database"

\end_inset

), and all the user of the HMS can not access the data of this semester
 anymore.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Disconnect-Semester-Database"

\end_inset

 shows the user interface of removing semester information from the system.
 After the maintainer click the 
\begin_inset Quotes sld
\end_inset

Disconnect
\begin_inset Quotes srd
\end_inset

 button, the information of existence of semester 
\begin_inset Quotes sld
\end_inset

WS2016
\begin_inset Quotes srd
\end_inset

 will be deleted and the database of 
\begin_inset Quotes sld
\end_inset

WS2016
\begin_inset Quotes srd
\end_inset

 will not be reloaded after rebooting the HMS.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/databasedisconnect.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Disconnect Semester Database
\begin_inset CommandInset label
LatexCommand label
name "fig:Disconnect-Semester-Database"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Manage User Role
\end_layout

\begin_layout Standard
Besides maintain the data of HMS, the administrator of the HMS also need
 to take care of the user role.
 Base on the request from the user, the administrator can adjust the user
 role from the 
\begin_inset Quotes sld
\end_inset

User Management
\begin_inset Quotes srd
\end_inset

 panel (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Manage-User-Role"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/manage user role.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Manage User Role 
\begin_inset CommandInset label
LatexCommand label
name "fig:Manage-User-Role"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Summary
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Glossary}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "HMS"
description "Homework Management System"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ORM"
description "Object-relational mapping"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "auto"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibtex-daten/bachelorarbeit-info"
options "bibtotoc,bibtex-daten/unsrtdin"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\end_body
\end_document
