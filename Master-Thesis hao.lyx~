#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
% verschieden Symbole, Zeichen wie (c), €
\usepackage{textcomp,units}

% Mehr Platz zwischen Tabelle und Untertitel
\usepackage{caption}
\captionsetup[table]{skip=10pt}

%Kapitelzahl sehr groß
\makeatletter% siehe De-TeX-FAQ 
 \renewcommand*{\chapterformat}{% 
   \begingroup% damit \unitlength-Änderung lokal bleibt 
     \setlength{\unitlength}{1mm}% 
     \begin{picture}(10,10)(0,5) 
       \setlength{\fboxsep}{0pt} 
       %\put(0,0){\framebox(20,40){}}% 
       %\put(0,20){\makebox(20,20){\rule{20\unitlength}{20\unitlength}}}% 
       \put(10,15){\line(1,0){\dimexpr 
           \textwidth-20\unitlength\relax\@gobble}}% 
       \put(0,0){\makebox(10,20)[r]{% 
           \fontsize{28\unitlength}{28\unitlength}\selectfont\thechapter 
           \kern-.05em% Ziffer in der Zeichenzelle nach rechts schieben 
         }}% 
       \put(10,15){\makebox(\dimexpr 
           \textwidth-20\unitlength\relax\@gobble,\ht\strutbox\@gobble)[l]{% 
             \ \normalsize\color{black}\chapapp~\thechapter\autodot 
           }}% 
     \end{picture} % <-- Leerzeichen ist hier beabsichtigt! 
   \endgroup 
}

\usepackage{ %a4wide,
            ellipsis, fixltx2e, mparhack,   %Fehlerkorrektur für Marginalien
            booktabs, longtable             %schönere Tabellen
}  

\usepackage[automark]{scrpage2}
%\automark[chapter]{chapter}
\clearscrheadfoot
\ohead{\\\headmark}
\ihead{\includegraphics[scale=0.15]{logo.jpg}}%\pagemark}
\ofoot[\pagemark]{\pagemark}


%Kurzfassung und Abstract (englisch) auf eine Seite
\renewenvironment{abstract}{
    \@beginparpenalty\@lowpenalty
      \begin{center}
        \normalfont\sectfont\nobreak\abstractname
        \@endparpenalty\@M
      \end{center}
}{
    \par
}



% schönerer Blocksatz!!
\usepackage{microtype}

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used

%set fonts for nicer pdf view
 \IfFileExists{lmodern.sty}{\usepackage{lmodern}}
  {\usepackage[scaled=0.92]{helvet}
    \usepackage{mathptmx}
    \usepackage{courier} }
\fi

 % the pages of the TOC are numbered roman
 % and a pdf-bookmark for the TOC is added
 \pagenumbering{roman}
 \let\myTOC\tableofcontents
 \renewcommand\tableofcontents{
   %\pdfbookmark[1]{Contents}{}
   \myTOC
   \clearpage
   \pagenumbering{arabic}}

%Bezeichungen anpassen
%Babelpaket muß zuvor geladen werden
%\usepackage[english]{babel}
%\addto\captionsngerman{} 
%\renewcommand{\figurename}{Abb.}% 
%\renewcommand{\tablename}{Tab.}% 
%\renewcommand{\abstractname}{Summary}
%\renewcommand{\nomname}{Abkürzungen}


% Alle Querverweise und URLs als Link darstellen
% In der PDF-Ausgabe
 \usepackage[colorlinks=true, bookmarks, bookmarksnumbered, bookmarksopen, bookmarksopenlevel=1,
  linkcolor=black, citecolor=black, urlcolor=blue, filecolor=blue,
  pdfpagelayout=OneColumn, pdfnewwindow=true,
  pdfstartview=XYZ, plainpages=false, pdfpagelabels,
  pdfauthor={LyX Team}, pdftex,
  pdftitle={LyX's Figure, Table, Floats, Notes, and Boxes manual},
  pdfsubject={LyX-documentation about figures, tables, floats, notes, and boxes},
  pdfkeywords={LyX, Tables, Figures, Floats, Boxes, Notes}]{hyperref}

%mehr Platz zwischen Überschrift und Tabelle
\newcommand{\@ldtable}{}
\let\@ldtable\table
\renewcommand{\table}{ %
                 \setlength{\@tempdima}{\abovecaptionskip} %
                 \setlength{\abovecaptionskip}{\belowcaptionskip} %
                 \setlength{\belowcaptionskip}{\@tempdima} %
                 \@ldtable}

%In dieser Arbeit wird auf die Nomenklatur als Abkürzungsverzeichnis verzichtet. Bei Wunsch wieder aktivieren.
%Nomenklatur als Abkürzungsverzeichnis verwenden
%\renewcommand{\nomname}{Abkürzungsverzeichnis}
%\renewcommand{\nomlabelwidth}{20mm}

%Nomenklatur als Glossar verwenden
%Nur Noetig wenn auch Glossar verwendet wird.
%\renewcommand{\nomname}{Glossary}

%Farbe für Programmcode festlegen
%\definecolor{lightgray}{rgb}{0.8,0.8,0.8}
\end_preamble
\options pointlessnumbers, abstracton, headsepline,
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 120
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing other 1.2
\use_hyperref false
\pdf_title "Analyse und Interpretation des Risswachstums an thermisch hochbelasteten Bauteilen für die Fusionsforschung mittels IR Diagnostik und FE Modellierung"
\pdf_author "Timo Schindler"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\topmargin 2.5cm
\bottommargin 3.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle plain
\bullet 2 0 9 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
titlepage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/Logo_Uni_Kassel.eps
	lyxscale 50

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Faculty Elektrotechnik / Informatik
\size default

\begin_inset space \hspace{}
\length 2.5cm
\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset VSpace 7cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
\size larger
Master Thesis
\end_layout

\begin_layout Standard
\noindent
\align left

\size large
Homework Manage System with Git-Support and hierarchical File database for
 Data management
\end_layout

\begin_layout Standard
\noindent
\align left

\size larger
\begin_inset VSpace 1.5cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Submitted by:
\begin_inset space \hspace{}
\length 1cm
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hao Gao
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matriculation number: 33101387
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supervised by:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prof.
 Dr.
 Albert Zündorf
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universität Kassel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prof.
 Dr.
 Gerd Stumme
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universität Kassel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kassel, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 17.1mm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
\size huge
Declaration of Authorship
\end_layout

\begin_layout Standard
I hereby declare that I have authored this thesis independently, that I
 have not used other than the declared resources, and that i have explicity
 marked all material which has been quoted either literally or by content
 from the used sources.
 According to my knowledge, the content or parts of this thesis have not
 been presented to any other examination authority and have not been published.
\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle" tabularwidth="15cm">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kassel, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hao Gao
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
ACHTUNG: Hier am Ende noch die richtige Seite einstellen! Sonst passt die
 Nummerierung nicht!
\end_layout

\begin_layout Plain Layout
!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{page}{4}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
Using a web-based Learning Management System (LMS) to handle the teaching
 and learning process in higher education is becoming increasingly common
\begin_inset CommandInset citation
LatexCommand cite
key "romero2008data"

\end_inset

.
 At the same time, more and more students choose Computer Science as their
 major.
 In the winter semester of year 2013 in Germany alone, there were 33700
 students enrolled in computer science, which is 4% more than in 2012
\begin_inset CommandInset citation
LatexCommand cite
key "destatis"

\end_inset

.
 The current LMS system already provides a lot of features such as creating
 online courses and handout course materials and assignments.
 However they are still short on features to meet specific needs of computer
 science education
\begin_inset CommandInset citation
LatexCommand cite
key "rossling2008enhancing"

\end_inset

.
 A common lecture format for computer science students is that they have
 to finish a lecture project throughout the whole semester.
 In order to avoid data loss, most students use a version control system
 (VCs) to manage their project, such as Git
\begin_inset CommandInset citation
LatexCommand cite
key "GitOfficial"

\end_inset

, and the lecturer would usually provides a remote Git server to let the
 students host their project, so that the teacher can check out the student’s
 repository to make a review from time to time.
 And when deadlines for projects have passed, teachers have to register
 the points of each project into the LMS system by hand.
 This is a common scenario when using LMS for computer science lectures.
 Under this circumstance, the teaching staff has to maintain two systems:
 LMS and VCs.
 And they need to constantly change between these two systems to make an
 evaluation.
 On the other hand, the current LMS system requires large amounts of maintenance
 work.
 Based on the research of Debbi Weaver from Swinburne University
\begin_inset CommandInset citation
LatexCommand cite
key "weaver2008academic"

\end_inset

, the academic staff require more local IT support to solve some technical
 issues with the LMS platform, a big distraction from the teaching task.
 In this work a new LMS system the HMS (Homework Management System) will
 be introduced using the version control system Git to manage submissions
 from students.
 With Git-based submission management, semester projects can be directly
 hosted within HMS, additionally a newly designed evaluation system based
 on the Git can automatically collect the points of the review made by the
 teacher and register the points directly into the student‘s account, so
 that the teacher and students no longer need to change between the systems.
 Furthermore, HMS uses a file-based embedded database and a unified storage
 structure and can run as a stand-alone java application on any sever, so
 that the work of maintenance can be reduced to a minimal level.
 The detail design of the data management will be introduced in the design
 chapter.
\end_layout

\begin_layout Chapter
Background and Related Work
\end_layout

\begin_layout Standard
In order to make this thesis more understandable, the used technologies
 and their major characteristics will be described in detail in this chapter.
 The first part introduces the version control system, Git, which is used
 to manage the submitted file by the HMS system.
 Then, the Play framework which the HMS is based on will be described.
 Finally, a communications protocol used to build the instant message system
 in the HMS will be introduced.
 Additionally, two related systems, which were developed in the Faculty
 Software Engineering Department of the University of Kassel will be discussed.
\end_layout

\begin_layout Section
Git
\end_layout

\begin_layout Standard
Git is a widely used version control system.
 It was initially designed and developed in 2005 by Linus Trovalds with
 the following features:
\end_layout

\begin_layout Subsubsection
Distributed
\end_layout

\begin_layout Standard
Every client will fully mirror the repository when they checkout.
 If the server dies, any of the repositories of the client can be used to
 restore the repository on the server, so that a distributed version control
 system can avoid the risk of losing all the data.
\end_layout

\begin_layout Subsubsection
Doesn’t save differences
\end_layout

\begin_layout Standard
Git does not store the differences between the state of a file.
 Instead it will take a snapshot, every time a user checks in, and it will
 memorize the state of the files at that moment and save a reference with
 it.
\end_layout

\begin_layout Subsubsection
No server needed
\end_layout

\begin_layout Standard
Most operations in Git can be operated locally.
 It doesn’t need any information from other sources.
 The changes made offline can be easily loaded onto the server later.
\end_layout

\begin_layout Subsubsection
Data integrity
\end_layout

\begin_layout Standard
Git uses SHA-1
\begin_inset CommandInset citation
LatexCommand cite
key "stevens2012attacks"

\end_inset

 hash to check-sum files and directories before they are stored, the hash
 value that will be referred to them and saved later into the database of
 Git, so that it is impossible to make changes inside a repository without
 Git detecting them.
 Besides, all the actions made by the user with Git, will only be added
 to the database of Git.
 It will not erase or modify anything, which is not undoable.
 So losing data is very diffcult when using Git.
\end_layout

\begin_layout Subsubsection
Workflow
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Gitworkflow.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Workflow of Git
\begin_inset CommandInset citation
LatexCommand cite
key "chacon2014pro"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Workflow-of-Git"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Workflow-of-Git"

\end_inset

 demonstrates the basic workflow of Git.
 First the user will modify the files inside the working directory, then
 the snapshot of these files will be added to the staging area.
 When the user commits the changes, the data inside the staging area will
 be permanently saved inside the Git directory that stores the metadata
 and object database for the project.
\begin_inset CommandInset citation
LatexCommand cite
key "chacon2014pro"

\end_inset

.
\end_layout

\begin_layout Section
Playframework
\end_layout

\begin_layout Standard
Playframework
\begin_inset CommandInset citation
LatexCommand cite
key "PlayOfficial"

\end_inset

 is an open source web application framework based on the Java.
 A play application follows the MVC architectural pattern
\begin_inset CommandInset citation
LatexCommand cite
key "leff2001web"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/diagrams_mvc.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
MVC architecture
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:MVC-Archtectual"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MVC-Archtectual"

\end_inset

 shows, this architecture splits the web application into two layers: The
 presentation layer and the model layer.
 The model layer representation of raw data, mostly uses a persistent mechanism
 such as database at this layer.
 The presentation layer is divided into two parts: The view and the controller.
 The view renders the raw data from the model into a form, which can be
 interacted with by the user.
 The controller receives and responds to events, that normally come from
 the HTTP Request.
\end_layout

\begin_layout Standard
Play is also completely RESTful and stateless, fully supported by the asynchrono
us HTTP programming model so that the concurrent real time data can be easily
 integrated within play applications, and long-lived requests will also
 be served without interfering with other threads.
 Unlike other java playframeworks, Playframework comes with an embedded
 HTTP server so that a play application can be easily executed without any
 container such as a Tomcat
\begin_inset CommandInset citation
LatexCommand cite
key "tomcatOffi"

\end_inset

.
 So, a play application can run on any computer with a JVM
\begin_inset CommandInset citation
LatexCommand cite
key "lindholm2014java"

\end_inset

 as a normal, stand-alone java application and without having to do complicated
 server configurations
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset

.
\end_layout

\begin_layout Section
WebSocket
\end_layout

\begin_layout Standard
WebSocket
\begin_inset CommandInset citation
LatexCommand cite
key "WebSocketOffi"

\end_inset

 is a protocol designed for real time communications that provides a persistent,
 bidirectional, fast connection between the client and server.
 Beside the WebSocket protocol, there is also a WebSocket API, which was
 developed by the World Wide Web Consortium (W3C).
 This api enables the developer to perform actions like opening and closing
 the WebSocket channels or sending and receiving messages within their applicati
ons.
 The WebSocket API is supported by major modern browsers
\begin_inset CommandInset citation
LatexCommand cite
key "wang2013definitive"

\end_inset

.
\end_layout

\begin_layout Section
Related works
\end_layout

\begin_layout Standard
Previous to the HMS system introduced by this work there were already two
 projects that existed at faculty software engineering.
 On the left side of Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:PHP-Based-Homework"

\end_inset

 is the first homework management system used inside the faculty.
 It is a simple, static php page attached to the lecture homepage combined
 with a sql database.
 It only provides basic functions: user registration, homework submission,
 solution submission and evaluation registration.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset Graphics
	filename images/fohry_klein.jpg
	scale 150

\end_inset


\begin_inset Graphics
	filename images/hds.jpg
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Earlier Systems 
\begin_inset CommandInset label
LatexCommand label
name "fig:PHP-Based-Homework"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the right side of Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:PHP-Based-Homework"

\end_inset

 the second system is shown, which is more advanced.
 It is a stand-alone web application based on Playframework
\begin_inset CommandInset citation
LatexCommand cite
key "PlayOfficial"

\end_inset

, and provides more function than the first system, such as lecture management,
 assignment management, and a simple feedback system.
 However it still has some weak points which were discussed in Chapter 1;
 for instance, neither systems provide an easy and quick solution to backup
 the semester-related data, nor do they consider the special nature of the
 homework in the area of computer science, which contains a lot of source
 code and multiple files.
\end_layout

\begin_layout Standard
In the rest of this thesis, a new HMS system will be introduced, which provides
 a new way to manage the activities around homework specially the homework
 of computer science and including a new aproach to manage the data persistently
 so that the cost of running and maintaining the system can be minimized.
\end_layout

\begin_layout Chapter
Design
\end_layout

\begin_layout Standard
HMS is a web platform to manage the activities related to homework including
 handing out the related materials to the students, collecting the handed
 in homework and managing the evaluation of the assignment.
 In this chapter the detailed design of functions to support those activities
 will be discussed.
 Furthermore the problems of the current alternative system will be analyzed
 and the solutions to those problems will be introduced.
\end_layout

\begin_layout Standard
The functions of the HMS system are divided into two parts: The first part
 is to develop the common features, which are similar to other web platforms,
 for instance, the ”register a user account” feature.
 The second part of the design is to develop the special core features the
 dynamic data management and the git based homework management which make
 the HMS system a better platform compared to others.
\end_layout

\begin_layout Section
Common functions
\end_layout

\begin_layout Standard
The main task of HMS is handling the process of handing in and handing out
 the homework between the students and teachers.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/generall.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The use case from the perspective of different user roles.
\begin_inset CommandInset label
LatexCommand label
name "fig:The-use-case"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
As Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-use-case"

\end_inset

 shows, there are several steps within this process from the prospective
 of the user.
 First, considering the user role of students, the student should be able
 to register a HMS account.
 After logging into the system, the students can brows all the available
 courses in the system and subscribe to their target course.
 Then it is possible for the students to view the homepage of the course
 and download the available homework, and finally, uploading the solutions
 to the homework accordingly.
 The process of uploading homework to the system is finished on the student’s
 side.
 Now take a look at the side of teacher and assistant.
 Beside the registration and log in process, the user group of teacher can
 create new course and new assignment materials and also collect the handed
 in homework and give them back to the students once the evaluation is finished.
 The assistants, however, cannot create a new course, but should be able
 to add new assignments and evaluate the handed in homework as well.
 In summary, in order to realize the main task of the HMS, it should have
 the following capabilities:
\end_layout

\begin_layout Enumerate
User management including ”Registration”, ”Role based access control” and”Self-M
anagement”
\end_layout

\begin_layout Enumerate
Course management including ”Creation of Course”,”Modification of Course”
\end_layout

\begin_layout Enumerate
Assignment management including ”Creation of Assignment”, ”Distribution
 of Assignments”, ”Collecting of Assignment” and ”Evaluation of Assignment”
\end_layout

\begin_layout Standard
Besides the above listed capabilities, the HMS should also provide a way
 for the students and teachers to communicate with each other.
 Foremost, a private message system will be needed for the students and
 teachers to exchange information about problems with assignments or evaluations
 individually.
 Also, the new message system should work as an instant message system,
 and, in this way, the questions or the problems between the students and
 teachers can be resolved more efficiently.
 Second, a course forum is also not a bad idea, since a common scenario
 is that more students may have the same question for a new assignment;
 if a student writes a new post with this question, and the teacher gives
 an answer to the question, the other students with the same question can
 also get the answer and avoid asking the same questions again.
 This saves time on both sides.
 So the communications system for the HMS has two parts:
\end_layout

\begin_layout Enumerate
Instant private message system
\end_layout

\begin_layout Enumerate
A public course forum for each course 
\end_layout

\begin_layout Subsection
User management
\begin_inset CommandInset label
LatexCommand label
name "sub:User-management"

\end_inset


\end_layout

\begin_layout Standard
The user management of the HMS system consists of several modules (Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Modules-of-usermanagement"

\end_inset

): First is the registration module.
 With this module, the user can use their email address to register an account
 in the HMS system.
 Second is the self-management module.
 After the user has logged into the system, they should be able to change
 their email and password or other personal details.
 Third is the user role control module, which is necessary for the system
 to arrange the proper functions for the current user.
 Based on their user role, the user obtains a start-up role at registration.
 Later on, the user role can be changed by the system administrator.
 In the rest of this section, all the modules will be discussed in detail.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/User management.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The modules of user management
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Modules-of-usermanagement"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Registration
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Registration activity_cut.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Registration activity
\begin_inset CommandInset label
LatexCommand label
name "fig:Registration-activity"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Registration-activity"

\end_inset

 shows the workflow when a user registers a new account.
 The user first uses the registration form to fill in all the relevant informati
on the password, email, and student number after clicking the sign-up button,
 and the whole process begins.
 First the validation of the registration form will be performed to check
 whether the user has filled in all the required fields and without error.
 Once the user has passed the form validation step, the HMS system will
 then send a confirmation email with a confirmation URL to the email address
 from the registration form.
 Once the user clicks the confirmation link, the user will be redirected
 to the website and can directly start using the account.
 Otherwise, the user has to start the registration process over.
 The step of email address confirmation is important because this procedure
 allows the system to check that the user actually signed up for the account
 and guarantee that the email of this user is valid and ready to receive
 the system information.
\end_layout

\begin_layout Subsubsection
Self-management
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/self management.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The functions of self-management
\begin_inset CommandInset label
LatexCommand label
name "fig:The-functions-of-selfmanagement"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is very common that users may forget their passwords or, even worse,
 their registered email becomes invalid, so it is necessary to develop functions
 that users can use to reset their emails and passwords.
 The resetting of email addresses or passwords works similar to registration.
 If a user chooses to reset their email address, first they will be asked
 to type in the new email address, and after that, the user clicks the reset
 button, and the system should send a new confirmation email to the new
 address, where the user clicks the hyperlink in the email, and a new web
 page will be generated so the user can confirm the address change.
 If a user chooses to reset their password, they just need to click the
 “reset password button”, and the system will send another confirmation
 email with a hyperlink that the user can use to type in their new password.
 Besides the modification of passwords and email addresses, there is another
 function that should be added to self-management; thus, the HMS system
 uses the Git server to control access to the homework files, and this Git
 server use ssh to authenticate the connections.
 The system should also provide a function where users can add their ssh
 public key to the Git server, so that they can connect their computer directly
 to this Git server.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-functions-of-selfmanagement"

\end_inset

 gives an overview of all the components of user self-management.
\end_layout

\begin_layout Subsubsection
Role-based access control
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="6">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<column alignment="center" valignment="middle" width="2cm">
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Admin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Students
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assistants
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teachers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Functions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create Lecture
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create Assignment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Join Lecture
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hand in Homework
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Forum & Message
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Self Manage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
◯
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Different user roles in the HMS system
\begin_inset CommandInset label
LatexCommand label
name "fig:Different-user-role"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
HMS system users have different roles to perform different actions: for
 instance, a teacher can create a new course but students cannot, so it
 is important to have a subsystem to distinguish the user roles, so that
 the HMS can serve proper functions for the user.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Different-user-role"

\end_inset

 shows all the user roles in the HMS system: first, is the 
\shape italic
system admin
\shape default
, whose job is to manage other user’s role and the system data (backup the
 database and related files in certain times).
 Any other functions of the HMS are irrelevant to the system admin.
 Second is the 
\shape italic
default user
\shape default
.
 The user with this role cannot do many things other than updating their
 personal data (passwords and email).
 The third user role is 
\shape italic
students
\shape default
, where, with a student account, the user can browse all available courses,
 join the course, and download and upload homework, all while using the
 communication features like “chat” and “forum”.
 The fourth user role is 
\shape italic
assistants
\shape default
.
 Besides all the functions of students, assistants can review all the student’s
 homework and make an evaluation.
 The last one is the 
\shape italic
teacher
\shape default
 role.
 The teacher account has all the functions of the assistant account but
 additionally the teacher can create new courses.
\end_layout

\begin_layout Standard
In the rest of this thesis, the use of teacher, assistant and student will
 specifically indicate the user group with a certain role.
 For instance, teacher means a user group with user role ”teacher”.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Course management
\end_layout

\begin_layout Standard
The typical course provided by the faculty of software engineering and their
 evaluation methods are listed as follows:
\end_layout

\begin_layout Itemize
Bachelor Programming Methodology: Evaluation through final exam
\end_layout

\begin_layout Itemize
Bachelor Design Pattern: Evaluation from multiple sub project
\end_layout

\begin_layout Itemize
Master Software Engineering 2: Evaluation from semester project
\end_layout

\begin_layout Itemize
Master Compiler Construction: Evaluation from multiple sub project
\end_layout

\begin_layout Itemize
Master Graph Model : Evaluation through final exam
\end_layout

\begin_layout Standard
The above courses can be divided into two categories: In the first type,
 of course, the students have to hand in various homework, and the points
 gained from that homework are usually used as a prerequisite for the final
 exam.
 In the second type of course, the students will get a semester assignment
 normally a whole software project and the points gained from this project
 are usually the final points for the course.
 Additionally, every student will get a Git repository after they have signed
 in as users on the course, and this repository will also worked in two
 modes according to the type of course.
 The details of Git working modes will be discussed later in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Submission-management"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="middle" width="5cm">
<column alignment="left" valignment="middle" width="4cm">
<column alignment="left" valignment="middle" width="3cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\noindent
\align left

\size footnotesize
Precondition to exam
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Git repository Mods
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Evaluation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Type I
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\size footnotesize
Students have to hand in a minimum amount of valid homework
\end_layout

\begin_layout Enumerate
\noindent
\align left

\size footnotesize
Valid homework requires normally for students to gain more than 50% on an
 assignment
\end_layout

\begin_layout Enumerate

\size footnotesize
A student should gain at least 50% of total points on the final exam
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Git repository works under local mods
\begin_inset Newline newline
\end_inset

(Student can only hand in the homework through the course homepage)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
need detail evaluation of assignments
\begin_inset Newline newline
\end_inset

(number of valid hand-ins, percentage of gained points)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Type II
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
None, Students just need to hand in the final project (may consist of a
 sub.
 project)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Git repository works under remote modus
\begin_inset Newline newline
\end_inset

(Student can use the course repository as any remote Git repository)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Only final evaluation
\end_layout

\begin_layout Plain Layout

\size footnotesize
(or multiple sub.evaluation)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Features of different types of courses
\begin_inset CommandInset label
LatexCommand label
name "tab:Features-of-course"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

 shows the different features of different types of courses.The functions
 of ”course management” should take all the features from above into considerati
on.
\end_layout

\begin_layout Subsection
Assignment management
\begin_inset CommandInset label
LatexCommand label
name "sub:Assignment-management"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/assignment management.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence diagram for assignment management
\begin_inset CommandInset label
LatexCommand label
name "fig:Sequenz-diagram-for-assignment"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sequenz-diagram-for-assignment"

\end_inset

 shows the sequence of handing in and handing out a assignment.
 After creating a new course, the teacher can start adding assignments to
 the course.
 When a new assignment has been successfully added to the course, the student’s
 course homepage will show this new assignment with a downloadable link,
 where the student can download the assignment and start working on the
 new assignment.
 Later, when students have finished the assignment, the solution can be
 uploaded to the system manually or directly pushed into the system using
 a Git, client, based on the lecture type.
 Then the teacher can start reviewing them.
 When the evaluation has been successfully saved into the system, the student
 will get the results at the course homepage.
\end_layout

\begin_layout Subsection
Communication system
\end_layout

\begin_layout Subsubsection
Forum
\end_layout

\begin_layout Standard
The HMS system has a standard client-server structure, where in both the
 client and server communicate with each other over the internet using HTTP
 protocol
\begin_inset CommandInset citation
LatexCommand cite
key "daa"

\end_inset

.
 HTTP has a typical “Request-Response” pattern; the web client sends a request
 to the web server, and the web server serves a response according to the
 web client request.
 It is a simple but powerful solution to provide a two-way conversation
 for two parties over one channel
\begin_inset CommandInset citation
LatexCommand cite
key "Hohpe2012"

\end_inset

.
 The forum function within the HMS system works also along this pattern.
\end_layout

\begin_layout Subsubsection
Instant message
\begin_inset CommandInset label
LatexCommand label
name "sub:b.-Instant-message"

\end_inset


\end_layout

\begin_layout Standard
The standard HTTP protocol, however, is not suited for the instant message
 system, because of the Request-Response message pattern, wherein the user
 has to manually ask for a content upgrade.
 But an instant message system needs to automatically update the chat contents
 on both sides of a conversation while a new message has been added
\begin_inset CommandInset citation
LatexCommand cite
key "day2000model"

\end_inset

.
 Therefore, a full-duplex communication system, “WebSocket”
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla"

\end_inset

 will be used to back up the message module.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Websocket-message-pattern"

\end_inset

 illustrates a simple scenario of a dialog based on WebSocket.
 After logging into their HMS account, user A and user B are both connected
 to the HMS web socket server.
 Later on, user A sends a new message to user B.
 First, the request from user A passes to the WebSocket server, the server
 processes the request accordingly and serves the response not only to user
 A but also automatically to user B, ensuring both sides of the conversation
 can have their message received in real time.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/message.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Web socket message pattern
\begin_inset CommandInset label
LatexCommand label
name "fig:Websocket-message-pattern"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Specific functions
\end_layout

\begin_layout Standard
There are three major problems in other homework management platforms:
\end_layout

\begin_layout Enumerate
Management of file submission
\end_layout

\begin_layout Enumerate
Centralized data persistent (single database)
\end_layout

\begin_layout Enumerate
Complicated backup process
\end_layout

\begin_layout Standard
The first problem is the management of the student’s submission, because,
 besides simply uploading the file to the server, there will usually be
 more functions that need to be added to support different needs related
 to hand-in homework.
 For instance, the documentation of moodle has suggested several submission
 types related to file submission
\begin_inset CommandInset citation
LatexCommand cite
key "documoodle"

\end_inset

:
\end_layout

\begin_layout Enumerate
Student submits work and the teacher downloads it later 
\end_layout

\begin_layout Enumerate
Student submits work multiple times
\end_layout

\begin_layout Enumerate
Student submits work with a response
\end_layout

\begin_layout Standard
And the teacher needs to set several settings to make these types work properly,
 which introduces unnecessary extra cost not only for development but also
 for the user of the system.
 On the other hand, the teachers may need to trace the work history to comprehen
d the work of students (avoiding plagiarism), which is not provided by the
 current system.
\end_layout

\begin_layout Standard
The second and third problems are related to each other, because all the
 data is persistent in a single database, and the backup procedure is complicate
d and time-consuming.
 All these platforms, including HMS, are designed for a faculty of a university.
 Once in a while the faculty need to archive or backup the old data from
 the past semester.
 A possible way is to query out all the related data based on the semester,
 then dump these data into a file and save the course-related files somewhere
 else.
 Moodle also uses this approach to make a course backup
\begin_inset CommandInset citation
LatexCommand cite
key "moodlebackup"

\end_inset

.
 Since the amount of data will increase rapidly after years of usage, this
 approach can only consume more time.
\end_layout

\begin_layout Standard
The HMS has introduced two new approaches to avoid the problems from above:
\end_layout

\begin_layout Enumerate
Git-based file submission
\end_layout

\begin_layout Enumerate
Dynamic data management
\end_layout

\begin_layout Standard
These two methods will be introduced and described in the rest of this section.
\end_layout

\begin_layout Subsection
Submission management using Git
\begin_inset CommandInset label
LatexCommand label
name "sub:Submission-management"

\end_inset


\end_layout

\begin_layout Standard
Instead of uploading a file to a simple folder on the server, the students
 will obtain a Git
\begin_inset CommandInset citation
LatexCommand cite
key "GitOfficial"

\end_inset

 repository when they first enter the course.
 Using a Git repository that is different than a normal file folder has
 several advantages: First, the implementation of different submission types
 is not needed anymore and don’t need users to set extra settings.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/git.jpg
	scale 270

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Workflow of File Submission using Git
\begin_inset CommandInset label
LatexCommand label
name "fig:Workflow-of-git"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Workflow-of-git"

\end_inset

 shows the use case for all submission types
\begin_inset CommandInset citation
LatexCommand cite
key "documoodle"

\end_inset

 when using the Git repository.
 No matter what submission type was chosen by the user, the only difference
 is how many commitments were made.
 Especially by the submission type ”upload solution multiple times”.
 Since the nature of a Git repository is to track the history of all file
 changes, the teacher can easily review all the changes that were made between
 the uploads with any Git client.
 Second of all, using a Git repository in a “Type II” course is more convenient
 forstudents and teachers to manage the project, since the assignment of
 “Type II” course is usually a semester project, the students can use this
 repository to host their project directly on the HMS so that the teacher
 won’t need to set up an extra Git server for students.
\end_layout

\begin_layout Standard
Since there are two types of courses (Figure: 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

), the Git repository will also work under two modes to fit the property
 of the course
\begin_inset CommandInset label
LatexCommand label
name "git-working-modes"

\end_inset

:
\end_layout

\begin_layout Enumerate
Local modes (for 
\begin_inset Quotes sld
\end_inset

Type I
\begin_inset Quotes srd
\end_inset

 course)
\end_layout

\begin_layout Enumerate
Remote modes (for 
\begin_inset Quotes sld
\end_inset

Type II
\begin_inset Quotes srd
\end_inset

 course)
\end_layout

\begin_layout Subsubsection
Local modes
\end_layout

\begin_layout Standard
For the “Type I” course students will get different assignments throughout
 the whole semester, and every assignment needs to be evaluated individually,
 so the repository should have a proper file structure to distinguish the
 student submissions based on the assignment.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Repository-file-structure-local"

\end_inset

 shows the file structure inside the local Git repository.
 With this file structure, the teacher can manage the student submissions
 more efficiently.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Repository local.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
File structure of a repository in local modes
\begin_inset CommandInset label
LatexCommand label
name "fig:Repository-file-structure-local"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to maintain this file structure and avoid introducing unnecessary
 errors, the address of the Git repository is hidden from the student.
 Furthurmore students don’t have access rights to the repository at all;
 they can only use the course homepage to upload their solutions.
\end_layout

\begin_layout Subsubsection
Remote modes
\end_layout

\begin_layout Standard
For the ”Type II” course students will obtain the repository address and
 its full access rights as soon as they join the course, and use this repository
 to host their semester project.
 This part works similarly to using a remote repository.
 Students can push the changes from their local machine directly into the
 HMS server, without logging into the HMS system.
\end_layout

\begin_layout Subsection
Automatic evaluation
\begin_inset CommandInset label
LatexCommand label
name "sub:Automatic-Evaluation"

\end_inset


\end_layout

\begin_layout Standard
Until now, evaluating a submission from a student requires a teacher or
 assistant first to check out the repository of a student using a Git client
 and make an evaluation before logging into the HMS system using the function
 described in Section
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Assignment-management"

\end_inset

 to register the score of the student.
 Constantly switching between two working systems is not only inconvenient
 but can also easily introduce errors when registering points.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

List<Class> entity1 = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

        entity1.add(Semesteruser.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(Assignment.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(Lecture.class);//+1 Test OK
\end_layout

\begin_layout Plain Layout

        entity1.add(Message.class);//1 Test OK
\end_layout

\begin_layout Plain Layout

        entity1.add(Repo.class);//-1 Test Not OK
\end_layout

\begin_layout Plain Layout

        entity1.add(Evaluation.class);//Test OK +1
\end_layout

\begin_layout Plain Layout

        entity1.add(Handin.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(ForumThread.class);//Test OK 1
\end_layout

\begin_layout Plain Layout

        entity1.add(ForumPost.class);
\end_layout

\begin_layout Plain Layout

        entity1.add(Conversation.class);//Not Test -1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Evaluation of a submission
\begin_inset CommandInset label
LatexCommand label
name "fig:Evaluation-of-Submission"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The second advantage of using Git to manage the submission is that it makes
 the process of registering the points and comments fully automatic and
 avoids the situation of changing the working system.
 Based on the results of interviewing the colleagues of the software engineering
 faculty, the common behavior of reviewing and evaluating a student submission
 is to add comments at the end of a line as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evaluation-of-Submission"

\end_inset


\end_layout

\begin_layout Standard
If the reviewer commits the changes, these changes can be easily retrieved
 by comparing the student’s submission and its reviewed version made by
 the reviewer using Git command 
\begin_inset listings
lstparams "language=bash,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

git diff
\end_layout

\end_inset

 and the results will be saved in Unified Diff Format
\begin_inset CommandInset citation
LatexCommand cite
key "GNUDiff"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/unidiff.jpg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unified Diff Format 
\begin_inset CommandInset label
LatexCommand label
name "fig:Unified-Diff-Format"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unified-Diff-Format"

\end_inset

 shows the changes made by the reviewer in Unified Diff Format.
 The two-line header which starts with symbols 
\series bold
\shape italic
\emph on

\begin_inset Quotes sld
\end_inset

- - -
\begin_inset Quotes srd
\end_inset


\shape default
 
\series default
\emph default
and 
\series bold
\emph on

\begin_inset Quotes sld
\end_inset

+ + +
\begin_inset Quotes srd
\end_inset


\series default
\emph default
 indicate the changes that have been made in the file 
\shape italic
java1.java
\shape default
.
 The next line shows the exact change location of the files, and, in this
 case, the changes begin from line 61 to the next 14 lines.
 The line begins with symbols 
\series bold
\emph on

\begin_inset Quotes sld
\end_inset

-
\begin_inset Quotes srd
\end_inset


\series default
\emph default
 and 
\series bold
\emph on

\begin_inset Quotes sld
\end_inset

+
\begin_inset Quotes srd
\end_inset


\series default
\emph default
 contains the actual difference between the two versions
\begin_inset CommandInset citation
LatexCommand cite
key "GNUDiff"

\end_inset

.
\end_layout

\begin_layout Standard
The Unified Diff Format can be easily parsed based on these specific symbols,
 so that the actual changes made by the reviewer can be extracted.
 After analyzing the comments made by the reviewer, most of the comments
 have the following formats:
\end_layout

\begin_layout Enumerate
//points text
\end_layout

\begin_layout Enumerate
//text points
\end_layout

\begin_layout Standard
The comments either start with a number or end with a number, using the
 regular expression, the points can be collected programmatically.
 This makes the automatic evaluation possible.
 The only precondition is that the reviewer has to commit the changes based
 on the submissions from students, and using the comments format from above,
 so that the points can be automatically collected by the system and registered
 into the database without logging into the system.
\end_layout

\begin_layout Subsection
Dynamic data management 
\begin_inset CommandInset label
LatexCommand label
name "sub:Dynamic-data-management"

\end_inset


\end_layout

\begin_layout Standard
To do a backup or achieve the whole process as easily as possible, the HMS
 system introduced a new approach to manage the data.
 First of all, the HMS system uses multiple databases instead of one central
 database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/database.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Multiple databases based on semester
\begin_inset CommandInset label
LatexCommand label
name "fig:multiple-database"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:multiple-database"

\end_inset

 shows the database structure in the HMS system.
 The global database contains all the authentication data including ssh
 public keys, user names, user emails, user role and passwords.
 This database is only used for the user management (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:User-management"

\end_inset

).
 Another database is the semester database.
 Since the data structure of every semester is the same, the data model
 for each semester can be reused in every new semester.
 Every time a new semester begins, a new clean database for this semester
 will be generated using the same data structure in real time.
 Therefore, in this case, there is no need to query the semester data to
 back up the database.
\end_layout

\begin_layout Standard
Also, the database in this project should work under the embedded modes
 using file storage.
 The embedded database runs directly in the application that uses them,
 and it requires no extra server and no maintenance for the database itself.
 Another advantage of the embedded database is the speed, because all the
 database operations happen inside the application process
\begin_inset CommandInset citation
LatexCommand cite
key "Chaudhri2003"

\end_inset

.
 Since all the relevant data of the database are saved in a single file,
 backing up the semester database only means copying the database file somewhere
 else.
\end_layout

\begin_layout Standard
In this project, the H2
\begin_inset CommandInset citation
LatexCommand cite
key "H2Offi"

\end_inset

 database engine will be used as the default database engine.
 First, H2 supports the embedded mode (file storage) and it is purely written
 in java.
 Another reason is that the H2 database supports a mixed mode (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Mixed-Mode-of-h2"

\end_inset

); that is, a combination of the embedded mode and the server mode.
 The first application (in this case, the HMS) will use the database as
 an embedded mode, but it also starts a server so that the other application
 (a SQL query tool) can still side-load the database.
 A normally embedded database runs within the application, so it is hidden
 from the end user
\begin_inset CommandInset citation
LatexCommand cite
key "Chaudhri2003"

\end_inset

, and so there is no way the user can side-load the database.
 But in real life, maintaining the HMS system directly accessing and manipulatin
g the database using a SQL query tool is sometimes more efficient than the
 usual routine.
 It is also important to notice that if the application is shut down, the
 server mode will also close all the connections
\begin_inset CommandInset citation
LatexCommand cite
key "h2database"

\end_inset

, and therefore, side-loading a database using remote mode can only take
 place when the HMS is still running.
 However the database file generated by the H2 engine can still be loaded
 from the H2 web-based managing tools without needing the HMS system to
 be online.
 This feature is especially important for an archived H2 database, meaning
 that all the contents of the database can still be freely accessed without
 extra work 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/connection-mode-mixed-2.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Mixed Mode of h2 server
\begin_inset CommandInset citation
LatexCommand cite
key "h2database"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Mixed-Mode-of-h2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Besides backing up the database, the files from student submission and course
 materials should also be backed up at the same time.
 Using a unified file saving structure can make this process easier.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/Semester 1.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Semester file structure
\begin_inset CommandInset label
LatexCommand label
name "fig:Semester-file-structure"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

 shows the file structure for one semester.
 The uploaded course materials and student’s repository are saved with the
 database file under the same folder.
 Using a clear file structure to host the uploaded files along with the
 commit history of the student’s repository can help the maintainer of the
 system more easily distinguish the files without looking into the database.
 Combine these two methods, and the backup procedure of the HMS system only
 needs the maintainer to relocate the semester folder, without doing any
 database operation.
\end_layout

\begin_layout Standard
This approach requires the system to create a database in the runtime.
 Therefore the standard database configuration of Playframework cannot be
 used.
 The details of implementing dynamic data management will be demonstrated
 in the next chapter.
\end_layout

\begin_layout Chapter
Implementations
\end_layout

\begin_layout Standard
In this chapter the concrete implementation including used tools, extra
 library and also the methodology to fulfill the requirements of the functions
 from Chapter 3 will be presented.
 Because the data persistent and management are preconditions for other
 functions to work, they are the key features of the HMS system.
 The implementation of dynamic data management and Git-based file submission
 will be discussed first.
\end_layout

\begin_layout Section
Dynamic data management
\end_layout

\begin_layout Standard
Dynamic data management consists of two parts: First, the HMS system can
 dynamically generate a new database every time a new semester starts, so
 that the created database will only contain the data related to that semester.
 Second the physical files, including the students’ submissions and the
 course materials, are saved under a unified structure (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

), so that the usage of each file can be easily determined without involving
 the database.
\end_layout

\begin_layout Subsection
Realtime database generation
\end_layout

\begin_layout Standard
The HMS system is based on the Playframework and Playframework uses Ebean
\begin_inset CommandInset citation
LatexCommand cite
key "ebeanOffi"

\end_inset

 ORM to access the database.
 ORM is a technique to convert objective-oriented programming language (in
 this case, Java) into its persistence as a relational database, so the
 data can freely exchange between a java object and database table
\begin_inset CommandInset citation
LatexCommand cite
key "K2009"

\end_inset

.
 By default the configuration of Ebean and the database are done by editing
 the configuration file of Playframework (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Database-configuration"

\end_inset

).
 The developer needs to define the details of a database and define the
 java data model for a specific Ebean server, which will handle all the
 database operations.
 After the application has been started, there is not away to modify this
 configuration again in the run time.
 Therefore, this method cannot be used.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

# Database configuration
\end_layout

\begin_layout Plain Layout

# You can declare as many datasources as you want.
\end_layout

\begin_layout Plain Layout

# By convention, the default datasource is named `default`
\end_layout

\begin_layout Plain Layout

# db.default.driver=org.h2.Driver
\end_layout

\begin_layout Plain Layout

# db.default.url="jdbc:h2:file:~/data/playdb"
\end_layout

\begin_layout Plain Layout

# db.default.user=sa
\end_layout

\begin_layout Plain Layout

# db.default.password=""
\end_layout

\begin_layout Plain Layout

# Ebean configuration
\end_layout

\begin_layout Plain Layout

# You can declare as many Ebean servers as you want.
\end_layout

\begin_layout Plain Layout

# By convention, the default server is named `default`
\end_layout

\begin_layout Plain Layout

# ebean.default="models.*"
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Database configuration in Playframework
\begin_inset CommandInset label
LatexCommand label
name "fig:Database-configuration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to dynamically manage the database, all of the configuration has
 to be done programmatically.
 Ebean supports database configuration programmatically.
 But it still needs a little modification to make it compatible with Playframewo
rk.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static void createServer(String name, List<Class> entity) {
\end_layout

\begin_layout Plain Layout

    ServerConfig config = new ServerConfig();
\end_layout

\begin_layout Plain Layout

    config.setName(name);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    DataSourceConfig h2Db = new DataSourceConfig();
\end_layout

\begin_layout Plain Layout

    h2Db.setDriver("org.h2.Driver");
\end_layout

\begin_layout Plain Layout

    h2Db.setUsername("hms");
\end_layout

\begin_layout Plain Layout

    h2Db.setPassword("test");
\end_layout

\begin_layout Plain Layout

    h2Db.setUrl("jdbc:h2:tcp://localhost/~/data_dynamic/" + name + "/" +
 name)
\end_layout

\begin_layout Plain Layout

    config.setDataSourceConfig(h2Db);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Path p= Paths.get(System.getProperty("user.home"),"data_dynamic",name,name+".h2.d
b");
\end_layout

\begin_layout Plain Layout

    File f = p.toFile();
\end_layout

\begin_layout Plain Layout

    if(f.exists()){
\end_layout

\begin_layout Plain Layout

    config.setDdlGenerate(false);
\end_layout

\begin_layout Plain Layout

    config.setDdlRun(false);}
\end_layout

\begin_layout Plain Layout

    else
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

    config.setDdlGenerate(true);
\end_layout

\begin_layout Plain Layout

    config.setDdlRun(true);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    for(int i=0;i<entity.size();i++){
\end_layout

\begin_layout Plain Layout

    config.addClass(entity.get(i));
\end_layout

\begin_layout Plain Layout

    EbeanServer server = EbeanServerFactory.create(config);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Create an Ebean server in run time
\begin_inset CommandInset label
LatexCommand label
name "fig:Create-Ebean-Server-runtime"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Create-Ebean-Server-runtime"

\end_inset

 is a static method which creates an Ebean server in run time.
 This method needs two parameters as input: First is the name of the database,
 usually the name of a semester, for instance, “WS2016 “.
 Second is a list of java class, which contains all the java data model
 that is related to this database.
 Ebean needs to use this to create the table for the database.
 The configuration of the Ebean server and database is straitforward: After
 setting all the parameters to the Ebean server and data source, the Ebean
 server will be created by the class “EbeanServerFactory”.
 In the HMS, the decision to create a new database is made when the teacher
 creates a new course.
 Creating a new course needs the teacher to give the name of the semester.
 After creating the new course, the request is sent to the server.
 The server will first check whether this semester was already registered
 in the semester table of the global database.
 If it is already registered, the course will be simply saved to that semester
 database.
 If the input semester cannot be found in the global database, a new database
 with the input semester name will be first created, then the new course
 will be written in this database.
 After finishing, the part of creating a database in run time must be done.
 There is only one thing to be added to make it work with Playframework.
 Since the databases are configured during the run time, when the application
 is restarted, it will not restore those databases automatically, because
 the Playframework was originally designed to use the configuration file
 to track the database configuration, and in this case the configuration
 file is empty.
 The workaround for this issue is to track the database file, and reload
 all these databases before the application has restarted.
 Playframework has already provided a method to do some actions before actually
 starting the application, and this can be used to reload the database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public class Global extends GlobalSettings{
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void onStart(Application application) {
\end_layout

\begin_layout Plain Layout

        super.onStart(application);
\end_layout

\begin_layout Plain Layout

        List<Class> entity = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

        entity.add(User.class);
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

        entity.add(SSH.class);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        List<Class> entity1 = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

        entity1.add(Semesteruser.class);
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

        entity1.add(Conversation.class);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            Server h2server = Server.createTcpServer("-tcpAllowOthers");
\end_layout

\begin_layout Plain Layout

            h2server.start();
\end_layout

\begin_layout Plain Layout

        } catch (SQLException e) {
\end_layout

\begin_layout Plain Layout

            e.printStackTrace();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

        createServer("global", entity);
\end_layout

\begin_layout Plain Layout

        List<Semester> database == Semester.getallsemester();
\end_layout

\begin_layout Plain Layout

        for (int i = 0; i < database.size(); i++) {
\end_layout

\begin_layout Plain Layout

          createServer(database.get(i).semester, entity1);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Reload the database at application start 
\begin_inset CommandInset label
LatexCommand label
name "fig:Reload-the-database"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reload-the-database"

\end_inset

 demonstrates the process of reloading the database.
 List 
\shape italic
\size footnotesize
entity
\shape default
\size default
 contains the data model for the “global” database and List 
\shape italic
\size footnotesize
entity1
\shape default
\size default
 contains the data model for the ”semester” database (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:multiple-database"

\end_inset

), the global database will be first reconstructed, because the name of
 the other semester database is saved within the global database, which
 then using a loop to reconstruct other semester databases.
 It also should be noticed that between the lines of 12 and 21 in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Create-Ebean-Server-runtime"

\end_inset

, there are additional implementations of database file detection.
 If the database file is present, the Ebean server should not regenerate
 table relations because this action will erase all the data previously
 saved within this database.
 
\end_layout

\begin_layout Standard
It also should be noticed that, because there are multiple databases, the
 name of the database should always be given every time when there is a
 CRUD (Create, Read, Update, Delete) operation that has taken place; for
 instance, saving a new course to the semester ”WS2016”, should look like:
 
\begin_inset listings
lstparams "language=Java,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

newcourse.save("WS2016");
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection
Data models
\end_layout

\begin_layout Standard
There are two types of databases in HMS: One is a global database, used
 for authenticating and tracking the information of newly created semester
 databases and lecture repositories of students.
 Another is the semester database, which saves all the data relating to
 the course, assignments, evaluations and communications.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/globaldatabase-diagram.svg
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Global database 
\begin_inset CommandInset label
LatexCommand label
name "fig:Data-models-for-global"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Data-models-for-global"

\end_inset

 shows the data model for the global database.
 There are four tables defined.
 The first are the 
\shape italic
Users
\shape default
, which saves all the data from the user registration, for instance, the
 user ID, email address, password, et cetera.
 Second is the 
\shape italic
SSH
\shape default
, which saves all the ssh keys for the user, and because one user may have
 multiple ssh keys, there is a “One-To-Many ” relation between the 
\shape italic
Users
\shape default
 and 
\shape italic
SSH
\shape default
.
 The third is 
\shape italic
Semesters
\shape default
, containing all the names of the already created semester database.
 The last one is 
\shape italic
Tokens
\shape default
, used to temporarily save the confirmation token for registration, change
 email and password actions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset Graphics
	filename images/semesterdatabase-model.svg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Semester database 
\begin_inset CommandInset label
LatexCommand label
name "fig:Data-models-for-semester"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Data-models-for-semester"

\end_inset

 represents the data models of the semester database.
 First is the Lecture, all the activities around the homework management
 is about the lecture.
 A lecture includes assignment (Assignment), Git repositories (Repos), a
 forum (Thread) and the lecture evaluation (Evaluation) for students.
 And each assignment contains a lot of hand-ins (Handins) from the students.
 Besides the lecture-related data, the data of the chat system is semester-relat
ed and independent from the lecture.
 At last, all these data are related to the 
\shape italic
Semesteruser
\shape default
.
\end_layout

\begin_layout Standard

\shape italic
Semesteruser
\shape default
 and 
\shape italic
User
\shape default
 are both subclass extensions from super class Abstractuser as shown in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Class-Diagram-Semesteruser"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/userclassmodel.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Class Diagram Semesteruser 
\begin_inset CommandInset label
LatexCommand label
name "fig:Class-Diagram-Semesteruser"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ebean supports the JPA (Java Persistence API)
\begin_inset CommandInset citation
LatexCommand cite
key "JPAOffi"

\end_inset

 annotation “@MappedSuperclass”.
 This annotation designates a class whose mapping information is applied
 to the classes that inherit from it, but will not be able to be generated
 for the mapped superclass itself
\begin_inset CommandInset citation
LatexCommand cite
key "objectdbjpa"

\end_inset

.
 The common data, which will be used both for User and Semesteruser, are
 defined in the class “Abstractuser ”, and the database-specific data will
 be defined in the subclass.
 The field variable of the User class is related to the authentication data,
 for instance, the passwords and ssh keys.
 On the other hand, the Semesteruser class contains only the data related
 to the lecture activities.
 Using this method can first avoid redundant code, and second, the semester
 data can be completely separate from the other data.
 When a registered user wants to sign up for a new course in a semester,
 the common user information (e.g.
 user ID and email address) should be first transformed from the “User ”
 to “Semesteruser ”.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Semesteruser getSemesteruserfromUser(String database,User
 user){
\end_layout

\begin_layout Plain Layout

        Semesteruser semesteruser = null;
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            semesteruser = Semesteruser.findByEmail(user.email, database);
\end_layout

\begin_layout Plain Layout

        } catch (Exception e) {
\end_layout

\begin_layout Plain Layout

            semesteruser = null;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (semesteruser == null) {
\end_layout

\begin_layout Plain Layout

            semesteruser = new Semesteruser();
\end_layout

\begin_layout Plain Layout

            semesteruser.email = user.email;
\end_layout

\begin_layout Plain Layout

            semesteruser.firstname = user.firstname;
\end_layout

\begin_layout Plain Layout

            semesteruser.id = user.id;
\end_layout

\begin_layout Plain Layout

            semesteruser.lastname = user.lastname;
\end_layout

\begin_layout Plain Layout

            semesteruser.roles = user.roles;
\end_layout

\begin_layout Plain Layout

            semesteruser.userHash=user.userHash;
\end_layout

\begin_layout Plain Layout

            semesteruser.semester = database;
\end_layout

\begin_layout Plain Layout

            semesteruser.save(database);
\end_layout

\begin_layout Plain Layout

            return semesteruser;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        else{
\end_layout

\begin_layout Plain Layout

            return semesteruser;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
User To Semesteruser
\begin_inset CommandInset label
LatexCommand label
name "fig:User-To-Semesteruser"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:User-To-Semesteruser"

\end_inset

 shows, when a user wants to sign up for a course, the system will first
 find their Semesteruser information.
 If the Semesteruser object for the current user was not found, a new Semesterus
er object will be generated in the semester database based on the user informati
on from the global database.
 Using this method can keep the amount of data of the Semesteruser in each
 semester database as small as possible.
\end_layout

\begin_layout Subsection
File structure
\begin_inset CommandInset label
LatexCommand label
name "sub:File-structure"

\end_inset


\end_layout

\begin_layout Standard
Besides the database design, the semester-related files should also be saved
 under a unified structure (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

).
 Defining the upload path within the Playframework is straitforward: After
 the file is uploaded to the server, the file can be moved to the desired
 location by the method 
\begin_inset listings
lstparams "language=Java,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

FileUtils.moveFile();
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Saving the course repository of students is a little complicated.
 The HMS system using the Gitolite
\begin_inset CommandInset citation
LatexCommand cite
key "GitoliteOffi"

\end_inset

 to manage the Git repository and repository created by the Gitolite is
 bare repository which doesn’t contain a working directory
\begin_inset CommandInset citation
LatexCommand cite
key "gitscm"

\end_inset

, so it is pointless to just copy a bare repository to another place.
 Also the Gitolite has its own file structure and cannot be changed.
 So, a possible way is using Git Java API JGit
\begin_inset CommandInset citation
LatexCommand cite
key "jgitguide"

\end_inset

 to make a clone of this bare repository to the desired destination.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

Repo repo=Repo.findRepoByLectureAndOwner(assignment.semester,semesteruser,assignme
nt.lecture);
\end_layout

\begin_layout Plain Layout

Git git = Git.cloneRepository();
\end_layout

\begin_layout Plain Layout

    git.setURI(repo.repofilepath)
\end_layout

\begin_layout Plain Layout

    git.setDirectory(localPath)
\end_layout

\begin_layout Plain Layout

    git.call();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Clone repository using JGit 
\begin_inset CommandInset label
LatexCommand label
name "fig:Clone-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clone-repository"

\end_inset

 shows the use of JGit
\begin_inset CommandInset citation
LatexCommand cite
key "jgitguide"

\end_inset

 to clone a bare repository from Gitolite to a “local path”, which fits
 the file structure of HMS.
 This procedure also makes submission of a file to Gitolite repository possible.
 The detailed usage of Gitolite will be closely discussed in the next section.
\end_layout

\begin_layout Section
Integration of Git
\begin_inset CommandInset label
LatexCommand label
name "sec:Integration-of-Git"

\end_inset


\end_layout

\begin_layout Standard
The implementation of this function should consider following requirements:
\end_layout

\begin_layout Enumerate
Access control: students can only have access to their own repository, and
 the teacher or assistant of the course can fully access the student’s repositor
y when needed
\end_layout

\begin_layout Enumerate
Local and remote modes: to support two types of course (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

)
\end_layout

\begin_layout Standard
The most important requirement is the access control over the Git repository.
 Because Git by itself does not do any access control, it relies on the
 transport medium (authentication of the HMS system) to do authentication,
 and file permissions of the operation system to do authorization (read
 or write permission)
\begin_inset CommandInset citation
LatexCommand cite
key "gitolitedocu"

\end_inset

.
 Without proper access control over the Git repository, it is then impossible
 to integrate the Git into the HMS.
 Since the basic needs of managing homework are to keep the students’ submission
s only between the marker and students themselves.
\end_layout

\begin_layout Standard
The first part of this section will present a method using Gitolite
\begin_inset CommandInset citation
LatexCommand cite
key "GitoliteOffi"

\end_inset

 and Java-Gitolite-manager
\begin_inset CommandInset citation
LatexCommand cite
key "GitoliteManagerOffi"

\end_inset

 to solve the access control problem of Git repository.
 And the usage of Git repository for both course types will be introduced
 in the other part of this section.
\end_layout

\begin_layout Subsection
Access control using Gitolite
\end_layout

\begin_layout Standard
Access control over the student’s repository is pretty simple.
 As Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Access-rights-for-differentuser"

\end_inset

 shows, only the students themselves have full access rights to their course
 repository.
 Teachers and assistants have to grant access rights before evaluation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="middle" width="4cm">
<column alignment="center" valignment="middle">
<column alignment="center" valignment="middle">
<row>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Repository 
\begin_inset Newline newline
\end_inset

Access level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Student
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other Student
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teacher
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assistant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
●
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
○
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Access level for different user 
\begin_inset CommandInset label
LatexCommand label
name "fig:Access-rights-for-differentuser"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This access rule can be easily managed by Gitolite.
 After properly installing the Gitolite in the server, it will generate
 a “gitlite-admin” repository under current user’s home folder.
 Within this folder there is a plain text file, which will be used by Gitolite
 to specify the access rules.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

repo foo
\end_layout

\begin_layout Plain Layout

 RW = alice bob
\end_layout

\begin_layout Plain Layout

 R  = carol david
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Configuration of access rules with Gitolite
\begin_inset CommandInset label
LatexCommand label
name "fig:configuration-gitolite"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:configuration-gitolite"

\end_inset

 is a simple configuration of the access rules for the repository “foo”.
 For this repository, Alice and Bob both have read and write access, but
 Carol and David can only read the content of the repository.
 The server maintainer only needs to modify this configuration file and
 push the changes using a Git command back to the Gitolite, and all of the
 changes will have been adopted automatically by Gitolite.
 Additionally, the ssh public keys of the user of this repository are also
 needed to be copied into “Gitolite-admin” repository, since Gitolite use
 the ssh mechanism to authenticate the user.
\end_layout

\begin_layout Subsubsection
Java-Gitolite-Manager
\end_layout

\begin_layout Standard
Gitolite gives the possibility to add access control to Git repository,
 but it still needs a system maintainer to edit the configuration file manually.
 Therefore, it still can not be directly used in the HMS system.
 Delft University of Technology has developed a java library, which enables
 developers to manage the Gitolite configuration directly from Java.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

ConfigManager manager = ConfigManager.create("/home/gitolite-admin");
\end_layout

\begin_layout Plain Layout

Config config = manager.get();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

User user = config.createUser("alice");
\end_layout

\begin_layout Plain Layout

user.setKey("desktop", "ssh-rsa AAAB3Nz...");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

config.createRepository("foo")
\end_layout

\begin_layout Plain Layout

    .setPermission(user, Permission.ALL);
\end_layout

\begin_layout Plain Layout

manager.apply();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gitolite configuration from Java
\begin_inset CommandInset label
LatexCommand label
name "fig:onfiguration-from-java"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:onfiguration-from-java"

\end_inset

 is an example of how to use ”Java-Gitolite-Manager” to configure the Gitolite
 from Java.
 First, an instance of 
\shape italic
ConfigManager
\shape default
 is created with the path of repository “Gitolite-admin”, then a user with
 user name “Alice” is created alone with the ssh public key of user Alice.
 After the user has been created, a new repository “foo” will also be created
 and user Alice will be added to this repository with full permission granted.
 
\end_layout

\begin_layout Standard
The HMS system uses the same procedure as the example in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:onfiguration-from-java"

\end_inset

, every time a student joins a course, no matter what this course type is,
 a repository will be generated for this student if the ssh public of this
 student is present.
 If the teacher needs to access the student’s repository, the HMS system
 will first get out the repository and set a correct permission for teacher
 use, 
\begin_inset listings
lstparams "language=Java,basicstyle={\footnotesize}"
inline true
status open

\begin_layout Plain Layout

setPermission(teacher, Permission.ALL);
\end_layout

\end_inset

.
 Then teacher can clone this repository remotely.
\end_layout

\begin_layout Subsection
Local mode
\end_layout

\begin_layout Standard
Under local mode, students need to use the course homepage to upload their
 solutions and the actual repository address is hidden from the student.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Homework-submission-for-local"

\end_inset

 shows the homework submission part for the course under local mode.
 The gray dot above shows the current status of the repository, under the
 indicator of repository status, is the homework area, where a student can
 download the assignment’s material and use the predefined actions: commit
 and revert.
\end_layout

\begin_layout Standard
The left icon under the action column is used for uploading the solutions.
 The icon on the right is the predefined action for deleting the last submission
; students can use this to revert their last submission.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/new local modes.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Homework submission for course under local mode 
\begin_inset CommandInset label
LatexCommand label
name "fig:Homework-submission-for-local"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The repository created by Gitolite is a bare repository.
 A bare repository is a named file directory with a “.git” suffix which contains
 only the administrative and control files of the repository, and it doesn’t
 have any copy of the files that present in a normal Git repository
\begin_inset CommandInset citation
LatexCommand cite
key "loeliger2006collaborating"

\end_inset

.
 The student’s submission then cannot be directly uploaded to this repository.
 Also, the HMS system requires a unified file structure to save the physical
 files.
 The solution to this problem is using JGit to clone the bare repository
 to a normal repository at a desired location on the server.
\end_layout

\begin_layout Subsubsection
JGit
\end_layout

\begin_layout Standard
JGit is a Java library for working with Git repository.
 With JGit all the operations for a Git repository can be realized from
 Java
\begin_inset CommandInset citation
LatexCommand cite
key "jgitguide"

\end_inset

.
 Besides cloning the bare repository presented in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clone-repository"

\end_inset

, the HMS system also needs to upload the students’ submission to the cloned
 repository and, using JGit, commit the changes and push the changes back
 to the Gitolite bare repository, so that the teacher can clone the student’s
 bare repository remotely.
\end_layout

\begin_layout Subsubsection
Commit
\begin_inset CommandInset label
LatexCommand label
name "sub:Commit"

\end_inset


\end_layout

\begin_layout Standard
After a student has chosen the commit action, a dialog (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Commit-dialog"

\end_inset

) will pop up.
 Using this form a student can upload their files with a commit message;
 if the commit message is empty, a default commit will be made by the HMS
 system.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/upload-assignment1.jpg
	scale 250

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Commit dialog 
\begin_inset CommandInset label
LatexCommand label
name "fig:Commit-dialog"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Commit-submission"

\end_inset

 shows what happened after the submission of a file and a commit message
 were passed onto the HMS system.
 First, the Gitolite bare repository will be cloned to the 
\shape italic
localPath
\shape default
.
 After the clone operation is finished, the uploaded file from the student
 will be copied into the newly created local repository.
 Then ,use JGit to commit the changes, and after that all the changes will
 be pushed through to the master branch of the Gitolite bare repository.
 In the end, a new “hand in” object will be generated and saved into the
 database under the name of the student.
 This object will be used to indicate that the student has submitted a solution
 that is ready to be evaluated.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result handinhomework(...){
\end_layout

\begin_layout Plain Layout

	try{
\end_layout

\begin_layout Plain Layout

	MultipartFormData body = request().body().asMultipartFormData();
\end_layout

\begin_layout Plain Layout

	FilePart homeworkfile = body.getFile("homeworkfile");
\end_layout

\begin_layout Plain Layout

	if (homeworkfile != null) {
\end_layout

\begin_layout Plain Layout

	    String fileName = homeworkfile.getFilename();
\end_layout

\begin_layout Plain Layout

	    Git git = Git.cloneRepository()
\end_layout

\begin_layout Plain Layout

	    git.setDirectory(localPath);
\end_layout

\begin_layout Plain Layout

	    
\end_layout

\begin_layout Plain Layout

	    FileUtils.moveFile(file, new File(localPath, des+fileName));
\end_layout

\begin_layout Plain Layout

	    git.add().addFilepattern(des+fileName).call();
\end_layout

\begin_layout Plain Layout

	    git.commit().setMessage(commit).setAuthor(...).call();
\end_layout

\begin_layout Plain Layout

	    RefSpec refSpec = new RefSpec("master");
\end_layout

\begin_layout Plain Layout

	    git.push().setRemote("origin").setRefSpecs(refSpec).call();
\end_layout

\begin_layout Plain Layout

	    git.getRepository().close();
\end_layout

\begin_layout Plain Layout

	    
\end_layout

\begin_layout Plain Layout

	    Handin handin= new Handin();
\end_layout

\begin_layout Plain Layout

	    handin.save(semester);}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Commit submission 
\begin_inset CommandInset label
LatexCommand label
name "fig:Commit-submission"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Delete Submission
\end_layout

\begin_layout Standard
If a student didn’t satisfy the first submission for an assignment, the
 last submission can also be deleted before the deadline.
 The procedure is almost the same as submission.
 As Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Delete-last-submission"

\end_inset

 shows, the local repository created by the submission action will be first
 updated to the latest state.
 Second, since the submission under the local modes are saved under a unified
 structure (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Repository-file-structure-local"

\end_inset

), the folder of relevant assignments will be deleted.
 In the end the delete action will also be committed by the HMS system and
 the changes will be pushed back to the Gitolite bare repository.
 Finally, the related hand in object from the submission will also be deleted
 and regenerate by the next submission action.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

 Git git = Git.cloneRepository();
\end_layout

\begin_layout Plain Layout

	String subfolder=assignment.title;
\end_layout

\begin_layout Plain Layout

	git.rm().addFilepattern(subfolder).call();
\end_layout

\begin_layout Plain Layout

	git.commit()
\end_layout

\begin_layout Plain Layout

    .setMessage(commit)
\end_layout

\begin_layout Plain Layout

    .setAuthor(semesteruser.lastname,semesteruser.email)
\end_layout

\begin_layout Plain Layout

    .call();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 Handin handin=Handin
\end_layout

\begin_layout Plain Layout

	.getHandinofassignmentofstudentinlecture();
\end_layout

\begin_layout Plain Layout

    if(handin!=null){
\end_layout

\begin_layout Plain Layout

    handin.delete(semester);}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Delete last submission 
\begin_inset CommandInset label
LatexCommand label
name "fig:Delete-last-submission"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Check out by Teacher
\begin_inset CommandInset label
LatexCommand label
name "sub:Check-out-byteacher"

\end_inset


\end_layout

\begin_layout Standard
After a student has submitted their solutions to the repository, teachers
 can check out the students’ repository for evaluation after granting access
 to the student’s repository.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/new eval page.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Checkout student repository 
\begin_inset CommandInset label
LatexCommand label
name "fig:Checkout-student-repository"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Checkout-student-repository"

\end_inset

 shows the user interface for evaluating students’ submissions.
 It shows the address of the student repository and its status, and whether
 the teacher already has access to this repository.
 If the user has already submitted a solution, the row of this user will
 be in the color green; otherwise it is red.
 The teacher can use the action button to choose an action towards the students
 repository.
 The student repository can be directly checked out into the Git client
 “Source tree”, or the teacher can just copy the address of the repository
 and check out in a favorite Git client.
\end_layout

\begin_layout Standard
The precondition of checkout for the student repository is to grant an access.
 When teacher press the “Grand Access” button, the method 
\shape italic
grandaccess()
\shape default
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Grand-access-to-studentsrepo"

\end_inset

 will be executed.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static boolean grandaccess(...) {
\end_layout

\begin_layout Plain Layout

if(!admincredential.sshs.isEmpty()
\end_layout

\begin_layout Plain Layout

    &&!studentrepo.owner.contains(currentadmin)) {
\end_layout

\begin_layout Plain Layout

    User teacher = config.ensureUserExists(teacher.id);
\end_layout

\begin_layout Plain Layout

    String reponame = lecture.courseName + "_" + student.id;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Repository repository = config.ensureRepositoryExists(reponame);
\end_layout

\begin_layout Plain Layout

    repository.setPermission(teacher, Permission.ALL);
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    manager.applyAsync(config);
\end_layout

\begin_layout Plain Layout

    studentrepo.owner.add(currentadmin);
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Grand access to student’s repository
\begin_inset CommandInset label
LatexCommand label
name "fig:Grand-access-to-studentsrepo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
First the ssh key of the teacher must be present, since Gitolite needs the
 ssh key to authenticate the user.
 Second, if the teacher already has access to this repository, the system
 should avoid running this method again.
 If the preconditions are fulfilled, the teacher will be added to the repository
 with full permission.
 Also the information about the teacher already has access to this repository,
 and will be saved into the database.
\end_layout

\begin_layout Subsection
Remote mode
\end_layout

\begin_layout Standard
Remote mode is much simpler than local mode.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remote-mode"

\end_inset

 shows the user interface of homework area in a 
\shape italic
Type II
\shape default
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

) course under remote mode.
 The address of Git repository will be directly given to the students.
 Students will use this repository to host their semester project, like
 using a normal remote Git repository.
 Thus, all the changes pushed by the student will be directly saved into
 the Gitolite bare repository, and an additionl clone action of the bare
 repository which is same as the submission action (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Commit-submission"

\end_inset

) in the local modes will be performed in order to maintain the unified
 file structure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/new remote page.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Remote mode 
\begin_inset CommandInset label
LatexCommand label
name "fig:Remote-mode"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Automatic evaluation
\end_layout

\begin_layout Standard
The common behavior of a reviewer rating a student’s submission is to add
 comments directly inside the file of a submission (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Automatic-Evaluation"

\end_inset

).
 And these comments can be extracted based on the information from the Unified
 Diff Format, and specific points inside these comments can be automatically
 collected and assigned, related to the hand-in of a student by HMS.
\end_layout

\begin_layout Standard
To achieve this goal, there are three problems that need to be dealt with:
\end_layout

\begin_layout Enumerate
HMS needs to be aware when a reviewer pushes an evaluation back to repository
 using a Git client.
\end_layout

\begin_layout Enumerate
The comments extracted from Unified Diff are actually made by the reviewer,
 not by students or anyone else.
\end_layout

\begin_layout Enumerate
Points are collected from the comments and the points are registered with
 the correct person and lecture.
\end_layout

\begin_layout Standard
The solution to these problems will be introduced in the rest of this section.
\end_layout

\begin_layout Subsubsection
Detect changes from repository
\end_layout

\begin_layout Standard
Although HMS already has the ability to make changes to Git repositories
 by using Gitolite, it cannot directly detect changes of the repository
 made outside of the system.
 Like when a reviewer pushes changes back to the repository directly using
 other Git clients, the HMS will not be aware of these changes.
 This is because the HMS using Gitolite to manage the access control over
 Git repositories and these repositories can be accessed remotely using
 ssh, which isn’t supported by the Playframework.
\end_layout

\begin_layout Standard
So the HMS system has to detect the changes of the repositories actively.
 One possible method is to poll the file system looking for changes.
 However, this approach cannot detect the changes in time and is inefficient.
 Another way is to use a native Java API “WatchService” from JDK 7
\begin_inset CommandInset citation
LatexCommand cite
key "JDKOffi"

\end_inset

.
 This API enables the system to register any directory with different change
 events, such as file deletion, file creation or file modification.
 When the watch service detects any of these events, they will be handled
 as needed.
 The Watch Service API can also take advantage of native file change notificatio
n implemented by the file system itself, so that polling the file system
 can be avoided
\begin_inset CommandInset citation
LatexCommand cite
key "JavaNio"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public class RepoWatcher implements Runnable {
\end_layout

\begin_layout Plain Layout

    public WatchService watchService;
\end_layout

\begin_layout Plain Layout

    public RepoWatcher(WatchService repowatcher){
\end_layout

\begin_layout Plain Layout

        this.watchService=repowatcher;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void run() {
\end_layout

\begin_layout Plain Layout

       try{
\end_layout

\begin_layout Plain Layout

           WatchKey key = watchService.take();
\end_layout

\begin_layout Plain Layout

           while(key!=null){
\end_layout

\begin_layout Plain Layout

           key.pollEvents();
\end_layout

\begin_layout Plain Layout

           Path dir=(Path)key.watchable();
\end_layout

\begin_layout Plain Layout

           GitEvaluation(dir.toString());       
\end_layout

\begin_layout Plain Layout

           key.reset();
\end_layout

\begin_layout Plain Layout

           key=watchService.take();
\end_layout

\begin_layout Plain Layout

           }
\end_layout

\begin_layout Plain Layout

       }catch (Exception e){
\end_layout

\begin_layout Plain Layout

           Logger.debug(e.getMessage());
\end_layout

\begin_layout Plain Layout

       }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Global extends GlobalSettings{
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void onStart(Application application) {
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            setWatchService();
\end_layout

\begin_layout Plain Layout

            RepoWatcher repoWatcher = new RepoWatcher(getWatchService());
\end_layout

\begin_layout Plain Layout

            Thread watchThread = new Thread(repoWatcher, "repoWatcherThread");
\end_layout

\begin_layout Plain Layout

            watchThread.start();
\end_layout

\begin_layout Plain Layout

        } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

            Logger.debug(e.getMessage());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
File Watch Service 
\begin_inset CommandInset label
LatexCommand label
name "fig:File-Watch-Service"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:File-Watch-Service"

\end_inset

 shows the implementation of Watch Service inside the HMS system.
 Inside the global class, the method 
\shape italic
setWatchService()
\shape default
 initiate a Watch Service of the default file system.
 Then, the object of Watch Service will pass to a runnable class 
\shape italic
RepoWatcher
\shape default
.
 Then a WatchKey, which contains the detailed change information, will be
 obtained from the 
\shape italic
watchService.take()
\shape default
.
 The 
\shape italic
take()
\shape default
 method returns a queued key.
 If there are not any changes detected by the Watch Service, this method
 waits.
 On the other hand, if a change has been detected by the Watch Service,
 key will be not a null object, and this key will enter an infinite loop.
 Inside the loop, the address of changed repository will be got and passed
 to the method 
\shape italic
GitEvaluation()
\shape default
.
 This method will start the evaluation process.
 After this key is used, it will be cleared and wait for the next changes.
 The 
\shape italic
RepoWatcher
\shape default
 runs in a seperate thread, 
\shape italic
watchThread
\shape default
, and will be started before HMS actually runs.
 Everytime a new repository is created, it can be easily added to the Watch
 Service as follows: 
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

Path addToWatch= Paths.get(System.getProperty("user.home"), "repositories",
 reponame + ".git", "refs", "heads");
\end_layout

\begin_layout Plain Layout

addToWatch.register(getWatchService(), ENTRY_MODIFY);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Authentication
\end_layout

\begin_layout Standard
After detecting the changes, the next step is to determine who made the
 changes, because the precondition of automatic evaluation to work is to
 get the changes between the commits made by reviewer and students.
 Based on the different submission methods in the diffrent lecture modes,
 the Authentication of automatic evaluation works also differently in Local
 and Remote mode.
\end_layout

\begin_layout Subsubsection
a.
 Local mode
\end_layout

\begin_layout Standard
The situation under local mode is straightforward: Each repository will
 only have two committers: hms and reviewer.
 Because under this mode the students don’t have any access rights to the
 repository and can only use the lecture homepage to upload the submission.
 Every time a student uses the homepage to upload a submission, the HMS
 system will commit the changes.
\end_layout

\begin_layout Standard
So under this mode, when the HMS system detects the changes, it will try
 to find out the name of the committer.
 If the name of the committer was “hms”, then this is a submission from
 the students.
 Otherwise, it is the evaluation submission from the reviewer.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

RevWalk walk= new RevWalk(repository);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ObjectId head=repository.resolve(Constants.HEAD);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

RevCommit headCommit=walk.parseCommit(head);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

String committerofhead=headCommit.getAuthorIdent().getName();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the name of committer
\begin_inset CommandInset label
LatexCommand label
name "fig:Get-the-nameofcommiter"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Get-the-nameofcommiter"

\end_inset

 shows a code snippet used in the HMS system to get the name of the committer
 using JGit API
\begin_inset CommandInset citation
LatexCommand cite
key "jgitguide"

\end_inset

, since the latest change of a repository will be saved inside the HEAD
 which is a reference to the last commit of a repository
\begin_inset CommandInset citation
LatexCommand cite
key "chacon2014pro"

\end_inset

.
 The HMS will always try to obtain the identity information from the commit
 referenced by the HEAD.
 
\end_layout

\begin_layout Subsubsection
b.
 Remote mode
\end_layout

\begin_layout Standard
Under remote mode, using the name or email address of a committer to determine
 the identity becomes unreliable since, under this mode, students also have
 full access to the repository and the identity of a committer can be easily
 changed using any Git client.
 The results of an evaluation can be easily manipulated because of this.
 For instance, a student using Git push command submits a solution to the
 repository normally, and later on they change their name and email address
 to a teacher of the lecture, and make comments to their submission by themselve
s, and push their own commented version to the repository.
 The results are thus manipulated.
\end_layout

\begin_layout Standard
The solution to this issue is that when a student submits a solution to
 the repository of the lecture, the HMS will revoke all the access rights
 of this student to this repository immediatley when it detects the changes
 of the repository, so that the next committer can only be the reviewer,
 because only the reviewer has access to the repository.
 This, however, raises another problem: How to determine that a change was
 a submission from a student.
 This requires a student to use a key word, ”Assignment” inside their commit
 messages.
 If the HMS detects a change and the commit message of this change contains
 the keyword, HMS will think this submission is from students, and should
 revoke their access rights to this repository temporarily.
 Until the next commit, which is definitely from the reviewer, finishes
 the evaluation, the HMS will reassign the access rights back to the students
 until the next submission.
 However, this method will require the reviewer to not use the keyword ”Assignme
nt” inside their commit messages.
\end_layout

\begin_layout Subsubsection
Collecting and registering the result of the evaluation
\end_layout

\begin_layout Standard
If the HEAD commit was made by the reviewer and the commit before the HEAD
 was made by the students or hms, then the HMS will start the evaluation
 phase.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

	ObjectId newhead = repository.resolve("HEAD^{tree}");
\end_layout

\begin_layout Plain Layout

	ObjectId oldHead = repository.resolve("HEAD^^{tree}");
\end_layout

\begin_layout Plain Layout

	ByteArrayOutputStream changes = new ByteArrayOutputStream();
\end_layout

\begin_layout Plain Layout

	DiffFormatter formatter = new DiffFormatter(changes);
\end_layout

\begin_layout Plain Layout

	formatter.setRepository(repository);
\end_layout

\begin_layout Plain Layout

	formatter.format(oldHead, newhead);
\end_layout

\begin_layout Plain Layout

	String diffresult = changes.toString();
\end_layout

\begin_layout Plain Layout

	evaluationResult = CommitParser(diffresult);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get evaluation 
\begin_inset CommandInset label
LatexCommand label
name "fig:Get-Evaluation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Get-Evaluation"

\end_inset

 demonstrates the method to obtain the Git diff result between the current
 HEAD commit and the commit before the HEAD into a string object.
 The result, which is similar to the result in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unified-Diff-Format"

\end_inset

 will be passed to the method 
\shape italic
CommitParse()
\shape default
.
 In this method, the 
\shape italic
string diffresult
\shape default
 will be parsed using the Java Regex
\begin_inset CommandInset citation
LatexCommand cite
key "JavaOffi"

\end_inset

, and the total points from the comments made by the reviewer will be calculated.
 In order to register the points conveniently, the name of the repository
 is intentionally designed as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

WS2016_LocalLectureTest_7352212
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first part is the semester information, while the second part is the
 name of a lecture, and the last part is the ID of the student.
 With this naming method, the detail information about the lecture and the
 student can be easily obtained from the related database, so that the evaluatio
n result can be registered accordingly.
\end_layout

\begin_layout Section
User management
\end_layout

\begin_layout Standard
The implementation of the user management system consists of the following
 parts:
\end_layout

\begin_layout Enumerate
Registration system
\end_layout

\begin_layout Enumerate
Authentication and Authorization system
\end_layout

\begin_layout Enumerate
Self-management system
\end_layout

\begin_layout Subsection
Registration system
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/registration form.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Registration form on homepage
\begin_inset CommandInset label
LatexCommand label
name "fig:Registration-form"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The registration system of the HMS is modified from the demo project PlayStartAp
p
\begin_inset CommandInset citation
LatexCommand cite
key "PlayStartAppOffi"

\end_inset

.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Registration-form"

\end_inset

 shows the registration form on the HMS homepage.
 A new user needs to at least type in their email address, first name, last
 name, and the password.
 The student number is optional because of the multi-user role management
 of the system.
 Student users will get a student user role as a default if they type in
 their student number.
 Other users will get a random user ID and a “default user” role.
 The system administrator will change their user role afterwards.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Save-user-registration"

\end_inset

 shows what happens when users click the sign up button on the registration
 form.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result save() {
\end_layout

\begin_layout Plain Layout

        Form<Application.Register> registerForm = form(Application.Register.class).b
indFromRequest();
\end_layout

\begin_layout Plain Layout

        if (registerForm.hasErrors()) {
\end_layout

\begin_layout Plain Layout

            return badRequest(index.render());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        Application.Register register = registerForm.get();
\end_layout

\begin_layout Plain Layout

        Result resultError = checkBeforeSave(registerForm, register.email);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (resultError != null) {
\end_layout

\begin_layout Plain Layout

            return resultError;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            User user = new User();
\end_layout

\begin_layout Plain Layout

            if(register.id==null||register.id.isEmpty()){
\end_layout

\begin_layout Plain Layout

                user.id= CreateExternalId.generateId();
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            else{
\end_layout

\begin_layout Plain Layout

            user.id=register.id;}
\end_layout

\begin_layout Plain Layout

            user.roles=UserRoll.Students.toString();
\end_layout

\begin_layout Plain Layout

            user.confirmationToken = UUID.randomUUID().toString();
\end_layout

\begin_layout Plain Layout

            user.save("global");
\end_layout

\begin_layout Plain Layout

            sendMailAskForConfirmation(user);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Save user registration
\begin_inset CommandInset label
LatexCommand label
name "fig:Save-user-registration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The sign up button is bonded with the function “Signup.save()”.
 At first, the data from the 
\shape italic
registerForm
\shape default
 will be checked as to whether all the required fields have been filled.
 If there is an error, the user will be redirected to the homepage and do
 the registration process again.
 Second, if the data are correct, the email address from the 
\shape italic
registerForm
\shape default
 will be checked by the function 
\shape italic
checkBeforeSave()
\shape default
 to insure that the email address has not be taken by other users.
 If both tests have been proofed, the next step is to check the user ID.
 If the user ID has been given, then this user should be saved with the
 user role of students; if the user ID is empty, the user will obtain a
 user role of default user.
 After saving the user registration data alone with the confirmation token
 to the database, a confirmation email with user confirmation token will
 be sent to the user email address by the function 
\shape italic
sendMailAskForConfirmation()
\shape default
, in Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Confirm-registration"

\end_inset

.
 At this step the user data are successfully saved into the database and
 wait to be confirmed by the user.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

private static void sendMailAskForConfirmation(User user){
\end_layout

\begin_layout Plain Layout

        String subject = Messages.get("mail.confirm.subject");
\end_layout

\begin_layout Plain Layout

        urlString += "/confirm/" + user.confirmationToken;
\end_layout

\begin_layout Plain Layout

        URL url = new URL(urlString);
\end_layout

\begin_layout Plain Layout

        String message = Messages.get("mail.confirm.message", url.toString());
\end_layout

\begin_layout Plain Layout

        Mail.Envelop envelop = new Mail.Envelop(subject, message, user.email);
\end_layout

\begin_layout Plain Layout

        Mail.sendMail(envelop);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public static Result confirm(String token) {
\end_layout

\begin_layout Plain Layout

        User user = User.findByConfirmationToken(token,"global");
\end_layout

\begin_layout Plain Layout

        if (User.confirm(user,"global")) {
\end_layout

\begin_layout Plain Layout

            sendMailConfirmation(user);
\end_layout

\begin_layout Plain Layout

            user.dateCreation=new Date();
\end_layout

\begin_layout Plain Layout

            user.save("global");
\end_layout

\begin_layout Plain Layout

            return ok(views.html.account.signup.confirm.render(user));
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Confirm registration
\begin_inset CommandInset label
LatexCommand label
name "tab:Confirm-registration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The user needs to use the hyperlink (contains a confirmation token) to confirm
 their registration.
 After the user has clicked the confirmation link, the confirmation token
 will be passed to the method 
\shape italic
confirm()
\shape default
.
 The system then, uses this token to find the correct user record within
 the database.
 If the user is found then a welcome email will be sent and mark this user
 as confirmed in the database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/confirmationtoken.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/finish.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Registration successful 
\begin_inset CommandInset label
LatexCommand label
name "fig:Registration-successful"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the details of the user are successfully updated in the database, the
 system will render a modal and the user can directly log into their account
 and start using the system.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Registration-successful"

\end_inset

 shows the result of a successful registration.
 The URL from above is the confirmation link with the user token.
\end_layout

\begin_layout Subsection
Authentication and authorization system
\begin_inset CommandInset label
LatexCommand label
name "sub:Authentication-system"

\end_inset


\end_layout

\begin_layout Subsubsection
Authentication
\end_layout

\begin_layout Standard
The authentication system consists of two parts:
\end_layout

\begin_layout Enumerate
Authentication of HMS system
\end_layout

\begin_layout Enumerate
Authentication of Git server
\end_layout

\begin_layout Standard
The first part is the authentication of the HMS system.
 This part controls the user login activities.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/login.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/forget password.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Login and password recovery
\begin_inset CommandInset label
LatexCommand label
name "fig:Login-and-Password"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Login-and-Password"

\end_inset

 shows the component of authentication of a user login.
 The login procedure is straightforward.
 If the inputted email address and password have a match inside the database,
 the user will be redirected to the homepage.
 It also should be noticed that, due to security reasons, the password will
 be saved as SHA-256
\begin_inset CommandInset citation
LatexCommand cite
key "gilbert2003security"

\end_inset

 hash in the database.
\end_layout

\begin_layout Standard
Another function of the authentication system is to recover the user password.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reset-Password"

\end_inset

 shows the procedure for when the user resets their password with an email
 address.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,showstringspaces=false,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result runAsk() {
\end_layout

\begin_layout Plain Layout

        Form<AskForm> askForm = form(AskForm.class).bindFromRequest();
\end_layout

\begin_layout Plain Layout

        User user = User.findByEmail(email,"global");
\end_layout

\begin_layout Plain Layout

        if (user == null) {
\end_layout

\begin_layout Plain Layout

            sendFailedPasswordResetAttempt(email);
\end_layout

\begin_layout Plain Layout

            return ok(views.html.account.reset.runAsk.render());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            Token.sendMailResetPassword(user,"global");
\end_layout

\begin_layout Plain Layout

            return ok(views.html.account.reset.runAsk.render());
\end_layout

\begin_layout Plain Layout

        } catch (MalformedURLException e) {
\end_layout

\begin_layout Plain Layout

            Logger.error("Cannot validate URL", e);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout
\noindent

        return badRequest(ask.render(askForm));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Reset password 
\begin_inset CommandInset label
LatexCommand label
name "fig:Reset-Password"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With 
\shape italic
runAsk()
\shape default
, system first checks whether a user with the input email exists in the
 database.
 For security reasons, if the user does not exist, the system shouldn’t
 expose any results to the user; instead, send an email to notify the person
 that the reset has failed.
 If the user exist, the other actions will be the same as the registration,
 and the user will receive an email with a hyperlink with a reset token.
 They can click this hyperlink, and it will generate a password reset page.
 At this page the user can modify their password.
\end_layout

\begin_layout Standard
The second part of authentication related to the Git server: because the
 Git function is using Gitolite to manage the access rights of the student’s
 repository, it has a separate authentication system using the ssh public
 key mechanism.
 The detail implementation has already been discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Integration-of-Git"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Authorization
\end_layout

\begin_layout Standard
Besides the authentication of a user, the HMS system still need to authorize
 the user proper access rights based on the user role (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Different-user-role"

\end_inset

).
 Playframework uses actions to serve HTTP requests.
 An action is basically a Java method that processes the data from the HTTP
 request
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset

.
 If an unauthorized person can mock a correct HTTP request, this person
 can basically execute any actions implemented in server logic.
 In order to prevent unauthorized actions, Playframework comes with a built-in
 authenticator action called 
\shape italic
Secured
\shape default

\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset

.
 In the case of the HMS system, some actions can only be executed by the
 user role of the teacher, the additionally secured class implementation
 should distinguish the current user role and decide whether the actions
 should be executed for the current user.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,showstringspaces=false,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public class Securedteacher extends Security.Authenticator{
\end_layout

\begin_layout Plain Layout

@Override
\end_layout

\begin_layout Plain Layout

public String getUsername(Http.Context ctx) {
\end_layout

\begin_layout Plain Layout

    User current=User.findByEmail(ctx.session().get("email"), "global");
\end_layout

\begin_layout Plain Layout

    if(current!=null) {
\end_layout

\begin_layout Plain Layout

        if (current.roles.equals(UserRoll.Teachers.toString())) {
\end_layout

\begin_layout Plain Layout

            return ctx.session().get("email");
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            return null;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }else{
\end_layout

\begin_layout Plain Layout

        return null;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Override
\end_layout

\begin_layout Plain Layout

public Result onUnauthorized(Http.Context ctx) {
\end_layout

\begin_layout Plain Layout

    User current=User.findByEmail(ctx.session().get("email"), "global");
\end_layout

\begin_layout Plain Layout

    return ok(forbidden.render(current));
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Security.Authenticated(Securedteacher.class)
\end_layout

\begin_layout Plain Layout

public static Result createlecture() {
\end_layout

\begin_layout Plain Layout

          ...
\end_layout

\begin_layout Plain Layout

         }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Secured actions 
\begin_inset CommandInset label
LatexCommand label
name "fig:Secured-actions"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Secured-actions"

\end_inset

 shows the secured class implementation and its usage for the user role
 of teacher.
 At first use the 
\shape italic
HTTP.Context
\shape default
 session to get a current user, then compare the current user role to the
 required user role.
 If they are identical, the email address of the current user will be returned;
 otherwise, 
\shape italic
null
\shape default
 will be returned.
 According to the documentation of the Playframework, if method 
\shape italic
getUsername()
\shape default
 returns a string, annotated action, 
\shape italic
createlecture()
\shape default
 will be executed for the current user.
 If 
\shape italic
getUsername()
\shape default
 returns value null, the method 
\shape italic
onUnauthorized()
\shape default
 will be executed.
 In this example, a web page “forbidden” will be generated for the current
 user, and notify the user that this action cannot be accomplished with
 their current user role.
 
\end_layout

\begin_layout Subsection
Self-management
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/updateemail.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/addssh.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Self-management 
\begin_inset CommandInset label
LatexCommand label
name "fig:Self-management"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Self-management"

\end_inset

 shows the component of the self-management system.
 At the settings page of the user, the user can update their ssh, password
 and email; they can update the password and email using the same mechanisms
 from the Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Authentication-system"

\end_inset

.
 If a user wants to change their email or password, the HMS system will
 always send a confirmation email with a confirmation token.
 Only after the user has confirmed the changes from the URL within the email,
 can the changes then be saved into the database.
 It is a necessary step to offer more security to sensitive data.
 And in order to use the Git repository which is managed by Gitolite (Section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Integration-of-Git"

\end_inset

), the user also needs to add the ssh public key from their working terminals.
\end_layout

\begin_layout Section
Course management
\end_layout

\begin_layout Standard
The management of a course includes two parts: Creating a new course and
 the enrollment of the course participants.
 
\end_layout

\begin_layout Subsection
Creating a new course
\end_layout

\begin_layout Standard
Because of the different types and features of a course (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Features-of-course"

\end_inset

), the function of creating new course must be able to cover these two types
 of courses.
 Also, creating a new course is related to the database generation, so it
 should also have the ability to decide whether a new semester database
 should be generated.
\end_layout

\begin_layout Subsubsection
User interface
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align right
\begin_inset Graphics
	filename images/remotelecture.jpg
	scale 40

\end_inset


\begin_inset Graphics
	filename images/locallecture.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset Caption Standard

\begin_layout Plain Layout
GUI of creating a new course 
\begin_inset CommandInset label
LatexCommand label
name "fig:GUI-of-creatingcourse"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GUI-of-creatingcourse"

\end_inset

 shows the user interface of creating a new course.
 The form from left is used to create the ”Type II” course with a remote
 Git repository.
 This type of course only contains a semester project and didn’t have a
 normal final exam so there isn’t much information needed for creating the
 ”Type II” course.
 Only the deadline and a description of the course are needed.
 Another form on the right side is for the ”Type I” course.
 In the ”Type I” course students need to do various homework assignments
 and earn enough points to enter the final exam.
 So when creating this kind of course, the teacher should provide the preconditi
on for the final exam, like the number of assignments and how many points
 are needed to enter the final exam.
 All these settings can still be modified after the course has been created.
\end_layout

\begin_layout Subsubsection
Server-side logic
\end_layout

\begin_layout Standard
After sending the course creation form to the server, the data from the
 form will be processed by the 
\shape italic
createlecture()
\shape default
 method.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logic-of-creatingcourse"

\end_inset

 shows the process for how the newly created courses are saved into a semester
 database.
\end_layout

\begin_layout Standard
The first thing to check is the semester name of the course.
 If the semester name of the course does not show in the semester tracking
 table of global database, it simply means a new semester has begun.
 So the first thing the system will do is generate a new database for this
 course and then save the new semester into the semester tracking table.
 After that, the course will be saved under the correct semester database.
 
\end_layout

\begin_layout Standard
If the semester name of a new course are present, the course will be simply
 saved into the related semester database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

 if(!createlectureForm.hasErrors()) {
\end_layout

\begin_layout Plain Layout

	String semester = createlectureForm.get().yearprefix
\end_layout

\begin_layout Plain Layout

                    + createlectureForm.get().year;
\end_layout

\begin_layout Plain Layout

	User globaluser=User.findByEmail(ctx().session().get("email"),"global");
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	if (Semester.findsemester(semester) == null) {
\end_layout

\begin_layout Plain Layout

	    List<Class> entity = new ArrayList<Class>();
\end_layout

\begin_layout Plain Layout

	    entity.add(Semesteruser.class);
\end_layout

\begin_layout Plain Layout

	    ...
\end_layout

\begin_layout Plain Layout

	    entity.add(Conversation.class);
\end_layout

\begin_layout Plain Layout

	    createServer(semester, entity);
\end_layout

\begin_layout Plain Layout

	    Semester addsemester = new Semester();
\end_layout

\begin_layout Plain Layout

	    addsemester.semester = semester;
\end_layout

\begin_layout Plain Layout

	    addsemester.save("global");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	Lecture lecture = new Lecture();
\end_layout

\begin_layout Plain Layout

	lecture.semester = semester;
\end_layout

\begin_layout Plain Layout

	lecture.courseName = createlectureForm.get().coursename;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	lecture.closingdate = createlectureForm.get().closingdate;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	Semesteruser semesteruser=Semesteruser.getSemesteruserfomrUser(semester,globalus
er);
\end_layout

\begin_layout Plain Layout

	lecture.lasteditor = semesteruser;
\end_layout

\begin_layout Plain Layout

	if (!lecture.attendent.contains(lecture.lasteditor)) {
\end_layout

\begin_layout Plain Layout

	    lecture.attendent.add(lecture.lasteditor);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	try {
\end_layout

\begin_layout Plain Layout

	lecture.save(lecture.semester);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Logic of creating a new course 
\begin_inset CommandInset label
LatexCommand label
name "fig:Logic-of-creatingcourse"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Course enrollment
\end_layout

\begin_layout Standard
After creating the course, it is time to let the students or other teachers
 and assistants join the course.
 The first part of course enrollment is to list all of the available courses
 to the users of the HMS.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/brwosing.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Browsing the course 
\begin_inset CommandInset label
LatexCommand label
name "fig:Browsing-the-course"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Browsing-the-course"

\end_inset

 shows all the available courses under the semester “WS2016”.
 When the user clicks on one of the courses, the homepage of the course
 will show up and ask the user to join the course (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Course-homepage-beforesignup"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/course homepage.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Course homepage before sign up
\begin_inset CommandInset label
LatexCommand label
name "fig:Course-homepage-beforesignup"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before actually signing up for the course, the user can only view the lecture
 description and the lecture terms.
 The other functions of this lecture are blocked.
\end_layout

\begin_layout Subsubsection
Join the new course
\end_layout

\begin_layout Standard
If a user has a user role above “Defaultuser”, this user can join a course.
 If the user has a student user role, after clicking the “Join” button,
 three things will happen: 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static Result addSemesterusertoLecture(String user, String semester,Strin
g lecturename){
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

if(Lecture.addSemesterusertoLecture(semester, semesteruser, lecture)){
\end_layout

\begin_layout Plain Layout

    if(semesteruser.roles.equals(UserRoll.Students.toString())){
\end_layout

\begin_layout Plain Layout

        Evaluation eval= new Evaluation();
\end_layout

\begin_layout Plain Layout

        eval.lecture=lecture;
\end_layout

\begin_layout Plain Layout

        eval.student=semesteruser;
\end_layout

\begin_layout Plain Layout

        eval.save(semester);
\end_layout

\begin_layout Plain Layout

        semesteruser.update(semester);
\end_layout

\begin_layout Plain Layout

    try{
\end_layout

\begin_layout Plain Layout

        String repopath= RepoManager
\end_layout

\begin_layout Plain Layout

                        .createRemoteRepo(currentuser, lecture, request().getHeade
r("Host"));
\end_layout

\begin_layout Plain Layout

        if(repopath!=null){
\end_layout

\begin_layout Plain Layout

            Repo newrepo = new Repo();
\end_layout

\begin_layout Plain Layout

            newrepo.course=lecture;
\end_layout

\begin_layout Plain Layout

            ...
\end_layout

\begin_layout Plain Layout

            newrepo.save(lecture.semester);
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        else{
\end_layout

\begin_layout Plain Layout

            ...
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }catch(Exception e){
\end_layout

\begin_layout Plain Layout

     ...}
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Add a student to a course 
\begin_inset CommandInset label
LatexCommand label
name "fig:Add-student-to"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Add-student-to"

\end_inset

 shows the three processes for when a student joins the course.
 First, the current student user will be added to the participants’ list
 of the target lecture.
 At the same time, a new evaluation object will be generated for this student.
 The evaluation object will be used to save the student’s total performance
 for this lecture.
 At last, the student will get a Gitolite bare repository generated by the
 method 
\shape italic
createRemoteRepo()
\shape default
.
\end_layout

\begin_layout Standard
On the other hand, if a user has a teacher or an assistant role, the system
 only needs to add the user to the course participants’ list, since the
 evaluation and repository are only needed by the student.
\end_layout

\begin_layout Section
Assignment management
\end_layout

\begin_layout Standard
The management of assignments consists of three parts: The first part is
 creating an assignment.
 The second part is collecting and evaluating the student submissions, and
 the third part is returning the assignments’ results back to the student.
 The evaluation of the students’ submissions has already been discussed
 in the previous section.
 This next section will focus on creating assignments and distributing the
 results to students.
 
\end_layout

\begin_layout Subsubsection
Creating assignments
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/modify assignment.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/create assignment.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creation of an assignment 
\begin_inset CommandInset label
LatexCommand label
name "fig:Creation-of-assignment"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Creation-of-assignment"

\end_inset

 shows the homework area on the teacher’s course homepage.
 The form from above is used to modify the details of an assignment, and
 there are several things that the teacher needs to input: The details of
 the exercise, the deadline of this assignment, and lastly, the teacher
 can upload the related materials to the assignment.
 The eacher can also give additional information to clarify the problem
 inside the assignment.
 Created assignments will be shown below on the homework section of the
 homepage.
 The details of the assignment can still be modified and be deleted after
 creation, but after a student has uploaded a solution, the assignment cannot
 be deleted anymore.
\end_layout

\begin_layout Standard
On the student side, the created assignment will immediately appear on the
 course homepage and be ready to be worked on (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Homework-submission-for-local"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Feedback of result
\end_layout

\begin_layout Standard
After the evaluation of a submission, the results will be given back to
 the students.
 The students can direct click the points in the column under the evaluation
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Homework-submission-for-local"

\end_inset

) for details which were shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Assignment-results"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/result evaluation.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Assignment results 
\begin_inset CommandInset label
LatexCommand label
name "fig:Assignment-results"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Unified Diff will be used directly as feedback, so that the students
 can track down the teacher’s comments more easily.
 Additionally, if the lecture is under local modes, students can also directly
 download the corrected version using the link in the left-hand corner.
\end_layout

\begin_layout Section
Communication system
\end_layout

\begin_layout Standard
There are two ways for the user of the HMS to communicate with each other:
 A public course forum and a private instant message system.
\end_layout

\begin_layout Subsection
Public forum
\end_layout

\begin_layout Standard
The forum is used for students to share their questions about the assignments
 or the course, using the forum to discuss the question can avoid the same
 questions from being repeatedly asked by different students.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Course-Forum"

\end_inset

 is the main page of a course forum.
 The area above is the forum functions, and the forum thread will be listed
 underneath.
 The latest modified thread will always be listed at the top.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/forumgui.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Course forum 
\begin_inset CommandInset label
LatexCommand label
name "fig:Course-Forum"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Private instant message
\end_layout

\begin_layout Standard
The HMS system uses the WebSocket protocol (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:b.-Instant-message"

\end_inset

) to realize the instant message system.
 Playframework supports WebSocket natively.
 But WebSocket can’t be directly handled by standard Playframework actions.
 A possible way to use WebSocket in Play is using function callbacks.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

@Security.Authenticated(Securedstudents.class)
\end_layout

\begin_layout Plain Layout

@BodyParser.Of(BodyParser.Json.class)
\end_layout

\begin_layout Plain Layout

public static WebSocket<String> socket(){
\end_layout

\begin_layout Plain Layout

  User currentuser=User.findByEmail(ctx().session().get("email"),"global");
\end_layout

\begin_layout Plain Layout

  if(currentuser!=null) {
\end_layout

\begin_layout Plain Layout

      return WebSocket.whenReady((in, out) -> {
\end_layout

\begin_layout Plain Layout

          Chatsocket.start(currentuser.email, in, out);
\end_layout

\begin_layout Plain Layout

      });
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
WebSocket callbacks 
\begin_inset CommandInset label
LatexCommand label
name "fig:Websocket-callbacks"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Websocket-callbacks"

\end_inset

 is the WebSocket callback function.
 When the Web Socket is ready, both in and out channels of this connection
 will be obtained by the system.
 The channels and the email of the current user will be passed on to the
 method 
\shape italic
start()
\shape default
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-WebSocket-data"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

public static HashMap<String,WebSocket.Out<String>> connections;        
                                            
\end_layout

\begin_layout Plain Layout

public static void start(String useremail,WebSocket.In<String> in, WebSocket.Out<S
tring> out){
\end_layout

\begin_layout Plain Layout

    connections.put(useremail,out);
\end_layout

\begin_layout Plain Layout

    in.onMessage(new F.Callback<String>() {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public void invoke(String event) throws Throwable {
\end_layout

\begin_layout Plain Layout

    JsonNode inmsg = Json.parse(event);
\end_layout

\begin_layout Plain Layout

    if(inmsg.findPath("event").asText().equals("allconversations")){
\end_layout

\begin_layout Plain Layout

		out.write(result.toString());
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if(inmsg.findPath("event").asText().equals("chatcontent")){
\end_layout

\begin_layout Plain Layout

		out.write(result.toString());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if(inmsg.findPath("event").asText().equals("newmessage")){
\end_layout

\begin_layout Plain Layout

		conversation.update(semester);
\end_layout

\begin_layout Plain Layout

		out.write(result.toString());	
\end_layout

\begin_layout Plain Layout

		connections.get(other).write(notification.toString());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Process WebSocket data 
\begin_inset CommandInset label
LatexCommand label
name "fig:Process-WebSocket-data"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The data from the in channel will be processed in the method from Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-WebSocket-data"

\end_inset

.
 First the outgoing channel will be saved with its user name inside a hash
 map, so that the outgoing channel can be easily picked up later.
 Then the inbound message will be processed by the 
\shape italic
invoke()
\shape default
 method.
 The inbound messages are saved in a JSON string, The first thing to do
 is to parse the inbound message.
 The inbound message has two keys: event and data.
 
\shape italic
Event
\shape default
 is defined by the message type and 
\shape italic
Data
\shape default
 stores the actual data from the client.
 The client will generate three different types of messages based on the
 user actions.
 Three example messages are listed below: 
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

{"event":"allconversations","data":{"semester":"WS2016","email":"b@b.com"}}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

{"event":"chatcontent","data":{"convid":"1","semester":"WS2016"}}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

{"event":"newmessage","data":{"semester":"WS2016","convid":"1","content":"How
 r u?","other":"a@a.com"}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first message is sending a request to the server for all the conversations
 of user “b@b.com” in semester “WS2016 ”.
 The second message requests the chat content from the conversation with
 user ID “1 ” in conversation WS2016.
 The third message will be generated when a user sends a new message to
 another user, and it contains the information about the conversation ID,
 the content of the new message and the email address of the other participants
 of this conversation.
\end_layout

\begin_layout Standard
According to the information from the inbound messages, the server can serve
 outgoing messages to a different receiver.
 For the first two types of messages, the system will simply return the
 result through the outgoing channel of same user.
 For the third type of message, the system will first save the content of
 the new message into related conversations and finally into the database,
 then the updated conversation object will be formatted into a JSON string
 and sent back to both participants of the conversation, as long as the
 other participant is also connected to the WebSocket.
 The outgoing channel of the other participant will be picked up from the
 hashmap defined in the first line from Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Process-WebSocket-data"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/instant message.jpg
	scale 200

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GUI of instant message
\begin_inset CommandInset label
LatexCommand label
name "fig:GUI-of-im"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GUI-of-im"

\end_inset

 shows the user interface of instant message on the client’s side.
 When the user chooses the semester number in the filter, the first type
 message will be sent to the server.
 If the user clicks the name of another user in the conversation, a second
 type of message will be sent and the conversation content will be shown.
 Sending the new reply will generate a third type of message and the chat
 content will be immediately updated.
\end_layout

\begin_layout Chapter
Tests
\end_layout

\begin_layout Standard
Testing a web application is challenging due to the nature of web applications.
 First, web applications have a client/server structure, with asynchronous
 HTTP calls and response to synchronize the state of each side.
 Second, web application is a mix of different technologies and programming
 languages; for instance, in the HMS system, JAVA was used on the server
 side and HTML5
\begin_inset CommandInset citation
LatexCommand cite
key "HTMLOffi"

\end_inset

, CSS
\begin_inset CommandInset citation
LatexCommand cite
key "cssoffi"

\end_inset

,JavaScript
\begin_inset CommandInset citation
LatexCommand cite
key "JSoffi"

\end_inset

, Scala Template
\begin_inset CommandInset citation
LatexCommand cite
key "playframeworkdocu"

\end_inset

 on the client side.
 Third, a web application have to manipulate the Document Object Model (DOM)
 on the client side to serve dynamic content
\begin_inset CommandInset citation
LatexCommand cite
key "garousi2013systematic"

\end_inset

.
 Therefore, only using the unit test cannot test a web application meaningfully.
 The test of the HMS system is divided into two parts: The first part is
 using Fluentlenium to test the GUI, and the second part is using JUnit
 to test the Server-Logic.
\end_layout

\begin_layout Section
Fluentlenium
\end_layout

\begin_layout Standard
Fluentlenium
\begin_inset CommandInset citation
LatexCommand cite
key "FluentleniumOffi"

\end_inset

 is a framework that helps developers write Selenium tests
\begin_inset CommandInset citation
LatexCommand cite
key "fluentlenium"

\end_inset

.
 Selenium
\begin_inset CommandInset citation
LatexCommand cite
key "SeleniumOffi"

\end_inset

 is an in-browser programming system, which allows developers to directly
 drive the real web browser programmatically.
 It also has direct access to the DOM elements of the web page on the client
 side, and can assert expected client behavior defined by the developer.
 Since Selenium works within the browser, it can be used to test the dynamic
 behavior of JavaScript and the server can respond through the interaction
 between the browser and user
\begin_inset CommandInset citation
LatexCommand cite
key "van2010research,brown2007introduction"

\end_inset

.
 Fluentlenium provides a fluent interface to the Selenium web driver, so
 that the programming of Selenium tests will be much easier and the code
 will be more readable.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-Test-Senario-Fluentlenium"

\end_inset

 demonstrates one of many test scenarios written with Fluentlenium: Registering
 a user account in the HMS system and getting a confirmation email.
 First, the web browser opens a page at “http://localhost:9000 ”.
 Second, a HTML form will be filled out and submitted to the server.
 At last, after receiving the response from the server, the accepted behavior,
 in this case, a success label should be displayed correctly with the text
 "
\shape italic
You will receive a confirmation email soon.
 Check your email to activate your account.
\shape default
" If this text is incorrect, the test will fail.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,showstringspaces=false,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void a_testRegistration(){
\end_layout

\begin_layout Plain Layout

goTo("http://localhost:9000");
\end_layout

\begin_layout Plain Layout

fill("#SignUpEmail").with("123@123.com");
\end_layout

\begin_layout Plain Layout

fill("#SignUpLastname").with("123");
\end_layout

\begin_layout Plain Layout

fill("#SignUpFirstname").with("123");
\end_layout

\begin_layout Plain Layout

fill("#SignUpPassword").with("123");
\end_layout

\begin_layout Plain Layout

click("#SignUpSubmit");
\end_layout

\begin_layout Plain Layout

await().atMost(5, TimeUnit.SECONDS).until(".label-success").areDisplayed();
\end_layout

\begin_layout Plain Layout

assertThat(find(".label-success").getText()).isEqualTo("You will receive a
 confirmation email soon.
 Check your email to activate your account.");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A test Scenario of Fluentlenium
\begin_inset CommandInset label
LatexCommand label
name "fig:A-Test-Senario-Fluentlenium"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Other scenarios, for instance, “creating a new course by teacher”, ”uploading
 a new solution to the assignment by student” are similarly programmed as
 in Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-Test-Senario-Fluentlenium"

\end_inset

.
 
\end_layout

\begin_layout Section
JUnit
\end_layout

\begin_layout Standard
Since the server side of the HMS system is written in Java, the server logic
 will be tested by the JUnit.
 In order to save the testing time, it is important to test the server logic
 without starting the whole HMS system.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,showstringspaces=false,captionpos=b,frame=tb"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void testDeleteSSH() {
\end_layout

\begin_layout Plain Layout

	User owner= new User();
\end_layout

\begin_layout Plain Layout

	owner.save("global");
\end_layout

\begin_layout Plain Layout

	SSH ssh= new SSH();
\end_layout

\begin_layout Plain Layout

	ssh.save("global");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	FakeRequest request=new FakeRequest("POST","/settings/ssh_delete?sshid=1");
\end_layout

\begin_layout Plain Layout

	Result result = route(request);
\end_layout

\begin_layout Plain Layout

	assertThat(status(result)).isEqualTo(OK);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Controller Test 
\begin_inset CommandInset label
LatexCommand label
name "fig:Controller-Test"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Controller-Test"

\end_inset

 is a unit test for controller “deleteSSH”, using the class “FakeRequest”
 from the Playframework.
 The developer can easily test the behavior of the controller without actually
 starting the application.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Controller-Test"

\end_inset

 a fake HTTP post request will be sent to the controller with a URL query
 “sshid=1 ”.
 Since before this request a new ssh has already been saved into the database,
 the request for “deleting a ssh with id=1 ” should be successful.
 In this case the request status should be equal to ”200” or ”OK”.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Result
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Test-Coverage"

\end_inset

 shows the test coverage from the test procedure from both aspects (GUI
 and Logic), which were calculated by the Jacoco for SBT
\begin_inset CommandInset citation
LatexCommand cite
key "jacoco"

\end_inset

.
 However, due to the incompatability of SBT and Jacoco, many scala methods
 which were generated by Playframework during runtime were marked by the
 Jacoco sbt version as not covered, especially in the database tests.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/coverage with view_part.jpg
	scale 230

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test Coverage 
\begin_inset CommandInset label
LatexCommand label
name "fig:Test-Coverage"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Deployment and maintenance
\end_layout

\begin_layout Standard
After describing every step of the development phase of the HMS sytsem,
 it is time to put the system into real practice.
\end_layout

\begin_layout Standard
The first part of this chapter will describe the steps for deploying the
 HMS system to a private server running with Ubuntu 15.04
\begin_inset Foot
status open

\begin_layout Plain Layout
The installation procedure has also been tested on the Ubuntu 14.04LTS, however
 the automatic installation of the Gitolite is not working with Ubuntu 15.10,
 so Gitolite needs to be installed manuelly
\end_layout

\end_inset

, and the second part will demonstrate the maintenance procedures i.e.
 backing up semester data and managing the user role of the HMS system.
\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Standard
Since the HMS system was written in Java and needs Gitolite to manage the
 Git repository (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Submission-management"

\end_inset

), the user has to make sure the Gitolite server and Java SDK 8.0 have already
 been installed on the server before running the HMS system.
 Besides installing the required software, a mail server also needs to be
 configured, so that the HMS system can send out email.
 Then, the user can execute the start script within the distribution package
 of HMS to bring the system online.
\end_layout

\begin_layout Standard
The content of the distribution package are listed on the left side of Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Distribution-Package-of-hms"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/dispackage1.jpg
	scale 50

\end_inset


\begin_inset Graphics
	filename images/dispackage2.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Distribution package of HMS 
\begin_inset CommandInset label
LatexCommand label
name "fig:Distribution-Package-of-hms"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The script “first_installation” will be used to automatically install and
 configure the Gitolite server.
 On the right side of Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Distribution-Package-of-hms"

\end_inset

, the files inside “bin” folder are shown.
 The script “hms” is for starting the whole HMS system, and the file “mail.conf”
 needs to be configured to fit the mail server.
\end_layout

\begin_layout Subsubsection
Installation of Gitolite
\end_layout

\begin_layout Standard
First of all, the server maintainer should create a new user with the name
 “git” on the Ubuntu server.
 Then copy the distribution package of HMS into a folder and execute the
 script “first installation” as follows:
\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=bash,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

chmod +x first_installation
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=bash,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

./first_installation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The script will first install Git and Gitolite under the user “git”, then
 generate the ssh key pair for the Git user and configure the Gitolite server
 based on this ssh key.
 At last the administrator repository of Gitolite will be cloned into the
 home folder and will then be ready for use.
 If the installation process was successful, the user can find two new directori
es under the home folders: “repositories” and “gitolite-admin”.
\end_layout

\begin_layout Subsubsection
Configuring the mail server
\end_layout

\begin_layout Standard
The mail servers are configured by the file “mail.conf”, and the configurations
 are:
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline true
status open

\begin_layout Plain Layout

smtp.host=mail.gmail.com
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline true
status open

\begin_layout Plain Layout

smtp.port=587
\end_layout

\end_inset

, both of which have to be correctly set according to the mail server which
 is used for the HMS system.
\end_layout

\begin_layout Subsubsection
Starting the HMS system
\end_layout

\begin_layout Standard
After setting up the Gitolite server and the mail server, the HMS system
 can finally be started by executing the script “hms” with the configuration
 file of mail server:
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true"
inline true
status open

\begin_layout Plain Layout

./hms -Dconfig.file=mail.conf
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Maintenance
\end_layout

\begin_layout Standard
The start-up phase of the HMS system will generate an account for the system
 administrator, and the user name and password of the account will be saved
 into a folder named “HMS_Config” under the “git” home directory.
 The administrator account provides two functions: backing up semester data
 and managing the user roles.
 
\end_layout

\begin_layout Subsubsection
Backup
\end_layout

\begin_layout Standard
Since the database file and files, which are generated by the activities
 of the lecture during the semester, are saved under a unified structure
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Semester-file-structure"

\end_inset

), it only needs the maintainer to move these files to other place.
 And additionally, one should remove the information of this semester from
 the system, so that after rebooting the HMS, the system will not try to
 reload the database of this semester (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reload-the-database"

\end_inset

), and all the users of the HMS cannot access the data of this semester
 anymore.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Disconnect-Semester-Database"

\end_inset

 shows the user interface of removing semester information from the system.
 After the maintainer clicks the “Disconnect” button, the information for
 semester “WS2016 ” will be deleted and the database of “WS2016 ” will not
 be reloaded after rebooting the HMS.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/databasedisconnect.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Disconnecting the semester database
\begin_inset CommandInset label
LatexCommand label
name "fig:Disconnect-Semester-Database"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Manage user role
\end_layout

\begin_layout Standard
Besides maintaining the data of the HMS, the administrator of the HMS also
 needs to take care of the user role.
 Based on the request from the user, the administrator can adjust the user
 role from the ”User Management” panel (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Manage-User-Role"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/manage user role.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Manage user role 
\begin_inset CommandInset label
LatexCommand label
name "fig:Manage-User-Role"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Summary and Future Work
\end_layout

\begin_layout Standard
The Homework Management System (HMS) introduced by this thesis has two major
 differences compared to other Learning Management Systems (LMSs).
 The first difference is that the HMS uses Git repository to manage the
 homework submissions.
 Git-based submission management has several advantages: First, the complicated
 implementation of submission strategies can be saved because the features
 of Git repository have already covered most of them (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Submission-management"

\end_inset

).
 Second, automatic evaluations using the result from “git diff ” are possible
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Automatic-Evaluation"

\end_inset

) so that the teacher can register the points directly into the student‘s
 account simply using the push function of Git without logging into the
 HMS system at all.
 
\end_layout

\begin_layout Standard
Another difference is that, in order to reduce the additional work besides
 the teaching activity such as backup and server maintenance, HMS uses a
 special mechanism to manage the data.
 First, HMS is based on the Playframework and embedded database.
 With this combination the HMS can easily run on any computer with JVM pre-insta
lled as a stand-alone Java application; it doesn’t require an addtional
 server and database configuration.
 Second, the file-based embedded database will be generated separately for
 each semester, so that each database will only hold the data specific to
 that semester, and the file database will be saved together with other
 files under a unified storage structure on the host computer, so that the
 backup procedure is almost as easy as copying the semester-related files
 to another location (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Dynamic-data-management"

\end_inset

).
\end_layout

\begin_layout Standard
The current work of HMS focuses on improving the low level functions; e.g.
 introducing new methods to manage the homework and data.
 Some other high level features related to the educational activities are
 not supported in the current state or are only partially supported, for
 instance, the course enrollment can only support self-enrollment which
 allows users to enroll themselves, and the admin of the lecture however
 cannot control the enrollment.
 In the future work of the HMS, these high level features should be added
 continuously based on the requirements of the educational activities.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Glossary}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "HMS"
description "Homework Management System"

\end_inset

 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "LMS"
description "Learning Management System"

\end_inset

 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ORM"
description "Object-relational mapping"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "API"
description "Application Programming Interface"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "JSON"
description "JavaScript Object Notation"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "JVM"
description "Java Virtual Machine"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "GUI"
description "Graphical User Interface"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "VCs"
description "Version Controle System"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "W3C"
description "World Wide Web Consortium"

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "DOM"
description "Document Object Model"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "auto"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibtex-daten/bachelorarbeit-info"
options "bibtotoc,bibtex-daten/unsrtdin"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\end_body
\end_document
